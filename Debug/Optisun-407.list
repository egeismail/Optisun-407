
Optisun-407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a488  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a618  0800a618  0001a618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6c0  0800a6c0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6c0  0800a6c0  0001a6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6c8  0800a6c8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6c8  0800a6c8  0001a6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6cc  0800a6cc  0001a6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a6d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00005d7c  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005edc  20005edc  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181b2  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000368c  00000000  00000000  00038342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024808  00000000  00000000  0003e080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018dcf  00000000  00000000  00062888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc2a  00000000  00000000  0007b657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b281  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057c8  00000000  00000000  0014b2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a600 	.word	0x0800a600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800a600 	.word	0x0800a600

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <sti_Setup_UART>:
STIResult _sti_sendCommand(STICommand command);
STIResult _sti_sendString_(const char *strbuffer,size_t length);
STIResult _sti_sendString(const char *strbuffer);

STICommand lastCommand = R_NULL;
void sti_Setup_UART(UART_HandleTypeDef *bf){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	bluetoothInterface = bf;
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <sti_Setup_UART+0x38>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(REDLED_GPIO_Port, REDLED_Pin, RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <sti_Setup_UART+0x3c>)
 800059a:	f001 fcc7 	bl	8001f2c <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(bluetoothInterface, dataBuffer, MAX_SIZE);
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <sti_Setup_UART+0x38>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80005a6:	4907      	ldr	r1, [pc, #28]	; (80005c4 <sti_Setup_UART+0x40>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f004 f998 	bl	80048de <HAL_UART_Receive_DMA>
	STI_STATE= INITIALIZED;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <sti_Setup_UART+0x44>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]

}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000017c 	.word	0x2000017c
 80005c0:	40020c00 	.word	0x40020c00
 80005c4:	20000184 	.word	0x20000184
 80005c8:	20000180 	.word	0x20000180

080005cc <fastSearch>:
unsigned char fastSearch(void* needle,size_t needle_len,void* bale,size_t bale_len,size_t *offsetResult){
 80005cc:	b480      	push	{r7}
 80005ce:	b089      	sub	sp, #36	; 0x24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
	size_t idx = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
	BYTE fs = *(BYTE*)(needle);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	74fb      	strb	r3, [r7, #19]
	BYTE ts = 0x00;
 80005e4:	2300      	movs	r3, #0
 80005e6:	76fb      	strb	r3, [r7, #27]
	while(idx < bale_len){
 80005e8:	e036      	b.n	8000658 <fastSearch+0x8c>
		while(ts != fs && idx < bale_len){
			ts = *(BYTE*)(bale+idx);
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	76fb      	strb	r3, [r7, #27]
			idx++;
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	3301      	adds	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
		while(ts != fs && idx < bale_len){
 80005fa:	7efa      	ldrb	r2, [r7, #27]
 80005fc:	7cfb      	ldrb	r3, [r7, #19]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d003      	beq.n	800060a <fastSearch+0x3e>
 8000602:	69fa      	ldr	r2, [r7, #28]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d3ef      	bcc.n	80005ea <fastSearch+0x1e>
		}
		BYTE EqRes = 0x1;
 800060a:	2301      	movs	r3, #1
 800060c:	76bb      	strb	r3, [r7, #26]
		for (size_t j = 0; j < needle_len; ++j) {
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e017      	b.n	8000644 <fastSearch+0x78>
			EqRes &= *(BYTE*)(bale+idx+j) == *(BYTE*)(needle+j);
 8000614:	69fa      	ldr	r2, [r7, #28]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	4413      	add	r3, r2
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	68f9      	ldr	r1, [r7, #12]
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	440b      	add	r3, r1
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	bf0c      	ite	eq
 800062c:	2301      	moveq	r3, #1
 800062e:	2300      	movne	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	b25a      	sxtb	r2, r3
 8000634:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000638:	4013      	ands	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	76bb      	strb	r3, [r7, #26]
		for (size_t j = 0; j < needle_len; ++j) {
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3e3      	bcc.n	8000614 <fastSearch+0x48>
		}
		if(EqRes)
 800064c:	7ebb      	ldrb	r3, [r7, #26]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d107      	bne.n	8000662 <fastSearch+0x96>
			break;
		else{
			idx++;
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3301      	adds	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
	while(idx < bale_len){
 8000658:	69fa      	ldr	r2, [r7, #28]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	d3cc      	bcc.n	80005fa <fastSearch+0x2e>
 8000660:	e000      	b.n	8000664 <fastSearch+0x98>
			break;
 8000662:	bf00      	nop
		}
	}
	if(idx>=bale_len){
 8000664:	69fa      	ldr	r2, [r7, #28]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	d301      	bcc.n	8000670 <fastSearch+0xa4>
		return 0;
 800066c:	2300      	movs	r3, #0
 800066e:	e003      	b.n	8000678 <fastSearch+0xac>
	}else{
		*offsetResult = idx;
 8000670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000672:	69fa      	ldr	r2, [r7, #28]
 8000674:	601a      	str	r2, [r3, #0]
		return 1;
 8000676:	2301      	movs	r3, #1
	}
}
 8000678:	4618      	mov	r0, r3
 800067a:	3724      	adds	r7, #36	; 0x24
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <sti_syncSession>:
STIResult sti_syncSession(){
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af02      	add	r7, sp, #8
	if(isSync>0) return;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <sti_syncSession+0x4c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d117      	bne.n	80006c2 <sti_syncSession+0x3e>
	BYTE sign[4] =  {0xBE,0xEF,0xBE,0xEF};
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <sti_syncSession+0x50>)
 8000694:	60bb      	str	r3, [r7, #8]
	size_t offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
	BOOL isSync= fastSearch(&sign, 4, &dataBuffer, MAX_SIZE,&offset);
 800069a:	f107 0008 	add.w	r0, r7, #8
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <sti_syncSession+0x54>)
 80006a8:	2104      	movs	r1, #4
 80006aa:	f7ff ff8f 	bl	80005cc <fastSearch>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
	if(!isSync) return;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d006      	beq.n	80006c6 <sti_syncSession+0x42>
	dcursor = offset+4;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3304      	adds	r3, #4
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <sti_syncSession+0x58>)
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	e002      	b.n	80006c8 <sti_syncSession+0x44>
	if(isSync>0) return;
 80006c2:	bf00      	nop
 80006c4:	e000      	b.n	80006c8 <sti_syncSession+0x44>
	if(!isSync) return;
 80006c6:	bf00      	nop

}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000181 	.word	0x20000181
 80006d4:	efbeefbe 	.word	0xefbeefbe
 80006d8:	20000184 	.word	0x20000184
 80006dc:	20004184 	.word	0x20004184

080006e0 <sti_resolveCommand>:
STIResult sti_resolveCommand(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	if(STI_STATE == NOT_INITIALIZED){
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <sti_resolveCommand+0x68>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d107      	bne.n	80006fe <sti_resolveCommand+0x1e>
		HAL_GPIO_WritePin(REDLED_GPIO_Port, REDLED_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f4:	4815      	ldr	r0, [pc, #84]	; (800074c <sti_resolveCommand+0x6c>)
 80006f6:	f001 fc19 	bl	8001f2c <HAL_GPIO_WritePin>
		return S_NULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e01f      	b.n	800073e <sti_resolveCommand+0x5e>
	}
	sti_syncSession();
 80006fe:	f7ff ffc1 	bl	8000684 <sti_syncSession>
	if(sti_available()>=2){
 8000702:	f000 f839 	bl	8000778 <sti_available>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d917      	bls.n	800073c <sti_resolveCommand+0x5c>
		STICommand cmd = *(STICommand*)(&dataBuffer+dcursor);
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <sti_resolveCommand+0x70>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	039b      	lsls	r3, r3, #14
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <sti_resolveCommand+0x74>)
 8000718:	4413      	add	r3, r2
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	80fb      	strh	r3, [r7, #6]
		dcursor +=2;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <sti_resolveCommand+0x70>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3302      	adds	r3, #2
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <sti_resolveCommand+0x70>)
 8000726:	6013      	str	r3, [r2, #0]
		if(cmd == S_STRING){
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800072e:	d105      	bne.n	800073c <sti_resolveCommand+0x5c>
			HAL_GPIO_WritePin(BLUELED_GPIO_Port,BLUELED_Pin,SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <sti_resolveCommand+0x6c>)
 8000738:	f001 fbf8 	bl	8001f2c <HAL_GPIO_WritePin>

		}
	}
	return S_NULL;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000180 	.word	0x20000180
 800074c:	40020c00 	.word	0x40020c00
 8000750:	20004184 	.word	0x20004184
 8000754:	20000184 	.word	0x20000184

08000758 <sti_used>:
			sti_sendString_(dataBuffer, length);
		}
	}

}*/
uint32_t sti_used(){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	return ((uint32_t)MAX_SIZE-(uint32_t)hdma_usart2_rx.Instance->NDTR);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <sti_used+0x1c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 8000766:	333f      	adds	r3, #63	; 0x3f
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20004258 	.word	0x20004258

08000778 <sti_available>:
uint32_t sti_available(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	return sti_used()-dcursor;
 800077c:	f7ff ffec 	bl	8000758 <sti_used>
 8000780:	4602      	mov	r2, r0
 8000782:	4b02      	ldr	r3, [pc, #8]	; (800078c <sti_available+0x14>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	1ad3      	subs	r3, r2, r3
}
 8000788:	4618      	mov	r0, r3
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20004184 	.word	0x20004184

08000790 <_sti_sendString_>:
	HAL_UART_Transmit(bluetoothInterface, tmp, sizeof(command), HAL_TIMEOUT);
	HAL_GPIO_WritePin(BLUELED_GPIO_Port,BLUELED_Pin,RESET);
	/*STIResult ACK = sti_receiveACK();*/
	return R_SUCCESS;
}
STIResult _sti_sendString_(const char *strbuffer,size_t length){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
	if(STI_STATE == NOT_INITIALIZED){
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <_sti_sendString_+0x80>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d107      	bne.n	80007b2 <_sti_sendString_+0x22>
			HAL_GPIO_WritePin(REDLED_GPIO_Port, REDLED_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a8:	481a      	ldr	r0, [pc, #104]	; (8000814 <_sti_sendString_+0x84>)
 80007aa:	f001 fbbf 	bl	8001f2c <HAL_GPIO_WritePin>
			return R_NOT_INITIALIZED;
 80007ae:	2302      	movs	r3, #2
 80007b0:	e02a      	b.n	8000808 <_sti_sendString_+0x78>
	}
	HAL_GPIO_WritePin(ORANGELED_GPIO_Port,ORANGELED_Pin,SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <_sti_sendString_+0x84>)
 80007ba:	f001 fbb7 	bl	8001f2c <HAL_GPIO_WritePin>
	STICommand cmd = S_STRING;
 80007be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c2:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(bluetoothInterface, &cmd, sizeof(STICommand), HAL_TIMEOUT);
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <_sti_sendString_+0x88>)
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	f107 010e 	add.w	r1, r7, #14
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	2202      	movs	r2, #2
 80007d2:	f003 fff2 	bl	80047ba <HAL_UART_Transmit>
	HAL_UART_Transmit(bluetoothInterface, &length, sizeof(size_t), HAL_TIMEOUT);
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <_sti_sendString_+0x88>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	4639      	mov	r1, r7
 80007dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e0:	2204      	movs	r2, #4
 80007e2:	f003 ffea 	bl	80047ba <HAL_UART_Transmit>
	HAL_UART_Transmit(bluetoothInterface, strbuffer, length, HAL_TIMEOUT);
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <_sti_sendString_+0x88>)
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f003 ffe1 	bl	80047ba <HAL_UART_Transmit>
	HAL_GPIO_WritePin(ORANGELED_GPIO_Port,ORANGELED_Pin,RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <_sti_sendString_+0x84>)
 8000800:	f001 fb94 	bl	8001f2c <HAL_GPIO_WritePin>
	/*STIResult ACK = sti_receiveACK();*/
	return R_SUCCESS;
 8000804:	f64b 63ef 	movw	r3, #48879	; 0xbeef
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000180 	.word	0x20000180
 8000814:	40020c00 	.word	0x40020c00
 8000818:	2000017c 	.word	0x2000017c

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09a      	sub	sp, #104	; 0x68
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000822:	f000 fc3d 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 f841 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f000 f977 	bl	8000b1c <MX_GPIO_Init>
  MX_TIM3_Init();
 800082e:	f000 f8a7 	bl	8000980 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000832:	f000 f8ff 	bl	8000a34 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000836:	f000 f951 	bl	8000adc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800083a:	f008 fd4d 	bl	80092d8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800083e:	f000 f923 	bl	8000a88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(REDLED_GPIO_Port, REDLED_Pin, SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000848:	4814      	ldr	r0, [pc, #80]	; (800089c <main+0x80>)
 800084a:	f001 fb6f 	bl	8001f2c <HAL_GPIO_WritePin>
  sti_Setup_UART(&huart2);
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <main+0x84>)
 8000850:	f7ff fe98 	bl	8000584 <sti_Setup_UART>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000854:	2100      	movs	r1, #0
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <main+0x88>)
 8000858:	f003 fae6 	bl	8003e28 <HAL_TIM_PWM_Start>
  char bffr[100];
  while (1)
  {
    /* USER CODE END WHILE */

    size_t a = sti_available();
 800085c:	f7ff ff8c 	bl	8000778 <sti_available>
 8000860:	6678      	str	r0, [r7, #100]	; 0x64
	sprintf(bffr,"Remaining : %d",a);
 8000862:	463b      	mov	r3, r7
 8000864:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000866:	4910      	ldr	r1, [pc, #64]	; (80008a8 <main+0x8c>)
 8000868:	4618      	mov	r0, r3
 800086a:	f009 fa5b 	bl	8009d24 <siprintf>
	_sti_sendString_(bffr, strlen(bffr));
 800086e:	463b      	mov	r3, r7
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcad 	bl	80001d0 <strlen>
 8000876:	4602      	mov	r2, r0
 8000878:	463b      	mov	r3, r7
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff87 	bl	8000790 <_sti_sendString_>
	memset(bffr,0,100);
 8000882:	463b      	mov	r3, r7
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f009 fa43 	bl	8009d14 <memset>
	sti_resolveCommand();
 800088e:	f7ff ff27 	bl	80006e0 <sti_resolveCommand>
	HAL_Delay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000896:	f000 fc75 	bl	8001184 <HAL_Delay>
  {
 800089a:	e7df      	b.n	800085c <main+0x40>
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	20004214 	.word	0x20004214
 80008a4:	20004188 	.word	0x20004188
 80008a8:	0800a618 	.word	0x0800a618

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f009 fa2a 	bl	8009d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <SystemClock_Config+0xcc>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a27      	ldr	r2, [pc, #156]	; (8000978 <SystemClock_Config+0xcc>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <SystemClock_Config+0xcc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <SystemClock_Config+0xd0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a21      	ldr	r2, [pc, #132]	; (800097c <SystemClock_Config+0xd0>)
 80008f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <SystemClock_Config+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800091c:	2308      	movs	r3, #8
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000920:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000924:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800092a:	2307      	movs	r3, #7
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	4618      	mov	r0, r3
 8000934:	f002 fd90 	bl	8003458 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800093e:	f000 f9b3 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2302      	movs	r3, #2
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800094e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2105      	movs	r1, #5
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fff1 	bl	8003948 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800096c:	f000 f99c 	bl	8000ca8 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3750      	adds	r7, #80	; 0x50
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009a4:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <MX_TIM3_Init+0xb0>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009aa:	2214      	movs	r2, #20
 80009ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009c8:	4818      	ldr	r0, [pc, #96]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009ca:	f003 f9dd 	bl	8003d88 <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f968 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4619      	mov	r1, r3
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009e8:	f003 fe1e 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009f2:	f000 f959 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	; 0x60
 80009f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <MX_TIM3_Init+0xac>)
 8000a0e:	f003 fad3 	bl	8003fb8 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a18:	f000 f946 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <MX_TIM3_Init+0xac>)
 8000a1e:	f000 f993 	bl	8000d48 <HAL_TIM_MspPostInit>

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20004188 	.word	0x20004188
 8000a30:	40000400 	.word	0x40000400

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART1_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f003 fe58 	bl	8004720 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f917 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200041d0 	.word	0x200041d0
 8000a84:	40011000 	.word	0x40011000

08000a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART2_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f003 fe2e 	bl	8004720 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 f8ed 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20004214 	.word	0x20004214
 8000ad8:	40004400 	.word	0x40004400

08000adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000aec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2010      	movs	r0, #16
 8000b04:	f000 fc3d 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b08:	2010      	movs	r0, #16
 8000b0a:	f000 fc56 	bl	80013ba <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b57      	ldr	r3, [pc, #348]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a56      	ldr	r2, [pc, #344]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b54      	ldr	r3, [pc, #336]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a4f      	ldr	r2, [pc, #316]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a48      	ldr	r2, [pc, #288]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b46      	ldr	r3, [pc, #280]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a41      	ldr	r2, [pc, #260]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <MX_GPIO_Init+0x178>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREENLED_Pin|ORANGELED_Pin|REDLED_Pin|BLUELED_Pin
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f24f 01fe 	movw	r1, #61694	; 0xf0fe
 8000bc4:	4834      	ldr	r0, [pc, #208]	; (8000c98 <MX_GPIO_Init+0x17c>)
 8000bc6:	f001 f9b1 	bl	8001f2c <HAL_GPIO_WritePin>
                          |M6_A_Pin|M6_B_Pin|M5_A_Pin|M5_B_Pin
                          |M4_A_Pin|M4_B_Pin|M3_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATE_GPIO_Port, STATE_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd0:	4832      	ldr	r0, [pc, #200]	; (8000c9c <MX_GPIO_Init+0x180>)
 8000bd2:	f001 f9ab 	bl	8001f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_B_Pin|M2_A_Pin|M2_B_Pin|M1_A_Pin
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	21f8      	movs	r1, #248	; 0xf8
 8000bda:	4831      	ldr	r0, [pc, #196]	; (8000ca0 <MX_GPIO_Init+0x184>)
 8000bdc:	f001 f9a6 	bl	8001f2c <HAL_GPIO_WritePin>
                          |M1_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000be0:	2308      	movs	r3, #8
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	482a      	ldr	r0, [pc, #168]	; (8000ca4 <MX_GPIO_Init+0x188>)
 8000bfc:	f000 fffa 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4821      	ldr	r0, [pc, #132]	; (8000c9c <MX_GPIO_Init+0x180>)
 8000c16:	f000 ffed 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <MX_GPIO_Init+0x184>)
 8000c2e:	f000 ffe1 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREENLED_Pin ORANGELED_Pin REDLED_Pin BLUELED_Pin
                           M6_A_Pin M6_B_Pin M5_A_Pin M5_B_Pin
                           M4_A_Pin M4_B_Pin M3_A_Pin */
  GPIO_InitStruct.Pin = GREENLED_Pin|ORANGELED_Pin|REDLED_Pin|BLUELED_Pin
 8000c32:	f24f 03fe 	movw	r3, #61694	; 0xf0fe
 8000c36:	617b      	str	r3, [r7, #20]
                          |M6_A_Pin|M6_B_Pin|M5_A_Pin|M5_B_Pin
                          |M4_A_Pin|M4_B_Pin|M3_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4813      	ldr	r0, [pc, #76]	; (8000c98 <MX_GPIO_Init+0x17c>)
 8000c4c:	f000 ffd2 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATE_Pin */
  GPIO_InitStruct.Pin = STATE_Pin;
 8000c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATE_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_GPIO_Init+0x180>)
 8000c6a:	f000 ffc3 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_B_Pin M2_A_Pin M2_B_Pin M1_A_Pin
                           M1_B_Pin */
  GPIO_InitStruct.Pin = M3_B_Pin|M2_A_Pin|M2_B_Pin|M1_A_Pin
 8000c6e:	23f8      	movs	r3, #248	; 0xf8
 8000c70:	617b      	str	r3, [r7, #20]
                          |M1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_GPIO_Init+0x184>)
 8000c86:	f000 ffb5 	bl	8001bf4 <HAL_GPIO_Init>

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020800 	.word	0x40020800

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cf2:	2007      	movs	r0, #7
 8000cf4:	f000 fb3a 	bl	800136c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10d      	bne.n	8000d32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_PWM_MspInit+0x40>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <HAL_TIM_PWM_MspInit+0x40>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_TIM_PWM_MspInit+0x40>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40000400 	.word	0x40000400
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <HAL_TIM_MspPostInit+0x68>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d11d      	bne.n	8000da6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_TIM_MspPostInit+0x6c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_TIM_MspPostInit+0x6c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_TIM_MspPostInit+0x6c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MAIN_PWM_Pin;
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MAIN_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_TIM_MspPostInit+0x70>)
 8000da2:	f000 ff27 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40000400 	.word	0x40000400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	; 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a4e      	ldr	r2, [pc, #312]	; (8000f14 <HAL_UART_MspInit+0x158>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12d      	bne.n	8000e3a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	4b4d      	ldr	r3, [pc, #308]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a4c      	ldr	r2, [pc, #304]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	483a      	ldr	r0, [pc, #232]	; (8000f1c <HAL_UART_MspInit+0x160>)
 8000e34:	f000 fede 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e38:	e067      	b.n	8000f0a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a38      	ldr	r2, [pc, #224]	; (8000f20 <HAL_UART_MspInit+0x164>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d162      	bne.n	8000f0a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a32      	ldr	r2, [pc, #200]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a2b      	ldr	r2, [pc, #172]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <HAL_UART_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4821      	ldr	r0, [pc, #132]	; (8000f1c <HAL_UART_MspInit+0x160>)
 8000e98:	f000 feac 	bl	8001bf4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000e9e:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <HAL_UART_MspInit+0x16c>)
 8000ea0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000ea4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ede:	4811      	ldr	r0, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000ee0:	f000 fa86 	bl	80013f0 <HAL_DMA_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0x132>
      Error_Handler();
 8000eea:	f7ff fedd 	bl	8000ca8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <HAL_UART_MspInit+0x168>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2026      	movs	r0, #38	; 0x26
 8000f00:	f000 fa3f 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f04:	2026      	movs	r0, #38	; 0x26
 8000f06:	f000 fa58 	bl	80013ba <HAL_NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40011000 	.word	0x40011000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40004400 	.word	0x40004400
 8000f24:	20004258 	.word	0x20004258
 8000f28:	40026088 	.word	0x40026088

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f78:	f000 f8e4 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Stream5_IRQHandler+0x10>)
 8000f86:	f000 fbcb 	bl	8001720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20004258 	.word	0x20004258

08000f94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <USART2_IRQHandler+0x10>)
 8000f9a:	f003 fcd1 	bl	8004940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20004214 	.word	0x20004214

08000fa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <OTG_FS_IRQHandler+0x10>)
 8000fae:	f001 f926 	bl	80021fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200057a0 	.word	0x200057a0

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f008 fe68 	bl	8009cc0 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20020000 	.word	0x20020000
 800101c:	00000400 	.word	0x00000400
 8001020:	200042b8 	.word	0x200042b8
 8001024:	20005ee0 	.word	0x20005ee0

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001084 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001052:	490e      	ldr	r1, [pc, #56]	; (800108c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001068:	4c0b      	ldr	r4, [pc, #44]	; (8001098 <LoopFillZerobss+0x26>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001076:	f7ff ffd7 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107a:	f008 fe27 	bl	8009ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fbcd 	bl	800081c <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001090:	0800a6d0 	.word	0x0800a6d0
  ldr r2, =_sbss
 8001094:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001098:	20005edc 	.word	0x20005edc

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_Init+0x40>)
 80010aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_Init+0x40>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x40>)
 80010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f94f 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fdee 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f967 	bl	80013d6 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f92f 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	200042bc 	.word	0x200042bc

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200042bc 	.word	0x200042bc

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff feb6 	bl	800116c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e099      	b.n	8001540 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142c:	e00f      	b.n	800144e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800142e:	f7ff fe9d 	bl	800116c <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b05      	cmp	r3, #5
 800143a:	d908      	bls.n	800144e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2220      	movs	r2, #32
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2203      	movs	r2, #3
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e078      	b.n	8001540 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e8      	bne.n	800142e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_DMA_Init+0x158>)
 8001468:	4013      	ands	r3, r2
 800146a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800147a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4313      	orrs	r3, r2
 800149e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d107      	bne.n	80014b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4313      	orrs	r3, r2
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f023 0307 	bic.w	r3, r3, #7
 80014ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d117      	bne.n	8001512 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00e      	beq.n	8001512 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fb01 	bl	8001afc <DMA_CheckFifoParam>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2240      	movs	r2, #64	; 0x40
 8001504:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800150e:	2301      	movs	r3, #1
 8001510:	e016      	b.n	8001540 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fab8 	bl	8001a90 <DMA_CalcBaseAndBitshift>
 8001520:	4603      	mov	r3, r0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	223f      	movs	r2, #63	; 0x3f
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	f010803f 	.word	0xf010803f

0800154c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_DMA_Start_IT+0x26>
 800156e:	2302      	movs	r3, #2
 8001570:	e040      	b.n	80015f4 <HAL_DMA_Start_IT+0xa8>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d12f      	bne.n	80015e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 fa4a 	bl	8001a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	223f      	movs	r2, #63	; 0x3f
 80015a6:	409a      	lsls	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0216 	orr.w	r2, r2, #22
 80015ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0208 	orr.w	r2, r2, #8
 80015d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e005      	b.n	80015f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ee:	2302      	movs	r3, #2
 80015f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800160a:	f7ff fdaf 	bl	800116c <HAL_GetTick>
 800160e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d008      	beq.n	800162e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e052      	b.n	80016d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0216 	bic.w	r2, r2, #22
 800163c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800164c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d103      	bne.n	800165e <HAL_DMA_Abort+0x62>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0208 	bic.w	r2, r2, #8
 800166c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167e:	e013      	b.n	80016a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001680:	f7ff fd74 	bl	800116c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b05      	cmp	r3, #5
 800168c:	d90c      	bls.n	80016a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2220      	movs	r2, #32
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2203      	movs	r2, #3
 8001698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e015      	b.n	80016d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1e4      	bne.n	8001680 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	223f      	movs	r2, #63	; 0x3f
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d004      	beq.n	80016fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00c      	b.n	8001714 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2205      	movs	r2, #5
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800172c:	4b8e      	ldr	r3, [pc, #568]	; (8001968 <HAL_DMA_IRQHandler+0x248>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a8e      	ldr	r2, [pc, #568]	; (800196c <HAL_DMA_IRQHandler+0x24c>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0a9b      	lsrs	r3, r3, #10
 8001738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	2208      	movs	r2, #8
 800174c:	409a      	lsls	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01a      	beq.n	800178c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0204 	bic.w	r2, r2, #4
 8001772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	2208      	movs	r2, #8
 800177a:	409a      	lsls	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	2201      	movs	r2, #1
 8001792:	409a      	lsls	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d012      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	2201      	movs	r2, #1
 80017b0:	409a      	lsls	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f043 0202 	orr.w	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	2204      	movs	r2, #4
 80017c8:	409a      	lsls	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d012      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00b      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	2204      	movs	r2, #4
 80017e6:	409a      	lsls	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f0:	f043 0204 	orr.w	r2, r3, #4
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	2210      	movs	r2, #16
 80017fe:	409a      	lsls	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d043      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d03c      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	2210      	movs	r2, #16
 800181c:	409a      	lsls	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d018      	beq.n	8001862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d108      	bne.n	8001850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	2b00      	cmp	r3, #0
 8001844:	d024      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
 800184e:	e01f      	b.n	8001890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01b      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
 8001860:	e016      	b.n	8001890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0208 	bic.w	r2, r2, #8
 800187e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	2220      	movs	r2, #32
 8001896:	409a      	lsls	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 808f 	beq.w	80019c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 8087 	beq.w	80019c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	2220      	movs	r2, #32
 80018b8:	409a      	lsls	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d136      	bne.n	8001938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0216 	bic.w	r2, r2, #22
 80018d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_DMA_IRQHandler+0x1da>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0208 	bic.w	r2, r2, #8
 8001908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	223f      	movs	r2, #63	; 0x3f
 8001910:	409a      	lsls	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	2b00      	cmp	r3, #0
 800192c:	d07e      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
        }
        return;
 8001936:	e079      	b.n	8001a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01d      	beq.n	8001982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10d      	bne.n	8001970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	2b00      	cmp	r3, #0
 800195a:	d031      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
 8001964:	e02c      	b.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000
 800196c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d023      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
 8001980:	e01e      	b.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10f      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0210 	bic.w	r2, r2, #16
 800199e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d032      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d022      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2205      	movs	r2, #5
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	3301      	adds	r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d307      	bcc.n	8001a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f2      	bne.n	80019ec <HAL_DMA_IRQHandler+0x2cc>
 8001a06:	e000      	b.n	8001a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
 8001a2a:	e000      	b.n	8001a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a2c:	bf00      	nop
    }
  }
}
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b40      	cmp	r3, #64	; 0x40
 8001a60:	d108      	bne.n	8001a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a72:	e007      	b.n	8001a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	60da      	str	r2, [r3, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3b10      	subs	r3, #16
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <DMA_CalcBaseAndBitshift+0x64>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aaa:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <DMA_CalcBaseAndBitshift+0x68>)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d909      	bls.n	8001ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	1d1a      	adds	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad0:	e007      	b.n	8001ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	aaaaaaab 	.word	0xaaaaaaab
 8001af8:	0800a684 	.word	0x0800a684

08001afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11f      	bne.n	8001b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d856      	bhi.n	8001bca <DMA_CheckFifoParam+0xce>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <DMA_CheckFifoParam+0x28>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b47 	.word	0x08001b47
 8001b2c:	08001b35 	.word	0x08001b35
 8001b30:	08001bcb 	.word	0x08001bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d046      	beq.n	8001bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b44:	e043      	b.n	8001bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b4e:	d140      	bne.n	8001bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b54:	e03d      	b.n	8001bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b5e:	d121      	bne.n	8001ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d837      	bhi.n	8001bd6 <DMA_CheckFifoParam+0xda>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <DMA_CheckFifoParam+0x70>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b83 	.word	0x08001b83
 8001b74:	08001b7d 	.word	0x08001b7d
 8001b78:	08001b95 	.word	0x08001b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b80:	e030      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d025      	beq.n	8001bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b92:	e022      	b.n	8001bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b9c:	d11f      	bne.n	8001bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ba2:	e01c      	b.n	8001bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d903      	bls.n	8001bb2 <DMA_CheckFifoParam+0xb6>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d003      	beq.n	8001bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bb0:	e018      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb6:	e015      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00e      	beq.n	8001be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc8:	e00b      	b.n	8001be2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bca:	bf00      	nop
 8001bcc:	e00a      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e008      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e006      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e004      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e002      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bde:	bf00      	nop
 8001be0:	e000      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001be2:	bf00      	nop
    }
  } 
  
  return status; 
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e16b      	b.n	8001ee8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 815a 	bne.w	8001ee2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d005      	beq.n	8001c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d130      	bne.n	8001ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d017      	beq.n	8001ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d123      	bne.n	8001d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80b4 	beq.w	8001ee2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b60      	ldr	r3, [pc, #384]	; (8001f00 <HAL_GPIO_Init+0x30c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a5f      	ldr	r2, [pc, #380]	; (8001f00 <HAL_GPIO_Init+0x30c>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <HAL_GPIO_Init+0x30c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d96:	4a5b      	ldr	r2, [pc, #364]	; (8001f04 <HAL_GPIO_Init+0x310>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d02b      	beq.n	8001e1a <HAL_GPIO_Init+0x226>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a51      	ldr	r2, [pc, #324]	; (8001f0c <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d025      	beq.n	8001e16 <HAL_GPIO_Init+0x222>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a50      	ldr	r2, [pc, #320]	; (8001f10 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01f      	beq.n	8001e12 <HAL_GPIO_Init+0x21e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d019      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4e      	ldr	r2, [pc, #312]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0x216>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4d      	ldr	r2, [pc, #308]	; (8001f1c <HAL_GPIO_Init+0x328>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00d      	beq.n	8001e06 <HAL_GPIO_Init+0x212>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_GPIO_Init+0x32c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d007      	beq.n	8001e02 <HAL_GPIO_Init+0x20e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <HAL_GPIO_Init+0x330>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_GPIO_Init+0x20a>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e00e      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001dfe:	2308      	movs	r3, #8
 8001e00:	e00c      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e02:	2306      	movs	r3, #6
 8001e04:	e00a      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e06:	2305      	movs	r3, #5
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	; (8001f04 <HAL_GPIO_Init+0x310>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5e:	4a32      	ldr	r2, [pc, #200]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e64:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e88:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001edc:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f ae90 	bls.w	8001c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f3c:	787b      	ldrb	r3, [r7, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f48:	e003      	b.n	8001f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4a:	887b      	ldrh	r3, [r7, #2]
 8001f4c:	041a      	lsls	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	619a      	str	r2, [r3, #24]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f60:	b08f      	sub	sp, #60	; 0x3c
 8001f62:	af0a      	add	r7, sp, #40	; 0x28
 8001f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e10f      	b.n	8002190 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f007 fb84 	bl	8009698 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2203      	movs	r2, #3
 8001f94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 fed7 	bl	8005d62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	687e      	ldr	r6, [r7, #4]
 8001fbc:	466d      	mov	r5, sp
 8001fbe:	f106 0410 	add.w	r4, r6, #16
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd2:	1d33      	adds	r3, r6, #4
 8001fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd6:	6838      	ldr	r0, [r7, #0]
 8001fd8:	f003 fdae 	bl	8005b38 <USB_CoreInit>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0d0      	b.n	8002190 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fec5 	bl	8005d84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	e04a      	b.n	8002096 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	333d      	adds	r3, #61	; 0x3d
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	333c      	adds	r3, #60	; 0x3c
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	b298      	uxth	r0, r3
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3344      	adds	r3, #68	; 0x44
 800203c:	4602      	mov	r2, r0
 800203e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	3340      	adds	r3, #64	; 0x40
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3348      	adds	r3, #72	; 0x48
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	334c      	adds	r3, #76	; 0x4c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3354      	adds	r3, #84	; 0x54
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	3301      	adds	r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	d3af      	bcc.n	8002000 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e044      	b.n	8002130 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	3301      	adds	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d3b5      	bcc.n	80020a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	687e      	ldr	r6, [r7, #4]
 8002142:	466d      	mov	r5, sp
 8002144:	f106 0410 	add.w	r4, r6, #16
 8002148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002150:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002154:	e885 0003 	stmia.w	r5, {r0, r1}
 8002158:	1d33      	adds	r3, r6, #4
 800215a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215c:	6838      	ldr	r0, [r7, #0]
 800215e:	f003 fe5d 	bl	8005e1c <USB_DevInit>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e00d      	b.n	8002190 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f004 ffac 	bl	80070e6 <USB_DevDisconnect>

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002198 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_PCD_Start+0x1c>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e020      	b.n	80021f6 <HAL_PCD_Start+0x5e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d109      	bne.n	80021d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d005      	beq.n	80021d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 fdaf 	bl	8005d40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 ff5c 	bl	80070a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021fe:	b590      	push	{r4, r7, lr}
 8002200:	b08d      	sub	sp, #52	; 0x34
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f005 f81a 	bl	800724e <USB_GetMode>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 848a 	bne.w	8002b36 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f004 ff7e 	bl	8007128 <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8480 	beq.w	8002b34 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f004 ff6b 	bl	8007128 <USB_ReadInterrupts>
 8002252:	4603      	mov	r3, r0
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b02      	cmp	r3, #2
 800225a:	d107      	bne.n	800226c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f002 0202 	and.w	r2, r2, #2
 800226a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f004 ff59 	bl	8007128 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b10      	cmp	r3, #16
 800227e:	d161      	bne.n	8002344 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0210 	bic.w	r2, r2, #16
 800228e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 020f 	and.w	r2, r3, #15
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	0c5b      	lsrs	r3, r3, #17
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d124      	bne.n	8002306 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d035      	beq.n	8002334 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	6a38      	ldr	r0, [r7, #32]
 80022dc:	f004 fd90 	bl	8006e00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ec:	441a      	add	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022fe:	441a      	add	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	621a      	str	r2, [r3, #32]
 8002304:	e016      	b.n	8002334 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	0c5b      	lsrs	r3, r3, #17
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	2b06      	cmp	r3, #6
 8002310:	d110      	bne.n	8002334 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002318:	2208      	movs	r2, #8
 800231a:	4619      	mov	r1, r3
 800231c:	6a38      	ldr	r0, [r7, #32]
 800231e:	f004 fd6f 	bl	8006e00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	6a1a      	ldr	r2, [r3, #32]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800232e:	441a      	add	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0210 	orr.w	r2, r2, #16
 8002342:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 feed 	bl	8007128 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002354:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002358:	f040 80a7 	bne.w	80024aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f004 fef2 	bl	800714e <USB_ReadDevAllOutEpInterrupt>
 800236a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800236c:	e099      	b.n	80024a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 808e 	beq.w	8002496 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f004 ff16 	bl	80071b6 <USB_ReadDevOutEPInterrupt>
 800238a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a2:	461a      	mov	r2, r3
 80023a4:	2301      	movs	r3, #1
 80023a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fec2 	bl	8003134 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c6:	461a      	mov	r2, r3
 80023c8:	2308      	movs	r3, #8
 80023ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 ff98 	bl	8003304 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	461a      	mov	r2, r3
 80023ec:	2310      	movs	r3, #16
 80023ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d030      	beq.n	800245c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	d109      	bne.n	800241a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002418:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	3304      	adds	r3, #4
 800242e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	78db      	ldrb	r3, [r3, #3]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d108      	bne.n	800244a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2200      	movs	r2, #0
 800243c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f007 fa2d 	bl	80098a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002456:	461a      	mov	r2, r3
 8002458:	2302      	movs	r3, #2
 800245a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002472:	461a      	mov	r2, r3
 8002474:	2320      	movs	r3, #32
 8002476:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248e:	461a      	mov	r2, r3
 8002490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002494:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f47f af62 	bne.w	800236e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fe3a 	bl	8007128 <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024be:	f040 80db 	bne.w	8002678 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fe5b 	bl	8007182 <USB_ReadDevAllInEpInterrupt>
 80024cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024d2:	e0cd      	b.n	8002670 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80c2 	beq.w	8002664 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 fe81 	bl	80071f2 <USB_ReadDevInEPInterrupt>
 80024f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d057      	beq.n	80025ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	2201      	movs	r2, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	69f9      	ldr	r1, [r7, #28]
 8002518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800251c:	4013      	ands	r3, r2
 800251e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252c:	461a      	mov	r2, r3
 800252e:	2301      	movs	r3, #1
 8002530:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d132      	bne.n	80025a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	334c      	adds	r3, #76	; 0x4c
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4403      	add	r3, r0
 800255a:	3348      	adds	r3, #72	; 0x48
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4419      	add	r1, r3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4403      	add	r3, r0
 800256e:	334c      	adds	r3, #76	; 0x4c
 8002570:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	2b00      	cmp	r3, #0
 8002576:	d113      	bne.n	80025a0 <HAL_PCD_IRQHandler+0x3a2>
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3354      	adds	r3, #84	; 0x54
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002598:	461a      	mov	r2, r3
 800259a:	2101      	movs	r1, #1
 800259c:	f004 fe88 	bl	80072b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f007 f8f7 	bl	800979a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c2:	461a      	mov	r2, r3
 80025c4:	2308      	movs	r3, #8
 80025c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025de:	461a      	mov	r2, r3
 80025e0:	2310      	movs	r3, #16
 80025e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025fa:	461a      	mov	r2, r3
 80025fc:	2340      	movs	r3, #64	; 0x40
 80025fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d023      	beq.n	8002652 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800260a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800260c:	6a38      	ldr	r0, [r7, #32]
 800260e:	f003 fd69 	bl	80060e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	3338      	adds	r3, #56	; 0x38
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	78db      	ldrb	r3, [r3, #3]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d108      	bne.n	8002640 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f007 f944 	bl	80098c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264c:	461a      	mov	r2, r3
 800264e:	2302      	movs	r3, #2
 8002650:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fcdb 	bl	800301a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	3301      	adds	r3, #1
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	2b00      	cmp	r3, #0
 8002674:	f47f af2e 	bne.w	80024d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f004 fd53 	bl	8007128 <USB_ReadInterrupts>
 8002682:	4603      	mov	r3, r0
 8002684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800268c:	d122      	bne.n	80026d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d108      	bne.n	80026be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026b4:	2100      	movs	r1, #0
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fec2 	bl	8003440 <HAL_PCDEx_LPM_Callback>
 80026bc:	e002      	b.n	80026c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f007 f8e2 	bl	8009888 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f004 fd25 	bl	8007128 <USB_ReadInterrupts>
 80026de:	4603      	mov	r3, r0
 80026e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e8:	d112      	bne.n	8002710 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f007 f89e 	bl	800983c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800270e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f004 fd07 	bl	8007128 <USB_ReadInterrupts>
 800271a:	4603      	mov	r3, r0
 800271c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002724:	f040 80b7 	bne.w	8002896 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2110      	movs	r1, #16
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fcce 	bl	80060e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274c:	e046      	b.n	80027dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275a:	461a      	mov	r2, r3
 800275c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002760:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002772:	0151      	lsls	r1, r2, #5
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	440a      	add	r2, r1
 8002778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800277c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002780:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278e:	461a      	mov	r2, r3
 8002790:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002794:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a6:	0151      	lsls	r1, r2, #5
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	440a      	add	r2, r1
 80027ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c6:	0151      	lsls	r1, r2, #5
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	440a      	add	r2, r1
 80027cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	3301      	adds	r3, #1
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3b3      	bcc.n	800274e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002812:	f043 030b 	orr.w	r3, r3, #11
 8002816:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002828:	f043 030b 	orr.w	r3, r3, #11
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	e015      	b.n	800285c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002842:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002846:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002856:	f043 030b 	orr.w	r3, r3, #11
 800285a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800286e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002880:	461a      	mov	r2, r3
 8002882:	f004 fd15 	bl	80072b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fc44 	bl	8007128 <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028aa:	d124      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 fcda 	bl	800726a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fc8f 	bl	80061de <USB_GetDevSpeed>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	f001 fa28 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 80028d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	4620      	mov	r0, r4
 80028dc:	f003 f98e 	bl	8005bfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f006 ff82 	bl	80097ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 fc14 	bl	8007128 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d10a      	bne.n	8002920 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f006 ff5f 	bl	80097ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f002 0208 	and.w	r2, r2, #8
 800291e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f004 fbff 	bl	8007128 <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d122      	bne.n	800297a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	e014      	b.n	8002970 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb27 	bl	8002fb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	429a      	cmp	r2, r3
 8002978:	d3e5      	bcc.n	8002946 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f004 fbd2 	bl	8007128 <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298e:	d13b      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002990:	2301      	movs	r3, #1
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	e02b      	b.n	80029ee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3340      	adds	r3, #64	; 0x40
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d115      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da12      	bge.n	80029e8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	333f      	adds	r3, #63	; 0x3f
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fae8 	bl	8002fb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	3301      	adds	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d3ce      	bcc.n	8002996 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fb8b 	bl	8007128 <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a1c:	d155      	bne.n	8002aca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	e045      	b.n	8002ab0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d12e      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da2b      	bge.n	8002aaa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d121      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa6:	6053      	str	r3, [r2, #4]
            break;
 8002aa8:	e007      	b.n	8002aba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	3301      	adds	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d3b4      	bcc.n	8002a24 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f004 fb2a 	bl	8007128 <USB_ReadInterrupts>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ade:	d10a      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f006 ff03 	bl	80098ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 fb14 	bl	8007128 <USB_ReadInterrupts>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d115      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f006 fef3 	bl	8009908 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e000      	b.n	8002b36 <HAL_PCD_IRQHandler+0x938>
      return;
 8002b34:	bf00      	nop
    }
  }
}
 8002b36:	3734      	adds	r7, #52	; 0x34
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}

08002b3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_PCD_SetAddress+0x1a>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e013      	b.n	8002b7e <HAL_PCD_SetAddress+0x42>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f004 fa72 	bl	8007058 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	4608      	mov	r0, r1
 8002b90:	4611      	mov	r1, r2
 8002b92:	461a      	mov	r2, r3
 8002b94:	4603      	mov	r3, r0
 8002b96:	70fb      	strb	r3, [r7, #3]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	803b      	strh	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da0f      	bge.n	8002bcc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 020f 	and.w	r2, r3, #15
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	3338      	adds	r3, #56	; 0x38
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	705a      	strb	r2, [r3, #1]
 8002bca:	e00f      	b.n	8002bec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bf8:	883a      	ldrh	r2, [r7, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	78ba      	ldrb	r2, [r7, #2]
 8002c02:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d004      	beq.n	8002c16 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c16:	78bb      	ldrb	r3, [r7, #2]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d102      	bne.n	8002c22 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_PCD_EP_Open+0xaa>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e00e      	b.n	8002c4e <HAL_PCD_EP_Open+0xc8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68f9      	ldr	r1, [r7, #12]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 faf2 	bl	8006228 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da0f      	bge.n	8002c8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3338      	adds	r3, #56	; 0x38
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	705a      	strb	r2, [r3, #1]
 8002c88:	e00f      	b.n	8002caa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_EP_Close+0x6e>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e00e      	b.n	8002ce2 <HAL_PCD_EP_Close+0x8c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fb30 	bl	8006338 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	3304      	adds	r3, #4
 8002d12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6979      	ldr	r1, [r7, #20]
 8002d5e:	f003 fe0f 	bl	8006980 <USB_EP0StartXfer>
 8002d62:	e008      	b.n	8002d76 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6979      	ldr	r1, [r7, #20]
 8002d72:	f003 fbbd 	bl	80064f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	7afb      	ldrb	r3, [r7, #11]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	3338      	adds	r3, #56	; 0x38
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2201      	movs	r2, #1
 8002dee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6979      	ldr	r1, [r7, #20]
 8002e22:	f003 fdad 	bl	8006980 <USB_EP0StartXfer>
 8002e26:	e008      	b.n	8002e3a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	6979      	ldr	r1, [r7, #20]
 8002e36:	f003 fb5b 	bl	80064f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d901      	bls.n	8002e62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e050      	b.n	8002f04 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	da0f      	bge.n	8002e8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	3338      	adds	r3, #56	; 0x38
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	705a      	strb	r2, [r3, #1]
 8002e88:	e00d      	b.n	8002ea6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_PCD_EP_SetStall+0x82>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e01e      	b.n	8002f04 <HAL_PCD_EP_SetStall+0xc0>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 ffeb 	bl	8006eb0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	b2d9      	uxtb	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f004 f9db 	bl	80072b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 020f 	and.w	r2, r3, #15
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d901      	bls.n	8002f2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e042      	b.n	8002fb0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	da0f      	bge.n	8002f52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 020f 	and.w	r2, r3, #15
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	3338      	adds	r3, #56	; 0x38
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	705a      	strb	r2, [r3, #1]
 8002f50:	e00f      	b.n	8002f72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 020f 	and.w	r2, r3, #15
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_PCD_EP_ClrStall+0x86>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e00e      	b.n	8002fb0 <HAL_PCD_EP_ClrStall+0xa4>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fff3 	bl	8006f8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	da0c      	bge.n	8002fe6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	3338      	adds	r3, #56	; 0x38
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e00c      	b.n	8003000 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 020f 	and.w	r2, r3, #15
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68f9      	ldr	r1, [r7, #12]
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fe12 	bl	8006c30 <USB_EPStopXfer>
 800300c:	4603      	mov	r3, r0
 800300e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003010:	7afb      	ldrb	r3, [r7, #11]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08a      	sub	sp, #40	; 0x28
 800301e:	af02      	add	r7, sp, #8
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	3338      	adds	r3, #56	; 0x38
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	3304      	adds	r3, #4
 8003040:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1a      	ldr	r2, [r3, #32]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	429a      	cmp	r2, r3
 800304c:	d901      	bls.n	8003052 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06c      	b.n	800312c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	429a      	cmp	r2, r3
 8003066:	d902      	bls.n	800306e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3303      	adds	r3, #3
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003076:	e02b      	b.n	80030d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	429a      	cmp	r2, r3
 800308c:	d902      	bls.n	8003094 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3303      	adds	r3, #3
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6919      	ldr	r1, [r3, #16]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4603      	mov	r3, r0
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f003 fe66 	bl	8006d84 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	441a      	add	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	441a      	add	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d809      	bhi.n	80030fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1a      	ldr	r2, [r3, #32]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d203      	bcs.n	80030fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1be      	bne.n	8003078 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	429a      	cmp	r2, r3
 8003104:	d811      	bhi.n	800312a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	43db      	mvns	r3, r3
 8003120:	6939      	ldr	r1, [r7, #16]
 8003122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003126:	4013      	ands	r3, r2
 8003128:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	333c      	adds	r3, #60	; 0x3c
 800314c:	3304      	adds	r3, #4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d17b      	bne.n	8003262 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4a61      	ldr	r2, [pc, #388]	; (80032fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	f240 80b9 	bls.w	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80b3 	beq.w	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003196:	461a      	mov	r2, r3
 8003198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319c:	6093      	str	r3, [r2, #8]
 800319e:	e0a7      	b.n	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b6:	461a      	mov	r2, r3
 80031b8:	2320      	movs	r3, #32
 80031ba:	6093      	str	r3, [r2, #8]
 80031bc:	e098      	b.n	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 8093 	bne.w	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d90f      	bls.n	80031f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e8:	461a      	mov	r2, r3
 80031ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ee:	6093      	str	r3, [r2, #8]
 80031f0:	e07e      	b.n	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	3304      	adds	r3, #4
 8003206:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	0159      	lsls	r1, r3, #5
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	440b      	add	r3, r1
 8003214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321e:	1ad2      	subs	r2, r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d114      	bne.n	8003254 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800323c:	461a      	mov	r2, r3
 800323e:	2101      	movs	r1, #1
 8003240:	f004 f836 	bl	80072b0 <USB_EP0_OutStart>
 8003244:	e006      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	441a      	add	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f006 fa82 	bl	8009764 <HAL_PCD_DataOutStageCallback>
 8003260:	e046      	b.n	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d124      	bne.n	80032b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	461a      	mov	r2, r3
 8003282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003286:	6093      	str	r3, [r2, #8]
 8003288:	e032      	b.n	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	2320      	movs	r3, #32
 80032a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f006 fa59 	bl	8009764 <HAL_PCD_DataOutStageCallback>
 80032b2:	e01d      	b.n	80032f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d114      	bne.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032dc:	461a      	mov	r2, r3
 80032de:	2100      	movs	r1, #0
 80032e0:	f003 ffe6 	bl	80072b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	4619      	mov	r1, r3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f006 fa3a 	bl	8009764 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	4f54300a 	.word	0x4f54300a
 8003300:	4f54310a 	.word	0x4f54310a

08003304 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	333c      	adds	r3, #60	; 0x3c
 800331c:	3304      	adds	r3, #4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a15      	ldr	r2, [pc, #84]	; (800338c <PCD_EP_OutSetupPacket_int+0x88>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d90e      	bls.n	8003358 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003350:	461a      	mov	r2, r3
 8003352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003356:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f006 f9f1 	bl	8009740 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4a0a      	ldr	r2, [pc, #40]	; (800338c <PCD_EP_OutSetupPacket_int+0x88>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d90c      	bls.n	8003380 <PCD_EP_OutSetupPacket_int+0x7c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d108      	bne.n	8003380 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003378:	461a      	mov	r2, r3
 800337a:	2101      	movs	r1, #1
 800337c:	f003 ff98 	bl	80072b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	4f54300a 	.word	0x4f54300a

08003390 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
 800339c:	4613      	mov	r3, r2
 800339e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d107      	bne.n	80033be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033ae:	883b      	ldrh	r3, [r7, #0]
 80033b0:	0419      	lsls	r1, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
 80033bc:	e028      	b.n	8003410 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4413      	add	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e00d      	b.n	80033ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	3340      	adds	r3, #64	; 0x40
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4413      	add	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	3301      	adds	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3ec      	bcc.n	80033d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033f8:	883b      	ldrh	r3, [r7, #0]
 80033fa:	0418      	lsls	r0, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	3b01      	subs	r3, #1
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	4302      	orrs	r2, r0
 8003408:	3340      	adds	r3, #64	; 0x40
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e267      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d075      	beq.n	8003562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003476:	4b88      	ldr	r3, [pc, #544]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b04      	cmp	r3, #4
 8003480:	d00c      	beq.n	800349c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003482:	4b85      	ldr	r3, [pc, #532]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800348a:	2b08      	cmp	r3, #8
 800348c:	d112      	bne.n	80034b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348e:	4b82      	ldr	r3, [pc, #520]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349a:	d10b      	bne.n	80034b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	4b7e      	ldr	r3, [pc, #504]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d05b      	beq.n	8003560 <HAL_RCC_OscConfig+0x108>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d157      	bne.n	8003560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e242      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d106      	bne.n	80034cc <HAL_RCC_OscConfig+0x74>
 80034be:	4b76      	ldr	r3, [pc, #472]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a75      	ldr	r2, [pc, #468]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e01d      	b.n	8003508 <HAL_RCC_OscConfig+0xb0>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x98>
 80034d6:	4b70      	ldr	r3, [pc, #448]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a6f      	ldr	r2, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a6c      	ldr	r2, [pc, #432]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0xb0>
 80034f0:	4b69      	ldr	r3, [pc, #420]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a68      	ldr	r2, [pc, #416]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b66      	ldr	r3, [pc, #408]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a65      	ldr	r2, [pc, #404]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd fe2c 	bl	800116c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003518:	f7fd fe28 	bl	800116c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e207      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b5b      	ldr	r3, [pc, #364]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0xc0>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fd fe18 	bl	800116c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003540:	f7fd fe14 	bl	800116c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e1f3      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003552:	4b51      	ldr	r3, [pc, #324]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0xe8>
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d063      	beq.n	8003636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356e:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357a:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003582:	2b08      	cmp	r3, #8
 8003584:	d11c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003586:	4b44      	ldr	r3, [pc, #272]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d116      	bne.n	80035c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_RCC_OscConfig+0x152>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e1c7      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035aa:	4b3b      	ldr	r3, [pc, #236]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4937      	ldr	r1, [pc, #220]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035be:	e03a      	b.n	8003636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c8:	4b34      	ldr	r3, [pc, #208]	; (800369c <HAL_RCC_OscConfig+0x244>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fd fdcd 	bl	800116c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fd fdc9 	bl	800116c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1a8      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4925      	ldr	r1, [pc, #148]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]
 8003608:	e015      	b.n	8003636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCC_OscConfig+0x244>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd fdac 	bl	800116c <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003618:	f7fd fda8 	bl	800116c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e187      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362a:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d036      	beq.n	80036b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_RCC_OscConfig+0x248>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fd fd8c 	bl	800116c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003658:	f7fd fd88 	bl	800116c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e167      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_OscConfig+0x240>)
 800366c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x200>
 8003676:	e01b      	b.n	80036b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_OscConfig+0x248>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367e:	f7fd fd75 	bl	800116c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003684:	e00e      	b.n	80036a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003686:	f7fd fd71 	bl	800116c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d907      	bls.n	80036a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e150      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
 8003698:	40023800 	.word	0x40023800
 800369c:	42470000 	.word	0x42470000
 80036a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	4b88      	ldr	r3, [pc, #544]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ea      	bne.n	8003686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8097 	beq.w	80037ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c2:	4b81      	ldr	r3, [pc, #516]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10f      	bne.n	80036ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	4b7d      	ldr	r3, [pc, #500]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a7c      	ldr	r2, [pc, #496]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80036d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b7a      	ldr	r3, [pc, #488]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b77      	ldr	r3, [pc, #476]	; (80038cc <HAL_RCC_OscConfig+0x474>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d118      	bne.n	800372c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fa:	4b74      	ldr	r3, [pc, #464]	; (80038cc <HAL_RCC_OscConfig+0x474>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a73      	ldr	r2, [pc, #460]	; (80038cc <HAL_RCC_OscConfig+0x474>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003706:	f7fd fd31 	bl	800116c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370e:	f7fd fd2d 	bl	800116c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e10c      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <HAL_RCC_OscConfig+0x474>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x2ea>
 8003734:	4b64      	ldr	r3, [pc, #400]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a63      	ldr	r2, [pc, #396]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	e01c      	b.n	800377c <HAL_RCC_OscConfig+0x324>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b05      	cmp	r3, #5
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x30c>
 800374a:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4a5e      	ldr	r2, [pc, #376]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
 8003756:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	4a5b      	ldr	r2, [pc, #364]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6713      	str	r3, [r2, #112]	; 0x70
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0x324>
 8003764:	4b58      	ldr	r3, [pc, #352]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a57      	ldr	r2, [pc, #348]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a54      	ldr	r2, [pc, #336]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 8003776:	f023 0304 	bic.w	r3, r3, #4
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd fcf2 	bl	800116c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fd fcee 	bl	800116c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0cb      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ee      	beq.n	800378c <HAL_RCC_OscConfig+0x334>
 80037ae:	e014      	b.n	80037da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b0:	f7fd fcdc 	bl	800116c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fd fcd8 	bl	800116c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0b5      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ce:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ee      	bne.n	80037b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4a38      	ldr	r2, [pc, #224]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80a1 	beq.w	8003938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f6:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d05c      	beq.n	80038bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d141      	bne.n	800388e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <HAL_RCC_OscConfig+0x478>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fd fcac 	bl	800116c <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003818:	f7fd fca8 	bl	800116c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e087      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	019b      	lsls	r3, r3, #6
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	3b01      	subs	r3, #1
 8003850:	041b      	lsls	r3, r3, #16
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	491b      	ldr	r1, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x478>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fd fc81 	bl	800116c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386e:	f7fd fc7d 	bl	800116c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e05c      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x416>
 800388c:	e054      	b.n	8003938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_RCC_OscConfig+0x478>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fd fc6a 	bl	800116c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd fc66 	bl	800116c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e045      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_RCC_OscConfig+0x470>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x444>
 80038ba:	e03d      	b.n	8003938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e038      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40007000 	.word	0x40007000
 80038d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x4ec>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d028      	beq.n	8003934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d121      	bne.n	8003934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d11a      	bne.n	8003934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003904:	4013      	ands	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390c:	4293      	cmp	r3, r2
 800390e:	d111      	bne.n	8003934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	3b01      	subs	r3, #1
 800391e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d107      	bne.n	8003934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800

08003948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0cc      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b68      	ldr	r3, [pc, #416]	; (8003b00 <HAL_RCC_ClockConfig+0x1b8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d90c      	bls.n	8003984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b63      	ldr	r3, [pc, #396]	; (8003b00 <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0b8      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800399c:	4b59      	ldr	r3, [pc, #356]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a58      	ldr	r2, [pc, #352]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b4:	4b53      	ldr	r3, [pc, #332]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a52      	ldr	r2, [pc, #328]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c0:	4b50      	ldr	r3, [pc, #320]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	494d      	ldr	r1, [pc, #308]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d044      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d119      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e07f      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d003      	beq.n	8003a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a06:	4b3f      	ldr	r3, [pc, #252]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e06f      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a16:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e067      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a26:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 0203 	bic.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4934      	ldr	r1, [pc, #208]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a38:	f7fd fb98 	bl	800116c <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a40:	f7fd fb94 	bl	800116c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e04f      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 020c 	and.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1eb      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a68:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d20c      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b22      	ldr	r3, [pc, #136]	; (8003b00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e032      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9c:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4916      	ldr	r1, [pc, #88]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	490e      	ldr	r1, [pc, #56]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ace:	f000 f821 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	490a      	ldr	r1, [pc, #40]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_ClockConfig+0x1c8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd faf8 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40023c00 	.word	0x40023c00
 8003b04:	40023800 	.word	0x40023800
 8003b08:	0800a66c 	.word	0x0800a66c
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	20000004 	.word	0x20000004

08003b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b18:	b094      	sub	sp, #80	; 0x50
 8003b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	2300      	movs	r3, #0
 8003b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b24:	2300      	movs	r3, #0
 8003b26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b2c:	4b79      	ldr	r3, [pc, #484]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d00d      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0x40>
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	f200 80e1 	bhi.w	8003d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x34>
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b46:	e0db      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b73      	ldr	r3, [pc, #460]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b4c:	e0db      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b4e:	4b73      	ldr	r3, [pc, #460]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b52:	e0d8      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b54:	4b6f      	ldr	r3, [pc, #444]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b5e:	4b6d      	ldr	r3, [pc, #436]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d063      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	2200      	movs	r2, #0
 8003b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
 8003b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b86:	4622      	mov	r2, r4
 8003b88:	462b      	mov	r3, r5
 8003b8a:	f04f 0000 	mov.w	r0, #0
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	0159      	lsls	r1, r3, #5
 8003b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b98:	0150      	lsls	r0, r2, #5
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	1a51      	subs	r1, r2, r1
 8003ba2:	6139      	str	r1, [r7, #16]
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	018b      	lsls	r3, r1, #6
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	018a      	lsls	r2, r1, #6
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bcc:	4659      	mov	r1, fp
 8003bce:	eb63 0901 	sbc.w	r9, r3, r1
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be6:	4690      	mov	r8, r2
 8003be8:	4699      	mov	r9, r3
 8003bea:	4623      	mov	r3, r4
 8003bec:	eb18 0303 	adds.w	r3, r8, r3
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	eb49 0303 	adc.w	r3, r9, r3
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c06:	4629      	mov	r1, r5
 8003c08:	024b      	lsls	r3, r1, #9
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c10:	4621      	mov	r1, r4
 8003c12:	024a      	lsls	r2, r1, #9
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c24:	f7fc fb2c 	bl	8000280 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	e058      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c32:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
 8003c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	464b      	mov	r3, r9
 8003c50:	f04f 0000 	mov.w	r0, #0
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	0159      	lsls	r1, r3, #5
 8003c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c5e:	0150      	lsls	r0, r2, #5
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4641      	mov	r1, r8
 8003c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c84:	ebb2 040a 	subs.w	r4, r2, sl
 8003c88:	eb63 050b 	sbc.w	r5, r3, fp
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	00eb      	lsls	r3, r5, #3
 8003c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c9a:	00e2      	lsls	r2, r4, #3
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	18e3      	adds	r3, r4, r3
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	eb45 0303 	adc.w	r3, r5, r3
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	028b      	lsls	r3, r1, #10
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	028a      	lsls	r2, r1, #10
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	61fa      	str	r2, [r7, #28]
 8003cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd8:	f7fc fad2 	bl	8000280 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cfe:	e002      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3750      	adds	r7, #80	; 0x50
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	007a1200 	.word	0x007a1200

08003d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0a9b      	lsrs	r3, r3, #10
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	0800a67c 	.word	0x0800a67c

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d64:	f7ff ffdc 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0b5b      	lsrs	r3, r3, #13
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	0800a67c 	.word	0x0800a67c

08003d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e041      	b.n	8003e1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fc ffa8 	bl	8000d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 f9b8 	bl	800413c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_TIM_PWM_Start+0x24>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e022      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d109      	bne.n	8003e66 <HAL_TIM_PWM_Start+0x3e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	bf14      	ite	ne
 8003e5e:	2301      	movne	r3, #1
 8003e60:	2300      	moveq	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	e015      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d109      	bne.n	8003e80 <HAL_TIM_PWM_Start+0x58>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	e008      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e07c      	b.n	8003f94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x82>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea8:	e013      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start+0x92>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb8:	e00b      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec8:	e003      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fb7e 	bl	80045dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	; (8003f9c <HAL_TIM_PWM_Start+0x174>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIM_PWM_Start+0xcc>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <HAL_TIM_PWM_Start+0x178>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_PWM_Start+0xd0>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_TIM_PWM_Start+0xd2>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a22      	ldr	r2, [pc, #136]	; (8003f9c <HAL_TIM_PWM_Start+0x174>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d022      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d01d      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <HAL_TIM_PWM_Start+0x17c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d018      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <HAL_TIM_PWM_Start+0x180>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <HAL_TIM_PWM_Start+0x184>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <HAL_TIM_PWM_Start+0x178>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <HAL_TIM_PWM_Start+0x188>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <HAL_TIM_PWM_Start+0x18c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d111      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d010      	beq.n	8003f92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	e007      	b.n	8003f92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40010400 	.word	0x40010400
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40001800 	.word	0x40001800

08003fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0ae      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	f200 809f 	bhi.w	8004124 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08004021 	.word	0x08004021
 8003ff0:	08004125 	.word	0x08004125
 8003ff4:	08004125 	.word	0x08004125
 8003ff8:	08004125 	.word	0x08004125
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004125 	.word	0x08004125
 8004004:	08004125 	.word	0x08004125
 8004008:	08004125 	.word	0x08004125
 800400c:	080040a3 	.word	0x080040a3
 8004010:	08004125 	.word	0x08004125
 8004014:	08004125 	.word	0x08004125
 8004018:	08004125 	.word	0x08004125
 800401c:	080040e3 	.word	0x080040e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f928 	bl	800427c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0208 	orr.w	r2, r2, #8
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0204 	bic.w	r2, r2, #4
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	619a      	str	r2, [r3, #24]
      break;
 800405e:	e064      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f978 	bl	800435c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	619a      	str	r2, [r3, #24]
      break;
 80040a0:	e043      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f9cd 	bl	8004448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0208 	orr.w	r2, r2, #8
 80040bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0204 	bic.w	r2, r2, #4
 80040cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	61da      	str	r2, [r3, #28]
      break;
 80040e0:	e023      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fa21 	bl	8004530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	61da      	str	r2, [r3, #28]
      break;
 8004122:	e002      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a40      	ldr	r2, [pc, #256]	; (8004250 <TIM_Base_SetConfig+0x114>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d013      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415a:	d00f      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3d      	ldr	r2, [pc, #244]	; (8004254 <TIM_Base_SetConfig+0x118>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00b      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <TIM_Base_SetConfig+0x11c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3b      	ldr	r2, [pc, #236]	; (800425c <TIM_Base_SetConfig+0x120>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3a      	ldr	r2, [pc, #232]	; (8004260 <TIM_Base_SetConfig+0x124>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d108      	bne.n	800418e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2f      	ldr	r2, [pc, #188]	; (8004250 <TIM_Base_SetConfig+0x114>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02b      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419c:	d027      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2c      	ldr	r2, [pc, #176]	; (8004254 <TIM_Base_SetConfig+0x118>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d023      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2b      	ldr	r2, [pc, #172]	; (8004258 <TIM_Base_SetConfig+0x11c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2a      	ldr	r2, [pc, #168]	; (800425c <TIM_Base_SetConfig+0x120>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01b      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a29      	ldr	r2, [pc, #164]	; (8004260 <TIM_Base_SetConfig+0x124>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d017      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a28      	ldr	r2, [pc, #160]	; (8004264 <TIM_Base_SetConfig+0x128>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a27      	ldr	r2, [pc, #156]	; (8004268 <TIM_Base_SetConfig+0x12c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00f      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a26      	ldr	r2, [pc, #152]	; (800426c <TIM_Base_SetConfig+0x130>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00b      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a25      	ldr	r2, [pc, #148]	; (8004270 <TIM_Base_SetConfig+0x134>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a24      	ldr	r2, [pc, #144]	; (8004274 <TIM_Base_SetConfig+0x138>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a23      	ldr	r2, [pc, #140]	; (8004278 <TIM_Base_SetConfig+0x13c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d108      	bne.n	8004200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <TIM_Base_SetConfig+0x114>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_Base_SetConfig+0xf8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <TIM_Base_SetConfig+0x124>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d103      	bne.n	800423c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	615a      	str	r2, [r3, #20]
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40010000 	.word	0x40010000
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	40010400 	.word	0x40010400
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800
 8004270:	40001800 	.word	0x40001800
 8004274:	40001c00 	.word	0x40001c00
 8004278:	40002000 	.word	0x40002000

0800427c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0302 	bic.w	r3, r3, #2
 80042c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a20      	ldr	r2, [pc, #128]	; (8004354 <TIM_OC1_SetConfig+0xd8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC1_SetConfig+0x64>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <TIM_OC1_SetConfig+0xdc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10c      	bne.n	80042fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0308 	bic.w	r3, r3, #8
 80042e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <TIM_OC1_SetConfig+0xd8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC1_SetConfig+0x8e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <TIM_OC1_SetConfig+0xdc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d111      	bne.n	800432e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	621a      	str	r2, [r3, #32]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40010000 	.word	0x40010000
 8004358:	40010400 	.word	0x40010400

0800435c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f023 0210 	bic.w	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0320 	bic.w	r3, r3, #32
 80043a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a22      	ldr	r2, [pc, #136]	; (8004440 <TIM_OC2_SetConfig+0xe4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_OC2_SetConfig+0x68>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a21      	ldr	r2, [pc, #132]	; (8004444 <TIM_OC2_SetConfig+0xe8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10d      	bne.n	80043e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <TIM_OC2_SetConfig+0xe4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_OC2_SetConfig+0x94>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a16      	ldr	r2, [pc, #88]	; (8004444 <TIM_OC2_SetConfig+0xe8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d113      	bne.n	8004418 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40010400 	.word	0x40010400

08004448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a21      	ldr	r2, [pc, #132]	; (8004528 <TIM_OC3_SetConfig+0xe0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_OC3_SetConfig+0x66>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a20      	ldr	r2, [pc, #128]	; (800452c <TIM_OC3_SetConfig+0xe4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10d      	bne.n	80044ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <TIM_OC3_SetConfig+0xe0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_OC3_SetConfig+0x92>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a15      	ldr	r2, [pc, #84]	; (800452c <TIM_OC3_SetConfig+0xe4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d113      	bne.n	8004502 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40010000 	.word	0x40010000
 800452c:	40010400 	.word	0x40010400

08004530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800457a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	031b      	lsls	r3, r3, #12
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <TIM_OC4_SetConfig+0xa4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_OC4_SetConfig+0x68>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <TIM_OC4_SetConfig+0xa8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d109      	bne.n	80045ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40010400 	.word	0x40010400

080045dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2201      	movs	r2, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	401a      	ands	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800463c:	2302      	movs	r3, #2
 800463e:	e05a      	b.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a21      	ldr	r2, [pc, #132]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468c:	d01d      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1b      	ldr	r2, [pc, #108]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1a      	ldr	r2, [pc, #104]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a17      	ldr	r2, [pc, #92]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10c      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40010400 	.word	0x40010400
 8004718:	40014000 	.word	0x40014000
 800471c:	40001800 	.word	0x40001800

08004720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e03f      	b.n	80047b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc fb38 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	; 0x24
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 ff73 	bl	8005650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b08a      	sub	sp, #40	; 0x28
 80047be:	af02      	add	r7, sp, #8
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d17c      	bne.n	80048d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_UART_Transmit+0x2c>
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e075      	b.n	80048d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_UART_Transmit+0x3e>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e06e      	b.n	80048d6 <HAL_UART_Transmit+0x11c>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2221      	movs	r2, #33	; 0x21
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800480e:	f7fc fcad 	bl	800116c <HAL_GetTick>
 8004812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	88fa      	ldrh	r2, [r7, #6]
 8004818:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	88fa      	ldrh	r2, [r7, #6]
 800481e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004828:	d108      	bne.n	800483c <HAL_UART_Transmit+0x82>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d104      	bne.n	800483c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	e003      	b.n	8004844 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800484c:	e02a      	b.n	80048a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2200      	movs	r2, #0
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fc2b 	bl	80050b4 <UART_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e036      	b.n	80048d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10b      	bne.n	8004886 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800487c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	3302      	adds	r3, #2
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	e007      	b.n	8004896 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	3301      	adds	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1cf      	bne.n	800484e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2140      	movs	r1, #64	; 0x40
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fbfb 	bl	80050b4 <UART_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e006      	b.n	80048d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
  }
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d11d      	bne.n	8004934 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_UART_Receive_DMA+0x26>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e016      	b.n	8004936 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_UART_Receive_DMA+0x38>
 8004912:	2302      	movs	r3, #2
 8004914:	e00f      	b.n	8004936 <HAL_UART_Receive_DMA+0x58>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	461a      	mov	r2, r3
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fc30 	bl	8005190 <UART_Start_Receive_DMA>
 8004930:	4603      	mov	r3, r0
 8004932:	e000      	b.n	8004936 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b0ba      	sub	sp, #232	; 0xe8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800497e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10f      	bne.n	80049a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_UART_IRQHandler+0x66>
 8004992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fd9b 	bl	80054da <UART_Receive_IT>
      return;
 80049a4:	e256      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80de 	beq.w	8004b6c <HAL_UART_IRQHandler+0x22c>
 80049b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80d1 	beq.w	8004b6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_UART_IRQHandler+0xae>
 80049d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f043 0201 	orr.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <HAL_UART_IRQHandler+0xd2>
 80049fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f043 0202 	orr.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_UART_IRQHandler+0xf6>
 8004a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f043 0204 	orr.w	r2, r3, #4
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d011      	beq.n	8004a66 <HAL_UART_IRQHandler+0x126>
 8004a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f043 0208 	orr.w	r2, r3, #8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 81ed 	beq.w	8004e4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x14e>
 8004a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fd26 	bl	80054da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <HAL_UART_IRQHandler+0x17a>
 8004ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d04f      	beq.n	8004b5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fc2e 	bl	800531c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d141      	bne.n	8004b52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004afa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1d9      	bne.n	8004ace <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d013      	beq.n	8004b4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	4a7d      	ldr	r2, [pc, #500]	; (8004d1c <HAL_UART_IRQHandler+0x3dc>)
 8004b28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fc fdd4 	bl	80016dc <HAL_DMA_Abort_IT>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b44:	4610      	mov	r0, r2
 8004b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b48:	e00e      	b.n	8004b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f9a4 	bl	8004e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	e00a      	b.n	8004b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f9a0 	bl	8004e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	e006      	b.n	8004b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f99c 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b66:	e170      	b.n	8004e4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	bf00      	nop
    return;
 8004b6a:	e16e      	b.n	8004e4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	f040 814a 	bne.w	8004e0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8143 	beq.w	8004e0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 813c 	beq.w	8004e0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	f040 80b4 	bne.w	8004d20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8140 	beq.w	8004e4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	f080 8139 	bcs.w	8004e4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004be2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bee:	f000 8088 	beq.w	8004d02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1d9      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e1      	bne.n	8004c3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3314      	adds	r3, #20
 8004c80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e3      	bne.n	8004c7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd2:	f023 0310 	bic.w	r3, r3, #16
 8004cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ce4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ce6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e3      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fc fc7d 	bl	80015fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8ca 	bl	8004eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d18:	e099      	b.n	8004e4e <HAL_UART_IRQHandler+0x50e>
 8004d1a:	bf00      	nop
 8004d1c:	080053e3 	.word	0x080053e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 808b 	beq.w	8004e52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8086 	beq.w	8004e52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d6a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e3      	bne.n	8004d46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3314      	adds	r3, #20
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004da2:	633a      	str	r2, [r7, #48]	; 0x30
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e3      	bne.n	8004d7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004de8:	61fa      	str	r2, [r7, #28]
 8004dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	617b      	str	r3, [r7, #20]
   return(result);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e3      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f852 	bl	8004eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e08:	e023      	b.n	8004e52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <HAL_UART_IRQHandler+0x4ea>
 8004e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 faf1 	bl	800540a <UART_Transmit_IT>
    return;
 8004e28:	e014      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00e      	beq.n	8004e54 <HAL_UART_IRQHandler+0x514>
 8004e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fb31 	bl	80054aa <UART_EndTransmit_IT>
    return;
 8004e48:	e004      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
    return;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
      return;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
      return;
 8004e52:	bf00      	nop
  }
}
 8004e54:	37e8      	adds	r7, #232	; 0xe8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop

08004e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b09c      	sub	sp, #112	; 0x70
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d172      	bne.n	8004fc6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f06:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e5      	bne.n	8004ee6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3314      	adds	r3, #20
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	667b      	str	r3, [r7, #100]	; 0x64
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f3a:	647a      	str	r2, [r7, #68]	; 0x44
 8004f3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e5      	bne.n	8004f1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3314      	adds	r3, #20
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f64:	663b      	str	r3, [r7, #96]	; 0x60
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3314      	adds	r3, #20
 8004f6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e5      	bne.n	8004f4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d119      	bne.n	8004fc6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f023 0310 	bic.w	r3, r3, #16
 8004fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fb2:	61fa      	str	r2, [r7, #28]
 8004fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	69b9      	ldr	r1, [r7, #24]
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e5      	bne.n	8004f92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d106      	bne.n	8004fdc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fd6:	f7ff ff69 	bl	8004eac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fda:	e002      	b.n	8004fe2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004fdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fde:	f7ff ff47 	bl	8004e70 <HAL_UART_RxCpltCallback>
}
 8004fe2:	bf00      	nop
 8004fe4:	3770      	adds	r7, #112	; 0x70
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d108      	bne.n	8005012 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	b29b      	uxth	r3, r3
 8005008:	4619      	mov	r1, r3
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff4e 	bl	8004eac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005010:	e002      	b.n	8005018 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff ff36 	bl	8004e84 <HAL_UART_RxHalfCpltCallback>
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b80      	cmp	r3, #128	; 0x80
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b21      	cmp	r3, #33	; 0x21
 8005052:	d108      	bne.n	8005066 <UART_DMAError+0x46>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2200      	movs	r2, #0
 800505e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005060:	68b8      	ldr	r0, [r7, #8]
 8005062:	f000 f933 	bl	80052cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b22      	cmp	r3, #34	; 0x22
 8005086:	d108      	bne.n	800509a <UART_DMAError+0x7a>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2200      	movs	r2, #0
 8005092:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005094:	68b8      	ldr	r0, [r7, #8]
 8005096:	f000 f941 	bl	800531c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f043 0210 	orr.w	r2, r3, #16
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050a6:	68b8      	ldr	r0, [r7, #8]
 80050a8:	f7ff fef6 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b090      	sub	sp, #64	; 0x40
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c4:	e050      	b.n	8005168 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d04c      	beq.n	8005168 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050d4:	f7fc f84a 	bl	800116c <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d241      	bcs.n	8005168 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005104:	637a      	str	r2, [r7, #52]	; 0x34
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	613b      	str	r3, [r7, #16]
   return(result);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005138:	623a      	str	r2, [r7, #32]
 800513a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	69f9      	ldr	r1, [r7, #28]
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	61bb      	str	r3, [r7, #24]
   return(result);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e00f      	b.n	8005188 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	d09f      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3740      	adds	r7, #64	; 0x40
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b098      	sub	sp, #96	; 0x60
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2222      	movs	r2, #34	; 0x22
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	4a40      	ldr	r2, [pc, #256]	; (80052c0 <UART_Start_Receive_DMA+0x130>)
 80051be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	4a3f      	ldr	r2, [pc, #252]	; (80052c4 <UART_Start_Receive_DMA+0x134>)
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	4a3e      	ldr	r2, [pc, #248]	; (80052c8 <UART_Start_Receive_DMA+0x138>)
 80051ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	2200      	movs	r2, #0
 80051d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80051d8:	f107 0308 	add.w	r3, r7, #8
 80051dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	f7fc f9ac 	bl	800154c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d019      	beq.n	800524e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	65bb      	str	r3, [r7, #88]	; 0x58
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800523a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800523c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e5      	bne.n	800521a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	657b      	str	r3, [r7, #84]	; 0x54
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800526e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e5      	bne.n	800524e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3314      	adds	r3, #20
 8005288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	617b      	str	r3, [r7, #20]
   return(result);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005298:	653b      	str	r3, [r7, #80]	; 0x50
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3314      	adds	r3, #20
 80052a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052a2:	627a      	str	r2, [r7, #36]	; 0x24
 80052a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6a39      	ldr	r1, [r7, #32]
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e5      	bne.n	8005282 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3760      	adds	r7, #96	; 0x60
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08004ec5 	.word	0x08004ec5
 80052c4:	08004feb 	.word	0x08004feb
 80052c8:	08005021 	.word	0x08005021

080052cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b089      	sub	sp, #36	; 0x24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	61ba      	str	r2, [r7, #24]
 80052f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6979      	ldr	r1, [r7, #20]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	613b      	str	r3, [r7, #16]
   return(result);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e5      	bne.n	80052d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005310:	bf00      	nop
 8005312:	3724      	adds	r7, #36	; 0x24
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b095      	sub	sp, #84	; 0x54
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005344:	643a      	str	r2, [r7, #64]	; 0x40
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800534a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e5      	bne.n	8005324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3314      	adds	r3, #20
 800535e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	61fb      	str	r3, [r7, #28]
   return(result);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3314      	adds	r3, #20
 8005376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e5      	bne.n	8005358 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	2b01      	cmp	r3, #1
 8005392:	d119      	bne.n	80053c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f023 0310 	bic.w	r3, r3, #16
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b4:	61ba      	str	r2, [r7, #24]
 80053b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6979      	ldr	r1, [r7, #20]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	613b      	str	r3, [r7, #16]
   return(result);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053d6:	bf00      	nop
 80053d8:	3754      	adds	r7, #84	; 0x54
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fd4b 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b21      	cmp	r3, #33	; 0x21
 800541c:	d13e      	bne.n	800549c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d114      	bne.n	8005452 <UART_Transmit_IT+0x48>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d110      	bne.n	8005452 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005444:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	1c9a      	adds	r2, r3, #2
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	621a      	str	r2, [r3, #32]
 8005450:	e008      	b.n	8005464 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	1c59      	adds	r1, r3, #1
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6211      	str	r1, [r2, #32]
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29b      	uxth	r3, r3
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4619      	mov	r1, r3
 8005472:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10f      	bne.n	8005498 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005486:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005496:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	e000      	b.n	800549e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800549c:	2302      	movs	r3, #2
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fcc6 	bl	8004e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08c      	sub	sp, #48	; 0x30
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b22      	cmp	r3, #34	; 0x22
 80054ec:	f040 80ab 	bne.w	8005646 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f8:	d117      	bne.n	800552a <UART_Receive_IT+0x50>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d113      	bne.n	800552a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	b29a      	uxth	r2, r3
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	1c9a      	adds	r2, r3, #2
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
 8005528:	e026      	b.n	8005578 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553c:	d007      	beq.n	800554e <UART_Receive_IT+0x74>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <UART_Receive_IT+0x82>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	e008      	b.n	800556e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005568:	b2da      	uxtb	r2, r3
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29b      	uxth	r3, r3
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4619      	mov	r1, r3
 8005586:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005588:	2b00      	cmp	r3, #0
 800558a:	d15a      	bne.n	8005642 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0220 	bic.w	r2, r2, #32
 800559a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d135      	bne.n	8005638 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	613b      	str	r3, [r7, #16]
   return(result);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f023 0310 	bic.w	r3, r3, #16
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f2:	623a      	str	r2, [r7, #32]
 80055f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	69f9      	ldr	r1, [r7, #28]
 80055f8:	6a3a      	ldr	r2, [r7, #32]
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e5      	bne.n	80055d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b10      	cmp	r3, #16
 8005612:	d10a      	bne.n	800562a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fc3b 	bl	8004eac <HAL_UARTEx_RxEventCallback>
 8005636:	e002      	b.n	800563e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fc19 	bl	8004e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e002      	b.n	8005648 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005646:	2302      	movs	r3, #2
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3730      	adds	r7, #48	; 0x30
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005654:	b0c0      	sub	sp, #256	; 0x100
 8005656:	af00      	add	r7, sp, #0
 8005658:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	68d9      	ldr	r1, [r3, #12]
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	ea40 0301 	orr.w	r3, r0, r1
 8005678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	431a      	orrs	r2, r3
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	431a      	orrs	r2, r3
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056a8:	f021 010c 	bic.w	r1, r1, #12
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b6:	430b      	orrs	r3, r1
 80056b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	6999      	ldr	r1, [r3, #24]
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	ea40 0301 	orr.w	r3, r0, r1
 80056d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b8f      	ldr	r3, [pc, #572]	; (800591c <UART_SetConfig+0x2cc>)
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d005      	beq.n	80056f0 <UART_SetConfig+0xa0>
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b8d      	ldr	r3, [pc, #564]	; (8005920 <UART_SetConfig+0x2d0>)
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d104      	bne.n	80056fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fe fb36 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 80056f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056f8:	e003      	b.n	8005702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056fa:	f7fe fb1d 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 80056fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	f040 810c 	bne.w	8005928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005714:	2200      	movs	r2, #0
 8005716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800571a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800571e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005722:	4622      	mov	r2, r4
 8005724:	462b      	mov	r3, r5
 8005726:	1891      	adds	r1, r2, r2
 8005728:	65b9      	str	r1, [r7, #88]	; 0x58
 800572a:	415b      	adcs	r3, r3
 800572c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800572e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005732:	4621      	mov	r1, r4
 8005734:	eb12 0801 	adds.w	r8, r2, r1
 8005738:	4629      	mov	r1, r5
 800573a:	eb43 0901 	adc.w	r9, r3, r1
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800574a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005752:	4690      	mov	r8, r2
 8005754:	4699      	mov	r9, r3
 8005756:	4623      	mov	r3, r4
 8005758:	eb18 0303 	adds.w	r3, r8, r3
 800575c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005760:	462b      	mov	r3, r5
 8005762:	eb49 0303 	adc.w	r3, r9, r3
 8005766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005776:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800577a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800577e:	460b      	mov	r3, r1
 8005780:	18db      	adds	r3, r3, r3
 8005782:	653b      	str	r3, [r7, #80]	; 0x50
 8005784:	4613      	mov	r3, r2
 8005786:	eb42 0303 	adc.w	r3, r2, r3
 800578a:	657b      	str	r3, [r7, #84]	; 0x54
 800578c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005794:	f7fa fd74 	bl	8000280 <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4b61      	ldr	r3, [pc, #388]	; (8005924 <UART_SetConfig+0x2d4>)
 800579e:	fba3 2302 	umull	r2, r3, r3, r2
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	011c      	lsls	r4, r3, #4
 80057a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	64b9      	str	r1, [r7, #72]	; 0x48
 80057c0:	415b      	adcs	r3, r3
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057c8:	4641      	mov	r1, r8
 80057ca:	eb12 0a01 	adds.w	sl, r2, r1
 80057ce:	4649      	mov	r1, r9
 80057d0:	eb43 0b01 	adc.w	fp, r3, r1
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e8:	4692      	mov	sl, r2
 80057ea:	469b      	mov	fp, r3
 80057ec:	4643      	mov	r3, r8
 80057ee:	eb1a 0303 	adds.w	r3, sl, r3
 80057f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057f6:	464b      	mov	r3, r9
 80057f8:	eb4b 0303 	adc.w	r3, fp, r3
 80057fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800580c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005814:	460b      	mov	r3, r1
 8005816:	18db      	adds	r3, r3, r3
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
 800581a:	4613      	mov	r3, r2
 800581c:	eb42 0303 	adc.w	r3, r2, r3
 8005820:	647b      	str	r3, [r7, #68]	; 0x44
 8005822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800582a:	f7fa fd29 	bl	8000280 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4611      	mov	r1, r2
 8005834:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <UART_SetConfig+0x2d4>)
 8005836:	fba3 2301 	umull	r2, r3, r3, r1
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	2264      	movs	r2, #100	; 0x64
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	1acb      	subs	r3, r1, r3
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800584a:	4b36      	ldr	r3, [pc, #216]	; (8005924 <UART_SetConfig+0x2d4>)
 800584c:	fba3 2302 	umull	r2, r3, r3, r2
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005858:	441c      	add	r4, r3
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005864:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	63b9      	str	r1, [r7, #56]	; 0x38
 8005874:	415b      	adcs	r3, r3
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800587c:	4641      	mov	r1, r8
 800587e:	1851      	adds	r1, r2, r1
 8005880:	6339      	str	r1, [r7, #48]	; 0x30
 8005882:	4649      	mov	r1, r9
 8005884:	414b      	adcs	r3, r1
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005894:	4659      	mov	r1, fp
 8005896:	00cb      	lsls	r3, r1, #3
 8005898:	4651      	mov	r1, sl
 800589a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800589e:	4651      	mov	r1, sl
 80058a0:	00ca      	lsls	r2, r1, #3
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	4642      	mov	r2, r8
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b0:	464b      	mov	r3, r9
 80058b2:	460a      	mov	r2, r1
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058d0:	460b      	mov	r3, r1
 80058d2:	18db      	adds	r3, r3, r3
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d6:	4613      	mov	r3, r2
 80058d8:	eb42 0303 	adc.w	r3, r2, r3
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058e6:	f7fa fccb 	bl	8000280 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <UART_SetConfig+0x2d4>)
 80058f0:	fba3 1302 	umull	r1, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	2164      	movs	r1, #100	; 0x64
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	3332      	adds	r3, #50	; 0x32
 8005902:	4a08      	ldr	r2, [pc, #32]	; (8005924 <UART_SetConfig+0x2d4>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	f003 0207 	and.w	r2, r3, #7
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4422      	add	r2, r4
 8005916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005918:	e105      	b.n	8005b26 <UART_SetConfig+0x4d6>
 800591a:	bf00      	nop
 800591c:	40011000 	.word	0x40011000
 8005920:	40011400 	.word	0x40011400
 8005924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592c:	2200      	movs	r2, #0
 800592e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005932:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800593a:	4642      	mov	r2, r8
 800593c:	464b      	mov	r3, r9
 800593e:	1891      	adds	r1, r2, r2
 8005940:	6239      	str	r1, [r7, #32]
 8005942:	415b      	adcs	r3, r3
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
 8005946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800594a:	4641      	mov	r1, r8
 800594c:	1854      	adds	r4, r2, r1
 800594e:	4649      	mov	r1, r9
 8005950:	eb43 0501 	adc.w	r5, r3, r1
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	00eb      	lsls	r3, r5, #3
 800595e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005962:	00e2      	lsls	r2, r4, #3
 8005964:	4614      	mov	r4, r2
 8005966:	461d      	mov	r5, r3
 8005968:	4643      	mov	r3, r8
 800596a:	18e3      	adds	r3, r4, r3
 800596c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005970:	464b      	mov	r3, r9
 8005972:	eb45 0303 	adc.w	r3, r5, r3
 8005976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005986:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005996:	4629      	mov	r1, r5
 8005998:	008b      	lsls	r3, r1, #2
 800599a:	4621      	mov	r1, r4
 800599c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a0:	4621      	mov	r1, r4
 80059a2:	008a      	lsls	r2, r1, #2
 80059a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059a8:	f7fa fc6a 	bl	8000280 <__aeabi_uldivmod>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4b60      	ldr	r3, [pc, #384]	; (8005b34 <UART_SetConfig+0x4e4>)
 80059b2:	fba3 2302 	umull	r2, r3, r3, r2
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	011c      	lsls	r4, r3, #4
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	1891      	adds	r1, r2, r2
 80059d2:	61b9      	str	r1, [r7, #24]
 80059d4:	415b      	adcs	r3, r3
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059dc:	4641      	mov	r1, r8
 80059de:	1851      	adds	r1, r2, r1
 80059e0:	6139      	str	r1, [r7, #16]
 80059e2:	4649      	mov	r1, r9
 80059e4:	414b      	adcs	r3, r1
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059f4:	4659      	mov	r1, fp
 80059f6:	00cb      	lsls	r3, r1, #3
 80059f8:	4651      	mov	r1, sl
 80059fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fe:	4651      	mov	r1, sl
 8005a00:	00ca      	lsls	r2, r1, #3
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	4642      	mov	r2, r8
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a10:	464b      	mov	r3, r9
 8005a12:	460a      	mov	r2, r1
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a34:	4649      	mov	r1, r9
 8005a36:	008b      	lsls	r3, r1, #2
 8005a38:	4641      	mov	r1, r8
 8005a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a3e:	4641      	mov	r1, r8
 8005a40:	008a      	lsls	r2, r1, #2
 8005a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a46:	f7fa fc1b 	bl	8000280 <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005a50:	fba3 1302 	umull	r1, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	2164      	movs	r1, #100	; 0x64
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	3332      	adds	r3, #50	; 0x32
 8005a62:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a6e:	441c      	add	r4, r3
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	673b      	str	r3, [r7, #112]	; 0x70
 8005a78:	677a      	str	r2, [r7, #116]	; 0x74
 8005a7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a7e:	4642      	mov	r2, r8
 8005a80:	464b      	mov	r3, r9
 8005a82:	1891      	adds	r1, r2, r2
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	415b      	adcs	r3, r3
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a8e:	4641      	mov	r1, r8
 8005a90:	1851      	adds	r1, r2, r1
 8005a92:	6039      	str	r1, [r7, #0]
 8005a94:	4649      	mov	r1, r9
 8005a96:	414b      	adcs	r3, r1
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	00cb      	lsls	r3, r1, #3
 8005aaa:	4651      	mov	r1, sl
 8005aac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	00ca      	lsls	r2, r1, #3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4642      	mov	r2, r8
 8005abc:	189b      	adds	r3, r3, r2
 8005abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	460a      	mov	r2, r1
 8005ac4:	eb42 0303 	adc.w	r3, r2, r3
 8005ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad4:	667a      	str	r2, [r7, #100]	; 0x64
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	008b      	lsls	r3, r1, #2
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aec:	4641      	mov	r1, r8
 8005aee:	008a      	lsls	r2, r1, #2
 8005af0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005af4:	f7fa fbc4 	bl	8000280 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005afe:	fba3 1302 	umull	r1, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	2164      	movs	r1, #100	; 0x64
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	3332      	adds	r3, #50	; 0x32
 8005b10:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4422      	add	r2, r4
 8005b24:	609a      	str	r2, [r3, #8]
}
 8005b26:	bf00      	nop
 8005b28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b32:	bf00      	nop
 8005b34:	51eb851f 	.word	0x51eb851f

08005b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b38:	b084      	sub	sp, #16
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	f107 001c 	add.w	r0, r7, #28
 8005b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d122      	bne.n	8005b96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d105      	bne.n	8005b8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 fbee 	bl	800736c <USB_CoreReset>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	e01a      	b.n	8005bcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 fbe2 	bl	800736c <USB_CoreReset>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8005bbe:	e005      	b.n	8005bcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10b      	bne.n	8005bea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f043 0206 	orr.w	r2, r3, #6
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f043 0220 	orr.w	r2, r3, #32
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bf6:	b004      	add	sp, #16
 8005bf8:	4770      	bx	lr
	...

08005bfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	4613      	mov	r3, r2
 8005c08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d165      	bne.n	8005cdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4a41      	ldr	r2, [pc, #260]	; (8005d18 <USB_SetTurnaroundTime+0x11c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d906      	bls.n	8005c26 <USB_SetTurnaroundTime+0x2a>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4a40      	ldr	r2, [pc, #256]	; (8005d1c <USB_SetTurnaroundTime+0x120>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d202      	bcs.n	8005c26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c20:	230f      	movs	r3, #15
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e062      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4a3c      	ldr	r2, [pc, #240]	; (8005d1c <USB_SetTurnaroundTime+0x120>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d306      	bcc.n	8005c3c <USB_SetTurnaroundTime+0x40>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4a3b      	ldr	r2, [pc, #236]	; (8005d20 <USB_SetTurnaroundTime+0x124>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d202      	bcs.n	8005c3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c36:	230e      	movs	r3, #14
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e057      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4a38      	ldr	r2, [pc, #224]	; (8005d20 <USB_SetTurnaroundTime+0x124>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d306      	bcc.n	8005c52 <USB_SetTurnaroundTime+0x56>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4a37      	ldr	r2, [pc, #220]	; (8005d24 <USB_SetTurnaroundTime+0x128>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d202      	bcs.n	8005c52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c4c:	230d      	movs	r3, #13
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e04c      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4a33      	ldr	r2, [pc, #204]	; (8005d24 <USB_SetTurnaroundTime+0x128>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d306      	bcc.n	8005c68 <USB_SetTurnaroundTime+0x6c>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4a32      	ldr	r2, [pc, #200]	; (8005d28 <USB_SetTurnaroundTime+0x12c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d802      	bhi.n	8005c68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c62:	230c      	movs	r3, #12
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e041      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <USB_SetTurnaroundTime+0x12c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d906      	bls.n	8005c7e <USB_SetTurnaroundTime+0x82>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4a2e      	ldr	r2, [pc, #184]	; (8005d2c <USB_SetTurnaroundTime+0x130>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d802      	bhi.n	8005c7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c78:	230b      	movs	r3, #11
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e036      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <USB_SetTurnaroundTime+0x130>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d906      	bls.n	8005c94 <USB_SetTurnaroundTime+0x98>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4a29      	ldr	r2, [pc, #164]	; (8005d30 <USB_SetTurnaroundTime+0x134>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d802      	bhi.n	8005c94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c8e:	230a      	movs	r3, #10
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	e02b      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4a26      	ldr	r2, [pc, #152]	; (8005d30 <USB_SetTurnaroundTime+0x134>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d906      	bls.n	8005caa <USB_SetTurnaroundTime+0xae>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <USB_SetTurnaroundTime+0x138>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d202      	bcs.n	8005caa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ca4:	2309      	movs	r3, #9
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e020      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <USB_SetTurnaroundTime+0x138>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d306      	bcc.n	8005cc0 <USB_SetTurnaroundTime+0xc4>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <USB_SetTurnaroundTime+0x13c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d802      	bhi.n	8005cc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005cba:	2308      	movs	r3, #8
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	e015      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <USB_SetTurnaroundTime+0x13c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d906      	bls.n	8005cd6 <USB_SetTurnaroundTime+0xda>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4a1c      	ldr	r2, [pc, #112]	; (8005d3c <USB_SetTurnaroundTime+0x140>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d202      	bcs.n	8005cd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005cd0:	2307      	movs	r3, #7
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e00a      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cd6:	2306      	movs	r3, #6
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e007      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d102      	bne.n	8005ce8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ce2:	2309      	movs	r3, #9
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e001      	b.n	8005cec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ce8:	2309      	movs	r3, #9
 8005cea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	029b      	lsls	r3, r3, #10
 8005d00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	00d8acbf 	.word	0x00d8acbf
 8005d1c:	00e4e1c0 	.word	0x00e4e1c0
 8005d20:	00f42400 	.word	0x00f42400
 8005d24:	01067380 	.word	0x01067380
 8005d28:	011a499f 	.word	0x011a499f
 8005d2c:	01312cff 	.word	0x01312cff
 8005d30:	014ca43f 	.word	0x014ca43f
 8005d34:	016e3600 	.word	0x016e3600
 8005d38:	01a6ab1f 	.word	0x01a6ab1f
 8005d3c:	01e84800 	.word	0x01e84800

08005d40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f043 0201 	orr.w	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f023 0201 	bic.w	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d115      	bne.n	8005dd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005db2:	2001      	movs	r0, #1
 8005db4:	f7fb f9e6 	bl	8001184 <HAL_Delay>
      ms++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 fa45 	bl	800724e <USB_GetMode>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d01e      	beq.n	8005e08 <USB_SetCurrentMode+0x84>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b31      	cmp	r3, #49	; 0x31
 8005dce:	d9f0      	bls.n	8005db2 <USB_SetCurrentMode+0x2e>
 8005dd0:	e01a      	b.n	8005e08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d115      	bne.n	8005e04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005de4:	2001      	movs	r0, #1
 8005de6:	f7fb f9cd 	bl	8001184 <HAL_Delay>
      ms++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3301      	adds	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fa2c 	bl	800724e <USB_GetMode>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <USB_SetCurrentMode+0x84>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b31      	cmp	r3, #49	; 0x31
 8005e00:	d9f0      	bls.n	8005de4 <USB_SetCurrentMode+0x60>
 8005e02:	e001      	b.n	8005e08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e005      	b.n	8005e14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b32      	cmp	r3, #50	; 0x32
 8005e0c:	d101      	bne.n	8005e12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	e009      	b.n	8005e50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	3340      	adds	r3, #64	; 0x40
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	2200      	movs	r2, #0
 8005e48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b0e      	cmp	r3, #14
 8005e54:	d9f2      	bls.n	8005e3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d11c      	bne.n	8005e96 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6a:	f043 0302 	orr.w	r3, r3, #2
 8005e6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
 8005e94:	e00b      	b.n	8005eae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec8:	461a      	mov	r2, r3
 8005eca:	680b      	ldr	r3, [r1, #0]
 8005ecc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d10c      	bne.n	8005eee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eda:	2100      	movs	r1, #0
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f965 	bl	80061ac <USB_SetDevSpeed>
 8005ee2:	e008      	b.n	8005ef6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f960 	bl	80061ac <USB_SetDevSpeed>
 8005eec:	e003      	b.n	8005ef6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005eee:	2103      	movs	r1, #3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f95b 	bl	80061ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ef6:	2110      	movs	r1, #16
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f8f3 	bl	80060e4 <USB_FlushTxFifo>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f91f 	bl	800614c <USB_FlushRxFifo>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2300      	movs	r3, #0
 8005f22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	461a      	mov	r2, r3
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	e043      	b.n	8005fca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f58:	d118      	bne.n	8005f8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	e013      	b.n	8005f9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	461a      	mov	r2, r3
 8005f84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e008      	b.n	8005f9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005faa:	461a      	mov	r2, r3
 8005fac:	2300      	movs	r3, #0
 8005fae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d3b7      	bcc.n	8005f42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	e043      	b.n	8006060 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fee:	d118      	bne.n	8006022 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	461a      	mov	r2, r3
 8006004:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e013      	b.n	8006034 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	461a      	mov	r2, r3
 800601a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	e008      	b.n	8006034 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	461a      	mov	r2, r3
 8006030:	2300      	movs	r3, #0
 8006032:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	461a      	mov	r2, r3
 8006042:	2300      	movs	r3, #0
 8006044:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	461a      	mov	r2, r3
 8006054:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006058:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3301      	adds	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	429a      	cmp	r2, r3
 8006066:	d3b7      	bcc.n	8005fd8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006088:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f043 0210 	orr.w	r2, r3, #16
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <USB_DevInit+0x2c4>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	f043 0208 	orr.w	r2, r3, #8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d107      	bne.n	80060d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060dc:	b004      	add	sp, #16
 80060de:	4770      	bx	lr
 80060e0:	803c3800 	.word	0x803c3800

080060e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a13      	ldr	r2, [pc, #76]	; (8006148 <USB_FlushTxFifo+0x64>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e01b      	b.n	800613c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	daf2      	bge.n	80060f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	019b      	lsls	r3, r3, #6
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3301      	adds	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4a08      	ldr	r2, [pc, #32]	; (8006148 <USB_FlushTxFifo+0x64>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d901      	bls.n	800612e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e006      	b.n	800613c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	d0f0      	beq.n	800611c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	00030d40 	.word	0x00030d40

0800614c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a11      	ldr	r2, [pc, #68]	; (80061a8 <USB_FlushRxFifo+0x5c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e018      	b.n	800619c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	daf2      	bge.n	8006158 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2210      	movs	r2, #16
 800617a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <USB_FlushRxFifo+0x5c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e006      	b.n	800619c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b10      	cmp	r3, #16
 8006198:	d0f0      	beq.n	800617c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	00030d40 	.word	0x00030d40

080061ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061cc:	4313      	orrs	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061de:	b480      	push	{r7}
 80061e0:	b087      	sub	sp, #28
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 0306 	and.w	r3, r3, #6
 80061f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]
 8006202:	e00a      	b.n	800621a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d002      	beq.n	8006210 <USB_GetDevSpeed+0x32>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d102      	bne.n	8006216 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006210:	2302      	movs	r3, #2
 8006212:	75fb      	strb	r3, [r7, #23]
 8006214:	e001      	b.n	800621a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006216:	230f      	movs	r3, #15
 8006218:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800621a:	7dfb      	ldrb	r3, [r7, #23]
}
 800621c:	4618      	mov	r0, r3
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	785b      	ldrb	r3, [r3, #1]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d13a      	bne.n	80062ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	69da      	ldr	r2, [r3, #28]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	f003 030f 	and.w	r3, r3, #15
 8006254:	2101      	movs	r1, #1
 8006256:	fa01 f303 	lsl.w	r3, r1, r3
 800625a:	b29b      	uxth	r3, r3
 800625c:	68f9      	ldr	r1, [r7, #12]
 800625e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006262:	4313      	orrs	r3, r2
 8006264:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d155      	bne.n	8006328 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	791b      	ldrb	r3, [r3, #4]
 8006296:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006298:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	059b      	lsls	r3, r3, #22
 800629e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062a0:	4313      	orrs	r3, r2
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	e036      	b.n	8006328 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c0:	69da      	ldr	r2, [r3, #28]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	2101      	movs	r1, #1
 80062cc:	fa01 f303 	lsl.w	r3, r1, r3
 80062d0:	041b      	lsls	r3, r3, #16
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d8:	4313      	orrs	r3, r2
 80062da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d11a      	bne.n	8006328 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	791b      	ldrb	r3, [r3, #4]
 800630c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800630e:	430b      	orrs	r3, r1
 8006310:	4313      	orrs	r3, r2
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006326:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d161      	bne.n	8006418 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800636a:	d11f      	bne.n	80063ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006386:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800638a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	2101      	movs	r1, #1
 80063be:	fa01 f303 	lsl.w	r3, r1, r3
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	43db      	mvns	r3, r3
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063cc:	4013      	ands	r3, r2
 80063ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	2101      	movs	r1, #1
 80063e2:	fa01 f303 	lsl.w	r3, r1, r3
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063f0:	4013      	ands	r3, r2
 80063f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	0159      	lsls	r1, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	440b      	add	r3, r1
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	4619      	mov	r1, r3
 8006410:	4b35      	ldr	r3, [pc, #212]	; (80064e8 <USB_DeactivateEndpoint+0x1b0>)
 8006412:	4013      	ands	r3, r2
 8006414:	600b      	str	r3, [r1, #0]
 8006416:	e060      	b.n	80064da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800642a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800642e:	d11f      	bne.n	8006470 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	440a      	add	r2, r1
 8006446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800644e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800646e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	2101      	movs	r1, #1
 8006482:	fa01 f303 	lsl.w	r3, r1, r3
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	43db      	mvns	r3, r3
 800648a:	68f9      	ldr	r1, [r7, #12]
 800648c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006490:	4013      	ands	r3, r2
 8006492:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	2101      	movs	r1, #1
 80064a6:	fa01 f303 	lsl.w	r3, r1, r3
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	43db      	mvns	r3, r3
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b4:	4013      	ands	r3, r2
 80064b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	0159      	lsls	r1, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	440b      	add	r3, r1
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	4619      	mov	r1, r3
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <USB_DeactivateEndpoint+0x1b4>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	ec337800 	.word	0xec337800
 80064ec:	eff37800 	.word	0xeff37800

080064f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 815c 	bne.w	80067ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d132      	bne.n	8006580 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800653c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800655c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006578:	0cdb      	lsrs	r3, r3, #19
 800657a:	04db      	lsls	r3, r3, #19
 800657c:	6113      	str	r3, [r2, #16]
 800657e:	e074      	b.n	800666a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	0151      	lsls	r1, r2, #5
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	440a      	add	r2, r1
 8006596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659a:	0cdb      	lsrs	r3, r3, #19
 800659c:	04db      	lsls	r3, r3, #19
 800659e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	440b      	add	r3, r1
 80065dc:	1e59      	subs	r1, r3, #1
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80065e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065e8:	4b9d      	ldr	r3, [pc, #628]	; (8006860 <USB_EPStartXfer+0x370>)
 80065ea:	400b      	ands	r3, r1
 80065ec:	69b9      	ldr	r1, [r7, #24]
 80065ee:	0148      	lsls	r0, r1, #5
 80065f0:	69f9      	ldr	r1, [r7, #28]
 80065f2:	4401      	add	r1, r0
 80065f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065f8:	4313      	orrs	r3, r2
 80065fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006612:	69b9      	ldr	r1, [r7, #24]
 8006614:	0148      	lsls	r0, r1, #5
 8006616:	69f9      	ldr	r1, [r7, #28]
 8006618:	4401      	add	r1, r0
 800661a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800661e:	4313      	orrs	r3, r2
 8006620:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	791b      	ldrb	r3, [r3, #4]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d11f      	bne.n	800666a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	440a      	add	r2, r1
 8006640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006644:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006648:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	440a      	add	r2, r1
 8006660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006668:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d14b      	bne.n	8006708 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006684:	461a      	mov	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	791b      	ldrb	r3, [r3, #4]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d128      	bne.n	80066e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d110      	bne.n	80066c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	e00f      	b.n	80066e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006700:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	e133      	b.n	8006970 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006726:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	791b      	ldrb	r3, [r3, #4]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d015      	beq.n	800675c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 811b 	beq.w	8006970 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	2101      	movs	r1, #1
 800674c:	fa01 f303 	lsl.w	r3, r1, r3
 8006750:	69f9      	ldr	r1, [r7, #28]
 8006752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006756:	4313      	orrs	r3, r2
 8006758:	634b      	str	r3, [r1, #52]	; 0x34
 800675a:	e109      	b.n	8006970 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d110      	bne.n	800678e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	e00f      	b.n	80067ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6919      	ldr	r1, [r3, #16]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	b298      	uxth	r0, r3
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	4603      	mov	r3, r0
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fade 	bl	8006d84 <USB_WritePacket>
 80067c8:	e0d2      	b.n	8006970 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e4:	0cdb      	lsrs	r3, r3, #19
 80067e6:	04db      	lsls	r3, r3, #19
 80067e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800680c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d126      	bne.n	8006864 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682c:	69b9      	ldr	r1, [r7, #24]
 800682e:	0148      	lsls	r0, r1, #5
 8006830:	69f9      	ldr	r1, [r7, #28]
 8006832:	4401      	add	r1, r0
 8006834:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006838:	4313      	orrs	r3, r2
 800683a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	440a      	add	r2, r1
 8006852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800685a:	6113      	str	r3, [r2, #16]
 800685c:	e03a      	b.n	80068d4 <USB_EPStartXfer+0x3e4>
 800685e:	bf00      	nop
 8006860:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4413      	add	r3, r2
 800686e:	1e5a      	subs	r2, r3, #1
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	8afa      	ldrh	r2, [r7, #22]
 8006880:	fb03 f202 	mul.w	r2, r3, r2
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	8afb      	ldrh	r3, [r7, #22]
 8006898:	04d9      	lsls	r1, r3, #19
 800689a:	4b38      	ldr	r3, [pc, #224]	; (800697c <USB_EPStartXfer+0x48c>)
 800689c:	400b      	ands	r3, r1
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	0148      	lsls	r0, r1, #5
 80068a2:	69f9      	ldr	r1, [r7, #28]
 80068a4:	4401      	add	r1, r0
 80068a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068aa:	4313      	orrs	r3, r2
 80068ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c4:	69b9      	ldr	r1, [r7, #24]
 80068c6:	0148      	lsls	r0, r1, #5
 80068c8:	69f9      	ldr	r1, [r7, #28]
 80068ca:	4401      	add	r1, r0
 80068cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068d0:	4313      	orrs	r3, r2
 80068d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d10d      	bne.n	80068f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6919      	ldr	r1, [r3, #16]
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	460a      	mov	r2, r1
 80068f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	791b      	ldrb	r3, [r3, #4]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d128      	bne.n	8006950 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d110      	bne.n	8006930 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e00f      	b.n	8006950 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800694e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800696e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	1ff80000 	.word	0x1ff80000

08006980 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	f040 80ce 	bne.w	8006b3e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d132      	bne.n	8006a10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a08:	0cdb      	lsrs	r3, r3, #19
 8006a0a:	04db      	lsls	r3, r3, #19
 8006a0c:	6113      	str	r3, [r2, #16]
 8006a0e:	e04e      	b.n	8006aae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2a:	0cdb      	lsrs	r3, r3, #19
 8006a2c:	04db      	lsls	r3, r3, #19
 8006a2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a52:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d903      	bls.n	8006a68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a9e:	6939      	ldr	r1, [r7, #16]
 8006aa0:	0148      	lsls	r0, r1, #5
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	4401      	add	r1, r0
 8006aa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d11e      	bne.n	8006af2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d009      	beq.n	8006ad0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	e097      	b.n	8006c22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8083 	beq.w	8006c22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b32:	6979      	ldr	r1, [r7, #20]
 8006b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	634b      	str	r3, [r1, #52]	; 0x34
 8006b3c:	e071      	b.n	8006c22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b58:	0cdb      	lsrs	r3, r3, #19
 8006b5a:	04db      	lsls	r3, r3, #19
 8006b5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd0:	6939      	ldr	r1, [r7, #16]
 8006bd2:	0148      	lsls	r0, r1, #5
 8006bd4:	6979      	ldr	r1, [r7, #20]
 8006bd6:	4401      	add	r1, r0
 8006bd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d10d      	bne.n	8006c02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6919      	ldr	r1, [r3, #16]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	460a      	mov	r2, r1
 8006c00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d14a      	bne.n	8006ce4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c66:	f040 8086 	bne.w	8006d76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	7812      	ldrb	r2, [r2, #0]
 8006c7e:	0151      	lsls	r1, r2, #5
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	440a      	add	r2, r1
 8006c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	7812      	ldrb	r2, [r2, #0]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f242 7210 	movw	r2, #10000	; 0x2710
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d902      	bls.n	8006cc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cc6:	e056      	b.n	8006d76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce0:	d0e7      	beq.n	8006cb2 <USB_EPStopXfer+0x82>
 8006ce2:	e048      	b.n	8006d76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cfc:	d13b      	bne.n	8006d76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	7812      	ldrb	r2, [r2, #0]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d902      	bls.n	8006d5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5a:	e00c      	b.n	8006d76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d74:	d0e7      	beq.n	8006d46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b089      	sub	sp, #36	; 0x24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	4611      	mov	r1, r2
 8006d90:	461a      	mov	r2, r3
 8006d92:	460b      	mov	r3, r1
 8006d94:	71fb      	strb	r3, [r7, #7]
 8006d96:	4613      	mov	r3, r2
 8006d98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d123      	bne.n	8006df2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006daa:	88bb      	ldrh	r3, [r7, #4]
 8006dac:	3303      	adds	r3, #3
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006db2:	2300      	movs	r3, #0
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	e018      	b.n	8006dea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	031a      	lsls	r2, r3, #12
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	3301      	adds	r3, #1
 8006de2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	3301      	adds	r3, #1
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d3e2      	bcc.n	8006db8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3724      	adds	r7, #36	; 0x24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b08b      	sub	sp, #44	; 0x2c
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	089b      	lsrs	r3, r3, #2
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	623b      	str	r3, [r7, #32]
 8006e2a:	e014      	b.n	8006e56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	3301      	adds	r3, #1
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	3301      	adds	r3, #1
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	3301      	adds	r3, #1
 8006e54:	623b      	str	r3, [r7, #32]
 8006e56:	6a3a      	ldr	r2, [r7, #32]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d3e6      	bcc.n	8006e2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e5e:	8bfb      	ldrh	r3, [r7, #30]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01e      	beq.n	8006ea2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f107 0310 	add.w	r3, r7, #16
 8006e74:	6812      	ldr	r2, [r2, #0]
 8006e76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	701a      	strb	r2, [r3, #0]
      i++;
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	3301      	adds	r3, #1
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e96:	8bfb      	ldrh	r3, [r7, #30]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e9c:	8bfb      	ldrh	r3, [r7, #30]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1ea      	bne.n	8006e78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	372c      	adds	r7, #44	; 0x2c
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d12c      	bne.n	8006f26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	db12      	blt.n	8006f04 <USB_EPSetStall+0x54>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00f      	beq.n	8006f04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	e02b      	b.n	8006f7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	db12      	blt.n	8006f5e <USB_EPSetStall+0xae>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d128      	bne.n	8006ffa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fc6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d003      	beq.n	8006fd8 <USB_EPClearStall+0x4c>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d138      	bne.n	800704a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e027      	b.n	800704a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007014:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007018:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	791b      	ldrb	r3, [r3, #4]
 800701e:	2b03      	cmp	r3, #3
 8007020:	d003      	beq.n	800702a <USB_EPClearStall+0x9e>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	791b      	ldrb	r3, [r3, #4]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d10f      	bne.n	800704a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007048:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007076:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800707a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800708c:	68f9      	ldr	r1, [r7, #12]
 800708e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007092:	4313      	orrs	r3, r2
 8007094:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070d2:	f023 0302 	bic.w	r3, r3, #2
 80070d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007100:	f023 0303 	bic.w	r3, r3, #3
 8007104:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4013      	ands	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007140:	68fb      	ldr	r3, [r7, #12]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	4013      	ands	r3, r2
 8007170:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	0c1b      	lsrs	r3, r3, #16
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	4013      	ands	r3, r2
 80071a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	b29b      	uxth	r3, r3
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	4013      	ands	r3, r2
 80071e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071e4:	68bb      	ldr	r3, [r7, #8]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	460b      	mov	r3, r1
 80071fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	fa22 f303 	lsr.w	r3, r2, r3
 8007222:	01db      	lsls	r3, r3, #7
 8007224:	b2db      	uxtb	r3, r3
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4013      	ands	r3, r2
 800723e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007240:	68bb      	ldr	r3, [r7, #8]
}
 8007242:	4618      	mov	r0, r3
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f003 0301 	and.w	r3, r3, #1
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007284:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007288:	f023 0307 	bic.w	r3, r3, #7
 800728c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800729c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	460b      	mov	r3, r1
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	333c      	adds	r3, #60	; 0x3c
 80072c6:	3304      	adds	r3, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4a26      	ldr	r2, [pc, #152]	; (8007368 <USB_EP0_OutStart+0xb8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d90a      	bls.n	80072ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072e4:	d101      	bne.n	80072ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e037      	b.n	800735a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	461a      	mov	r2, r3
 80072f2:	2300      	movs	r3, #0
 80072f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007308:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007318:	f043 0318 	orr.w	r3, r3, #24
 800731c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007330:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007332:	7afb      	ldrb	r3, [r7, #11]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10f      	bne.n	8007358 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733e:	461a      	mov	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007352:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007356:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	4f54300a 	.word	0x4f54300a

0800736c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <USB_CoreReset+0x64>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d901      	bls.n	800738a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e01b      	b.n	80073c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	daf2      	bge.n	8007378 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f043 0201 	orr.w	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <USB_CoreReset+0x64>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e006      	b.n	80073c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d0f0      	beq.n	80073a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	00030d40 	.word	0x00030d40

080073d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073e4:	f002 fc28 	bl	8009c38 <USBD_static_malloc>
 80073e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32b0      	adds	r2, #176	; 0xb0
 80073fa:	2100      	movs	r1, #0
 80073fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007400:	2302      	movs	r3, #2
 8007402:	e0d4      	b.n	80075ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007404:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007408:	2100      	movs	r1, #0
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f002 fc82 	bl	8009d14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	32b0      	adds	r2, #176	; 0xb0
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	32b0      	adds	r2, #176	; 0xb0
 800742a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7c1b      	ldrb	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d138      	bne.n	80074ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800743c:	4b5e      	ldr	r3, [pc, #376]	; (80075b8 <USBD_CDC_Init+0x1e4>)
 800743e:	7819      	ldrb	r1, [r3, #0]
 8007440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007444:	2202      	movs	r2, #2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f002 fad3 	bl	80099f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800744c:	4b5a      	ldr	r3, [pc, #360]	; (80075b8 <USBD_CDC_Init+0x1e4>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 020f 	and.w	r2, r3, #15
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	3324      	adds	r3, #36	; 0x24
 8007462:	2201      	movs	r2, #1
 8007464:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007466:	4b55      	ldr	r3, [pc, #340]	; (80075bc <USBD_CDC_Init+0x1e8>)
 8007468:	7819      	ldrb	r1, [r3, #0]
 800746a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800746e:	2202      	movs	r2, #2
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f002 fabe 	bl	80099f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007476:	4b51      	ldr	r3, [pc, #324]	; (80075bc <USBD_CDC_Init+0x1e8>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800748e:	2201      	movs	r2, #1
 8007490:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007492:	4b4b      	ldr	r3, [pc, #300]	; (80075c0 <USBD_CDC_Init+0x1ec>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f003 020f 	and.w	r2, r3, #15
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	3326      	adds	r3, #38	; 0x26
 80074a8:	2210      	movs	r2, #16
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	e035      	b.n	800751a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074ae:	4b42      	ldr	r3, [pc, #264]	; (80075b8 <USBD_CDC_Init+0x1e4>)
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	2340      	movs	r3, #64	; 0x40
 80074b4:	2202      	movs	r2, #2
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f002 fa9b 	bl	80099f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074bc:	4b3e      	ldr	r3, [pc, #248]	; (80075b8 <USBD_CDC_Init+0x1e4>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3324      	adds	r3, #36	; 0x24
 80074d2:	2201      	movs	r2, #1
 80074d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074d6:	4b39      	ldr	r3, [pc, #228]	; (80075bc <USBD_CDC_Init+0x1e8>)
 80074d8:	7819      	ldrb	r1, [r3, #0]
 80074da:	2340      	movs	r3, #64	; 0x40
 80074dc:	2202      	movs	r2, #2
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f002 fa87 	bl	80099f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074e4:	4b35      	ldr	r3, [pc, #212]	; (80075bc <USBD_CDC_Init+0x1e8>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074fc:	2201      	movs	r2, #1
 80074fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007500:	4b2f      	ldr	r3, [pc, #188]	; (80075c0 <USBD_CDC_Init+0x1ec>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	3326      	adds	r3, #38	; 0x26
 8007516:	2210      	movs	r2, #16
 8007518:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800751a:	4b29      	ldr	r3, [pc, #164]	; (80075c0 <USBD_CDC_Init+0x1ec>)
 800751c:	7819      	ldrb	r1, [r3, #0]
 800751e:	2308      	movs	r3, #8
 8007520:	2203      	movs	r2, #3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f002 fa65 	bl	80099f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007528:	4b25      	ldr	r3, [pc, #148]	; (80075c0 <USBD_CDC_Init+0x1ec>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	f003 020f 	and.w	r2, r3, #15
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	2201      	movs	r2, #1
 8007540:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	33b0      	adds	r3, #176	; 0xb0
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007578:	2302      	movs	r3, #2
 800757a:	e018      	b.n	80075ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7c1b      	ldrb	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <USBD_CDC_Init+0x1e8>)
 8007586:	7819      	ldrb	r1, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800758e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f002 fb1c 	bl	8009bd0 <USBD_LL_PrepareReceive>
 8007598:	e008      	b.n	80075ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800759a:	4b08      	ldr	r3, [pc, #32]	; (80075bc <USBD_CDC_Init+0x1e8>)
 800759c:	7819      	ldrb	r1, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075a4:	2340      	movs	r3, #64	; 0x40
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f002 fb12 	bl	8009bd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000093 	.word	0x20000093
 80075bc:	20000094 	.word	0x20000094
 80075c0:	20000095 	.word	0x20000095

080075c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80075d0:	4b3a      	ldr	r3, [pc, #232]	; (80076bc <USBD_CDC_DeInit+0xf8>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f002 fa31 	bl	8009a3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80075dc:	4b37      	ldr	r3, [pc, #220]	; (80076bc <USBD_CDC_DeInit+0xf8>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 020f 	and.w	r2, r3, #15
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3324      	adds	r3, #36	; 0x24
 80075f2:	2200      	movs	r2, #0
 80075f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80075f6:	4b32      	ldr	r3, [pc, #200]	; (80076c0 <USBD_CDC_DeInit+0xfc>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 fa1e 	bl	8009a3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007602:	4b2f      	ldr	r3, [pc, #188]	; (80076c0 <USBD_CDC_DeInit+0xfc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800761a:	2200      	movs	r2, #0
 800761c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800761e:	4b29      	ldr	r3, [pc, #164]	; (80076c4 <USBD_CDC_DeInit+0x100>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f002 fa0a 	bl	8009a3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800762a:	4b26      	ldr	r3, [pc, #152]	; (80076c4 <USBD_CDC_DeInit+0x100>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	f003 020f 	and.w	r2, r3, #15
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	3324      	adds	r3, #36	; 0x24
 8007640:	2200      	movs	r2, #0
 8007642:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007644:	4b1f      	ldr	r3, [pc, #124]	; (80076c4 <USBD_CDC_DeInit+0x100>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	3326      	adds	r3, #38	; 0x26
 800765a:	2200      	movs	r2, #0
 800765c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	32b0      	adds	r2, #176	; 0xb0
 8007668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01f      	beq.n	80076b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	33b0      	adds	r3, #176	; 0xb0
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32b0      	adds	r2, #176	; 0xb0
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	4618      	mov	r0, r3
 8007694:	f002 fade 	bl	8009c54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	32b0      	adds	r2, #176	; 0xb0
 80076a2:	2100      	movs	r1, #0
 80076a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000093 	.word	0x20000093
 80076c0:	20000094 	.word	0x20000094
 80076c4:	20000095 	.word	0x20000095

080076c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	32b0      	adds	r2, #176	; 0xb0
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e0bf      	b.n	8007878 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007700:	2b00      	cmp	r3, #0
 8007702:	d050      	beq.n	80077a6 <USBD_CDC_Setup+0xde>
 8007704:	2b20      	cmp	r3, #32
 8007706:	f040 80af 	bne.w	8007868 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	88db      	ldrh	r3, [r3, #6]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d03a      	beq.n	8007788 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b25b      	sxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	da1b      	bge.n	8007754 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	33b0      	adds	r3, #176	; 0xb0
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007732:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	88d2      	ldrh	r2, [r2, #6]
 8007738:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	88db      	ldrh	r3, [r3, #6]
 800773e:	2b07      	cmp	r3, #7
 8007740:	bf28      	it	cs
 8007742:	2307      	movcs	r3, #7
 8007744:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	89fa      	ldrh	r2, [r7, #14]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 fd43 	bl	80091d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007752:	e090      	b.n	8007876 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	785a      	ldrb	r2, [r3, #1]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	88db      	ldrh	r3, [r3, #6]
 8007762:	2b3f      	cmp	r3, #63	; 0x3f
 8007764:	d803      	bhi.n	800776e <USBD_CDC_Setup+0xa6>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	88db      	ldrh	r3, [r3, #6]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	e000      	b.n	8007770 <USBD_CDC_Setup+0xa8>
 800776e:	2240      	movs	r2, #64	; 0x40
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007776:	6939      	ldr	r1, [r7, #16]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800777e:	461a      	mov	r2, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fd55 	bl	8009230 <USBD_CtlPrepareRx>
      break;
 8007786:	e076      	b.n	8007876 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	33b0      	adds	r3, #176	; 0xb0
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	7850      	ldrb	r0, [r2, #1]
 800779e:	2200      	movs	r2, #0
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	4798      	blx	r3
      break;
 80077a4:	e067      	b.n	8007876 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b0b      	cmp	r3, #11
 80077ac:	d851      	bhi.n	8007852 <USBD_CDC_Setup+0x18a>
 80077ae:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <USBD_CDC_Setup+0xec>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077e5 	.word	0x080077e5
 80077b8:	08007861 	.word	0x08007861
 80077bc:	08007853 	.word	0x08007853
 80077c0:	08007853 	.word	0x08007853
 80077c4:	08007853 	.word	0x08007853
 80077c8:	08007853 	.word	0x08007853
 80077cc:	08007853 	.word	0x08007853
 80077d0:	08007853 	.word	0x08007853
 80077d4:	08007853 	.word	0x08007853
 80077d8:	08007853 	.word	0x08007853
 80077dc:	0800780f 	.word	0x0800780f
 80077e0:	08007839 	.word	0x08007839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d107      	bne.n	8007800 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077f0:	f107 030a 	add.w	r3, r7, #10
 80077f4:	2202      	movs	r2, #2
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 fced 	bl	80091d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077fe:	e032      	b.n	8007866 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fc77 	bl	80090f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007808:	2303      	movs	r3, #3
 800780a:	75fb      	strb	r3, [r7, #23]
          break;
 800780c:	e02b      	b.n	8007866 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b03      	cmp	r3, #3
 8007818:	d107      	bne.n	800782a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800781a:	f107 030d 	add.w	r3, r7, #13
 800781e:	2201      	movs	r2, #1
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fcd8 	bl	80091d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007828:	e01d      	b.n	8007866 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fc62 	bl	80090f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	75fb      	strb	r3, [r7, #23]
          break;
 8007836:	e016      	b.n	8007866 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b03      	cmp	r3, #3
 8007842:	d00f      	beq.n	8007864 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 fc55 	bl	80090f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800784c:	2303      	movs	r3, #3
 800784e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007850:	e008      	b.n	8007864 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fc4e 	bl	80090f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800785a:	2303      	movs	r3, #3
 800785c:	75fb      	strb	r3, [r7, #23]
          break;
 800785e:	e002      	b.n	8007866 <USBD_CDC_Setup+0x19e>
          break;
 8007860:	bf00      	nop
 8007862:	e008      	b.n	8007876 <USBD_CDC_Setup+0x1ae>
          break;
 8007864:	bf00      	nop
      }
      break;
 8007866:	e006      	b.n	8007876 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 fc43 	bl	80090f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007870:	2303      	movs	r3, #3
 8007872:	75fb      	strb	r3, [r7, #23]
      break;
 8007874:	bf00      	nop
  }

  return (uint8_t)ret;
 8007876:	7dfb      	ldrb	r3, [r7, #23]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007892:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	32b0      	adds	r2, #176	; 0xb0
 800789e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e065      	b.n	8007976 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	32b0      	adds	r2, #176	; 0xb0
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	f003 020f 	and.w	r2, r3, #15
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	3318      	adds	r3, #24
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02f      	beq.n	8007934 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	f003 020f 	and.w	r2, r3, #15
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	3318      	adds	r3, #24
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	f003 010f 	and.w	r1, r3, #15
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	460b      	mov	r3, r1
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	440b      	add	r3, r1
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4403      	add	r3, r0
 80078fc:	3348      	adds	r3, #72	; 0x48
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	fbb2 f1f3 	udiv	r1, r2, r3
 8007904:	fb01 f303 	mul.w	r3, r1, r3
 8007908:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800790a:	2b00      	cmp	r3, #0
 800790c:	d112      	bne.n	8007934 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	f003 020f 	and.w	r2, r3, #15
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	3318      	adds	r3, #24
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007926:	78f9      	ldrb	r1, [r7, #3]
 8007928:	2300      	movs	r3, #0
 800792a:	2200      	movs	r2, #0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f002 f92e 	bl	8009b8e <USBD_LL_Transmit>
 8007932:	e01f      	b.n	8007974 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	33b0      	adds	r3, #176	; 0xb0
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	33b0      	adds	r3, #176	; 0xb0
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	32b0      	adds	r2, #176	; 0xb0
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	32b0      	adds	r2, #176	; 0xb0
 80079a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e01a      	b.n	80079e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f002 f92c 	bl	8009c12 <USBD_LL_GetRxDataSize>
 80079ba:	4602      	mov	r2, r0
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	33b0      	adds	r3, #176	; 0xb0
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079e0:	4611      	mov	r1, r2
 80079e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	32b0      	adds	r2, #176	; 0xb0
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e025      	b.n	8007a5c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	33b0      	adds	r3, #176	; 0xb0
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01a      	beq.n	8007a5a <USBD_CDC_EP0_RxReady+0x6c>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a2a:	2bff      	cmp	r3, #255	; 0xff
 8007a2c:	d015      	beq.n	8007a5a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	33b0      	adds	r3, #176	; 0xb0
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a4e:	b292      	uxth	r2, r2
 8007a50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a6c:	2182      	movs	r1, #130	; 0x82
 8007a6e:	4818      	ldr	r0, [pc, #96]	; (8007ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a70:	f000 fd09 	bl	8008486 <USBD_GetEpDesc>
 8007a74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a76:	2101      	movs	r1, #1
 8007a78:	4815      	ldr	r0, [pc, #84]	; (8007ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a7a:	f000 fd04 	bl	8008486 <USBD_GetEpDesc>
 8007a7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a80:	2181      	movs	r1, #129	; 0x81
 8007a82:	4813      	ldr	r0, [pc, #76]	; (8007ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a84:	f000 fcff 	bl	8008486 <USBD_GetEpDesc>
 8007a88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2210      	movs	r2, #16
 8007a94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d006      	beq.n	8007aaa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa4:	711a      	strb	r2, [r3, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ab8:	711a      	strb	r2, [r3, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2243      	movs	r2, #67	; 0x43
 8007ac2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000050 	.word	0x20000050

08007ad4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007adc:	2182      	movs	r1, #130	; 0x82
 8007ade:	4818      	ldr	r0, [pc, #96]	; (8007b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ae0:	f000 fcd1 	bl	8008486 <USBD_GetEpDesc>
 8007ae4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	4815      	ldr	r0, [pc, #84]	; (8007b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007aea:	f000 fccc 	bl	8008486 <USBD_GetEpDesc>
 8007aee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007af0:	2181      	movs	r1, #129	; 0x81
 8007af2:	4813      	ldr	r0, [pc, #76]	; (8007b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007af4:	f000 fcc7 	bl	8008486 <USBD_GetEpDesc>
 8007af8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2210      	movs	r2, #16
 8007b04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	711a      	strb	r2, [r3, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f042 0202 	orr.w	r2, r2, #2
 8007b18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d006      	beq.n	8007b2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	711a      	strb	r2, [r3, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f042 0202 	orr.w	r2, r2, #2
 8007b2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2243      	movs	r2, #67	; 0x43
 8007b32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000050 	.word	0x20000050

08007b44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b4c:	2182      	movs	r1, #130	; 0x82
 8007b4e:	4818      	ldr	r0, [pc, #96]	; (8007bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b50:	f000 fc99 	bl	8008486 <USBD_GetEpDesc>
 8007b54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b56:	2101      	movs	r1, #1
 8007b58:	4815      	ldr	r0, [pc, #84]	; (8007bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b5a:	f000 fc94 	bl	8008486 <USBD_GetEpDesc>
 8007b5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b60:	2181      	movs	r1, #129	; 0x81
 8007b62:	4813      	ldr	r0, [pc, #76]	; (8007bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b64:	f000 fc8f 	bl	8008486 <USBD_GetEpDesc>
 8007b68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2210      	movs	r2, #16
 8007b74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d006      	beq.n	8007b8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b84:	711a      	strb	r2, [r3, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d006      	beq.n	8007b9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b98:	711a      	strb	r2, [r3, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2243      	movs	r2, #67	; 0x43
 8007ba2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000050 	.word	0x20000050

08007bb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	220a      	movs	r2, #10
 8007bc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007bc2:	4b03      	ldr	r3, [pc, #12]	; (8007bd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	2000000c 	.word	0x2000000c

08007bd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e009      	b.n	8007bfc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	33b0      	adds	r3, #176	; 0xb0
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	32b0      	adds	r2, #176	; 0xb0
 8007c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c22:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e008      	b.n	8007c40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	32b0      	adds	r2, #176	; 0xb0
 8007c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e004      	b.n	8007c7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
	...

08007c88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	32b0      	adds	r2, #176	; 0xb0
 8007c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	32b0      	adds	r2, #176	; 0xb0
 8007caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e018      	b.n	8007ce8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7c1b      	ldrb	r3, [r3, #16]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <USBD_CDC_ReceivePacket+0x68>)
 8007cc0:	7819      	ldrb	r1, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 ff7f 	bl	8009bd0 <USBD_LL_PrepareReceive>
 8007cd2:	e008      	b.n	8007ce6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <USBD_CDC_ReceivePacket+0x68>)
 8007cd6:	7819      	ldrb	r1, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cde:	2340      	movs	r3, #64	; 0x40
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 ff75 	bl	8009bd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20000094 	.word	0x20000094

08007cf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e01f      	b.n	8007d4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	79fa      	ldrb	r2, [r7, #7]
 8007d3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f001 fdef 	bl	8009924 <USBD_LL_Init>
 8007d46:	4603      	mov	r3, r0
 8007d48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e025      	b.n	8007db8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	32ae      	adds	r2, #174	; 0xae
 8007d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00f      	beq.n	8007da8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	32ae      	adds	r2, #174	; 0xae
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	f107 020e 	add.w	r2, r7, #14
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	4602      	mov	r2, r0
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 fdf7 	bl	80099bc <USBD_LL_Start>
 8007dce:	4603      	mov	r3, r0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007de0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d009      	beq.n	8007e1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	78fa      	ldrb	r2, [r7, #3]
 8007e12:	4611      	mov	r1, r2
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	4611      	mov	r1, r2
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 f908 	bl	8009082 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e80:	461a      	mov	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e8e:	f003 031f 	and.w	r3, r3, #31
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d01a      	beq.n	8007ecc <USBD_LL_SetupStage+0x72>
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d822      	bhi.n	8007ee0 <USBD_LL_SetupStage+0x86>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <USBD_LL_SetupStage+0x4a>
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d00a      	beq.n	8007eb8 <USBD_LL_SetupStage+0x5e>
 8007ea2:	e01d      	b.n	8007ee0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fb5f 	bl	8008570 <USBD_StdDevReq>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb6:	e020      	b.n	8007efa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fbc7 	bl	8008654 <USBD_StdItfReq>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eca:	e016      	b.n	8007efa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fc29 	bl	800872c <USBD_StdEPReq>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ede:	e00c      	b.n	8007efa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ee6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fdc4 	bl	8009a7c <USBD_LL_StallEP>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef8:	bf00      	nop
  }

  return ret;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f16:	7afb      	ldrb	r3, [r7, #11]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d16e      	bne.n	8007ffa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	f040 8098 	bne.w	8008060 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d913      	bls.n	8007f64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	1ad2      	subs	r2, r2, r3
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	4293      	cmp	r3, r2
 8007f54:	bf28      	it	cs
 8007f56:	4613      	movcs	r3, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f001 f984 	bl	800926a <USBD_CtlContinueRx>
 8007f62:	e07d      	b.n	8008060 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f6a:	f003 031f 	and.w	r3, r3, #31
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d014      	beq.n	8007f9c <USBD_LL_DataOutStage+0x98>
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d81d      	bhi.n	8007fb2 <USBD_LL_DataOutStage+0xae>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <USBD_LL_DataOutStage+0x7c>
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d003      	beq.n	8007f86 <USBD_LL_DataOutStage+0x82>
 8007f7e:	e018      	b.n	8007fb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	75bb      	strb	r3, [r7, #22]
            break;
 8007f84:	e018      	b.n	8007fb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	4619      	mov	r1, r3
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fa5e 	bl	8008452 <USBD_CoreFindIF>
 8007f96:	4603      	mov	r3, r0
 8007f98:	75bb      	strb	r3, [r7, #22]
            break;
 8007f9a:	e00d      	b.n	8007fb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fa60 	bl	800846c <USBD_CoreFindEP>
 8007fac:	4603      	mov	r3, r0
 8007fae:	75bb      	strb	r3, [r7, #22]
            break;
 8007fb0:	e002      	b.n	8007fb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75bb      	strb	r3, [r7, #22]
            break;
 8007fb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007fb8:	7dbb      	ldrb	r3, [r7, #22]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d119      	bne.n	8007ff2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d113      	bne.n	8007ff2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007fca:	7dba      	ldrb	r2, [r7, #22]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	32ae      	adds	r2, #174	; 0xae
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007fda:	7dba      	ldrb	r2, [r7, #22]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007fe2:	7dba      	ldrb	r2, [r7, #22]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	32ae      	adds	r2, #174	; 0xae
 8007fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f001 f94a 	bl	800928c <USBD_CtlSendStatus>
 8007ff8:	e032      	b.n	8008060 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ffa:	7afb      	ldrb	r3, [r7, #11]
 8007ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008000:	b2db      	uxtb	r3, r3
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 fa31 	bl	800846c <USBD_CoreFindEP>
 800800a:	4603      	mov	r3, r0
 800800c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800800e:	7dbb      	ldrb	r3, [r7, #22]
 8008010:	2bff      	cmp	r3, #255	; 0xff
 8008012:	d025      	beq.n	8008060 <USBD_LL_DataOutStage+0x15c>
 8008014:	7dbb      	ldrb	r3, [r7, #22]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d122      	bne.n	8008060 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d117      	bne.n	8008056 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008026:	7dba      	ldrb	r2, [r7, #22]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	32ae      	adds	r2, #174	; 0xae
 800802c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00f      	beq.n	8008056 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008036:	7dba      	ldrb	r2, [r7, #22]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800803e:	7dba      	ldrb	r2, [r7, #22]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	32ae      	adds	r2, #174	; 0xae
 8008044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	7afa      	ldrb	r2, [r7, #11]
 800804c:	4611      	mov	r1, r2
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	4798      	blx	r3
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	e000      	b.n	8008062 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b086      	sub	sp, #24
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	460b      	mov	r3, r1
 8008074:	607a      	str	r2, [r7, #4]
 8008076:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008078:	7afb      	ldrb	r3, [r7, #11]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d16f      	bne.n	800815e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3314      	adds	r3, #20
 8008082:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800808a:	2b02      	cmp	r3, #2
 800808c:	d15a      	bne.n	8008144 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	429a      	cmp	r2, r3
 8008098:	d914      	bls.n	80080c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	461a      	mov	r2, r3
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f001 f8ac 	bl	800920e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080b6:	2300      	movs	r3, #0
 80080b8:	2200      	movs	r2, #0
 80080ba:	2100      	movs	r1, #0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f001 fd87 	bl	8009bd0 <USBD_LL_PrepareReceive>
 80080c2:	e03f      	b.n	8008144 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d11c      	bne.n	800810a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080d8:	429a      	cmp	r2, r3
 80080da:	d316      	bcc.n	800810a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d20f      	bcs.n	800810a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f001 f88d 	bl	800920e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080fc:	2300      	movs	r3, #0
 80080fe:	2200      	movs	r2, #0
 8008100:	2100      	movs	r1, #0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f001 fd64 	bl	8009bd0 <USBD_LL_PrepareReceive>
 8008108:	e01c      	b.n	8008144 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b03      	cmp	r3, #3
 8008114:	d10f      	bne.n	8008136 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f001 fc9f 	bl	8009a7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f001 f8b7 	bl	80092b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d03a      	beq.n	80081c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fe42 	bl	8007dd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800815c:	e032      	b.n	80081c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008164:	b2db      	uxtb	r3, r3
 8008166:	4619      	mov	r1, r3
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 f97f 	bl	800846c <USBD_CoreFindEP>
 800816e:	4603      	mov	r3, r0
 8008170:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	2bff      	cmp	r3, #255	; 0xff
 8008176:	d025      	beq.n	80081c4 <USBD_LL_DataInStage+0x15a>
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d122      	bne.n	80081c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b03      	cmp	r3, #3
 8008188:	d11c      	bne.n	80081c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800818a:	7dfa      	ldrb	r2, [r7, #23]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	32ae      	adds	r2, #174	; 0xae
 8008190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d014      	beq.n	80081c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800819a:	7dfa      	ldrb	r2, [r7, #23]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081a2:	7dfa      	ldrb	r2, [r7, #23]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	32ae      	adds	r2, #174	; 0xae
 80081a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	7afa      	ldrb	r2, [r7, #11]
 80081b0:	4611      	mov	r1, r2
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	4798      	blx	r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80081ba:	7dbb      	ldrb	r3, [r7, #22]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80081c0:	7dbb      	ldrb	r3, [r7, #22]
 80081c2:	e000      	b.n	80081c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008206:	2b00      	cmp	r3, #0
 8008208:	d014      	beq.n	8008234 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00e      	beq.n	8008234 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6852      	ldr	r2, [r2, #4]
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	4611      	mov	r1, r2
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	2200      	movs	r2, #0
 8008238:	2100      	movs	r1, #0
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fbd9 	bl	80099f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2240      	movs	r2, #64	; 0x40
 800824c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	2200      	movs	r2, #0
 8008254:	2180      	movs	r1, #128	; 0x80
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fbcb 	bl	80099f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2240      	movs	r2, #64	; 0x40
 8008266:	621a      	str	r2, [r3, #32]

  return ret;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2204      	movs	r2, #4
 80082ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d106      	bne.n	80082e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d110      	bne.n	8008324 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	32ae      	adds	r2, #174	; 0xae
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	e01c      	b.n	800838a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b03      	cmp	r3, #3
 800835a:	d115      	bne.n	8008388 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	32ae      	adds	r2, #174	; 0xae
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32ae      	adds	r2, #174	; 0xae
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	4611      	mov	r1, r2
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32ae      	adds	r2, #174	; 0xae
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e01c      	b.n	80083ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d115      	bne.n	80083ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	32ae      	adds	r2, #174	; 0xae
 80083ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32ae      	adds	r2, #174	; 0xae
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	4611      	mov	r1, r2
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00e      	beq.n	8008448 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6852      	ldr	r2, [r2, #4]
 8008436:	b2d2      	uxtb	r2, r2
 8008438:	4611      	mov	r1, r2
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	4798      	blx	r3
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	460b      	mov	r3, r1
 800845c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800845e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008478:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800847a:	4618      	mov	r0, r3
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	885b      	ldrh	r3, [r3, #2]
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d920      	bls.n	80084f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80084b6:	e013      	b.n	80084e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80084b8:	f107 030a 	add.w	r3, r7, #10
 80084bc:	4619      	mov	r1, r3
 80084be:	6978      	ldr	r0, [r7, #20]
 80084c0:	f000 f81b 	bl	80084fa <USBD_GetNextDesc>
 80084c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	2b05      	cmp	r3, #5
 80084cc:	d108      	bne.n	80084e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	789b      	ldrb	r3, [r3, #2]
 80084d6:	78fa      	ldrb	r2, [r7, #3]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d008      	beq.n	80084ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	885b      	ldrh	r3, [r3, #2]
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	897b      	ldrh	r3, [r7, #10]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d8e5      	bhi.n	80084b8 <USBD_GetEpDesc+0x32>
 80084ec:	e000      	b.n	80084f0 <USBD_GetEpDesc+0x6a>
          break;
 80084ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80084f0:	693b      	ldr	r3, [r7, #16]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b085      	sub	sp, #20
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	881a      	ldrh	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	4413      	add	r3, r2
 8008514:	b29a      	uxth	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008526:	68fb      	ldr	r3, [r7, #12]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	3301      	adds	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008552:	8a3b      	ldrh	r3, [r7, #16]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	b21a      	sxth	r2, r3
 8008558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800855c:	4313      	orrs	r3, r2
 800855e:	b21b      	sxth	r3, r3
 8008560:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008562:	89fb      	ldrh	r3, [r7, #14]
}
 8008564:	4618      	mov	r0, r3
 8008566:	371c      	adds	r7, #28
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d005      	beq.n	8008596 <USBD_StdDevReq+0x26>
 800858a:	2b40      	cmp	r3, #64	; 0x40
 800858c:	d857      	bhi.n	800863e <USBD_StdDevReq+0xce>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00f      	beq.n	80085b2 <USBD_StdDevReq+0x42>
 8008592:	2b20      	cmp	r3, #32
 8008594:	d153      	bne.n	800863e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	32ae      	adds	r2, #174	; 0xae
 80085a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
      break;
 80085b0:	e04a      	b.n	8008648 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b09      	cmp	r3, #9
 80085b8:	d83b      	bhi.n	8008632 <USBD_StdDevReq+0xc2>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <USBD_StdDevReq+0x50>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	08008615 	.word	0x08008615
 80085c4:	08008629 	.word	0x08008629
 80085c8:	08008633 	.word	0x08008633
 80085cc:	0800861f 	.word	0x0800861f
 80085d0:	08008633 	.word	0x08008633
 80085d4:	080085f3 	.word	0x080085f3
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	08008633 	.word	0x08008633
 80085e0:	0800860b 	.word	0x0800860b
 80085e4:	080085fd 	.word	0x080085fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa3c 	bl	8008a68 <USBD_GetDescriptor>
          break;
 80085f0:	e024      	b.n	800863c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fba1 	bl	8008d3c <USBD_SetAddress>
          break;
 80085fa:	e01f      	b.n	800863c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fbe0 	bl	8008dc4 <USBD_SetConfig>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
          break;
 8008608:	e018      	b.n	800863c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fc83 	bl	8008f18 <USBD_GetConfig>
          break;
 8008612:	e013      	b.n	800863c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fcb4 	bl	8008f84 <USBD_GetStatus>
          break;
 800861c:	e00e      	b.n	800863c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fce3 	bl	8008fec <USBD_SetFeature>
          break;
 8008626:	e009      	b.n	800863c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fd07 	bl	800903e <USBD_ClrFeature>
          break;
 8008630:	e004      	b.n	800863c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fd5e 	bl	80090f6 <USBD_CtlError>
          break;
 800863a:	bf00      	nop
      }
      break;
 800863c:	e004      	b.n	8008648 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fd58 	bl	80090f6 <USBD_CtlError>
      break;
 8008646:	bf00      	nop
  }

  return ret;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop

08008654 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800866a:	2b40      	cmp	r3, #64	; 0x40
 800866c:	d005      	beq.n	800867a <USBD_StdItfReq+0x26>
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	d852      	bhi.n	8008718 <USBD_StdItfReq+0xc4>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <USBD_StdItfReq+0x26>
 8008676:	2b20      	cmp	r3, #32
 8008678:	d14e      	bne.n	8008718 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008680:	b2db      	uxtb	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	2b02      	cmp	r3, #2
 8008686:	d840      	bhi.n	800870a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	889b      	ldrh	r3, [r3, #4]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b01      	cmp	r3, #1
 8008690:	d836      	bhi.n	8008700 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	889b      	ldrh	r3, [r3, #4]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fed9 	bl	8008452 <USBD_CoreFindIF>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2bff      	cmp	r3, #255	; 0xff
 80086a8:	d01d      	beq.n	80086e6 <USBD_StdItfReq+0x92>
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11a      	bne.n	80086e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80086b0:	7bba      	ldrb	r2, [r7, #14]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	32ae      	adds	r2, #174	; 0xae
 80086b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00f      	beq.n	80086e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80086c0:	7bba      	ldrb	r2, [r7, #14]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086c8:	7bba      	ldrb	r2, [r7, #14]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	32ae      	adds	r2, #174	; 0xae
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80086de:	e004      	b.n	80086ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80086e4:	e001      	b.n	80086ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80086e6:	2303      	movs	r3, #3
 80086e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88db      	ldrh	r3, [r3, #6]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d110      	bne.n	8008714 <USBD_StdItfReq+0xc0>
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10d      	bne.n	8008714 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fdc7 	bl	800928c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086fe:	e009      	b.n	8008714 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fcf7 	bl	80090f6 <USBD_CtlError>
          break;
 8008708:	e004      	b.n	8008714 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fcf2 	bl	80090f6 <USBD_CtlError>
          break;
 8008712:	e000      	b.n	8008716 <USBD_StdItfReq+0xc2>
          break;
 8008714:	bf00      	nop
      }
      break;
 8008716:	e004      	b.n	8008722 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fceb 	bl	80090f6 <USBD_CtlError>
      break;
 8008720:	bf00      	nop
  }

  return ret;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008748:	2b40      	cmp	r3, #64	; 0x40
 800874a:	d007      	beq.n	800875c <USBD_StdEPReq+0x30>
 800874c:	2b40      	cmp	r3, #64	; 0x40
 800874e:	f200 817f 	bhi.w	8008a50 <USBD_StdEPReq+0x324>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d02a      	beq.n	80087ac <USBD_StdEPReq+0x80>
 8008756:	2b20      	cmp	r3, #32
 8008758:	f040 817a 	bne.w	8008a50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fe83 	bl	800846c <USBD_CoreFindEP>
 8008766:	4603      	mov	r3, r0
 8008768:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800876a:	7b7b      	ldrb	r3, [r7, #13]
 800876c:	2bff      	cmp	r3, #255	; 0xff
 800876e:	f000 8174 	beq.w	8008a5a <USBD_StdEPReq+0x32e>
 8008772:	7b7b      	ldrb	r3, [r7, #13]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f040 8170 	bne.w	8008a5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800877a:	7b7a      	ldrb	r2, [r7, #13]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008782:	7b7a      	ldrb	r2, [r7, #13]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	32ae      	adds	r2, #174	; 0xae
 8008788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 8163 	beq.w	8008a5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008794:	7b7a      	ldrb	r2, [r7, #13]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	32ae      	adds	r2, #174	; 0xae
 800879a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	4798      	blx	r3
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087aa:	e156      	b.n	8008a5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d008      	beq.n	80087c6 <USBD_StdEPReq+0x9a>
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	f300 8145 	bgt.w	8008a44 <USBD_StdEPReq+0x318>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 809b 	beq.w	80088f6 <USBD_StdEPReq+0x1ca>
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d03c      	beq.n	800883e <USBD_StdEPReq+0x112>
 80087c4:	e13e      	b.n	8008a44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d002      	beq.n	80087d8 <USBD_StdEPReq+0xac>
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d016      	beq.n	8008804 <USBD_StdEPReq+0xd8>
 80087d6:	e02c      	b.n	8008832 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00d      	beq.n	80087fa <USBD_StdEPReq+0xce>
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b80      	cmp	r3, #128	; 0x80
 80087e2:	d00a      	beq.n	80087fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 f947 	bl	8009a7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 f943 	bl	8009a7c <USBD_LL_StallEP>
 80087f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087f8:	e020      	b.n	800883c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fc7a 	bl	80090f6 <USBD_CtlError>
              break;
 8008802:	e01b      	b.n	800883c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	885b      	ldrh	r3, [r3, #2]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10e      	bne.n	800882a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <USBD_StdEPReq+0xfe>
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b80      	cmp	r3, #128	; 0x80
 8008816:	d008      	beq.n	800882a <USBD_StdEPReq+0xfe>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	88db      	ldrh	r3, [r3, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f001 f929 	bl	8009a7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fd2e 	bl	800928c <USBD_CtlSendStatus>

              break;
 8008830:	e004      	b.n	800883c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fc5e 	bl	80090f6 <USBD_CtlError>
              break;
 800883a:	bf00      	nop
          }
          break;
 800883c:	e107      	b.n	8008a4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d002      	beq.n	8008850 <USBD_StdEPReq+0x124>
 800884a:	2b03      	cmp	r3, #3
 800884c:	d016      	beq.n	800887c <USBD_StdEPReq+0x150>
 800884e:	e04b      	b.n	80088e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008850:	7bbb      	ldrb	r3, [r7, #14]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00d      	beq.n	8008872 <USBD_StdEPReq+0x146>
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b80      	cmp	r3, #128	; 0x80
 800885a:	d00a      	beq.n	8008872 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 f90b 	bl	8009a7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008866:	2180      	movs	r1, #128	; 0x80
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 f907 	bl	8009a7c <USBD_LL_StallEP>
 800886e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008870:	e040      	b.n	80088f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fc3e 	bl	80090f6 <USBD_CtlError>
              break;
 800887a:	e03b      	b.n	80088f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	885b      	ldrh	r3, [r3, #2]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d136      	bne.n	80088f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888a:	2b00      	cmp	r3, #0
 800888c:	d004      	beq.n	8008898 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 f911 	bl	8009aba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fcf7 	bl	800928c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff fde2 	bl	800846c <USBD_CoreFindEP>
 80088a8:	4603      	mov	r3, r0
 80088aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088ac:	7b7b      	ldrb	r3, [r7, #13]
 80088ae:	2bff      	cmp	r3, #255	; 0xff
 80088b0:	d01f      	beq.n	80088f2 <USBD_StdEPReq+0x1c6>
 80088b2:	7b7b      	ldrb	r3, [r7, #13]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d11c      	bne.n	80088f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80088b8:	7b7a      	ldrb	r2, [r7, #13]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80088c0:	7b7a      	ldrb	r2, [r7, #13]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	32ae      	adds	r2, #174	; 0xae
 80088c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d010      	beq.n	80088f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088d0:	7b7a      	ldrb	r2, [r7, #13]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	32ae      	adds	r2, #174	; 0xae
 80088d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80088e6:	e004      	b.n	80088f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fc03 	bl	80090f6 <USBD_CtlError>
              break;
 80088f0:	e000      	b.n	80088f4 <USBD_StdEPReq+0x1c8>
              break;
 80088f2:	bf00      	nop
          }
          break;
 80088f4:	e0ab      	b.n	8008a4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d002      	beq.n	8008908 <USBD_StdEPReq+0x1dc>
 8008902:	2b03      	cmp	r3, #3
 8008904:	d032      	beq.n	800896c <USBD_StdEPReq+0x240>
 8008906:	e097      	b.n	8008a38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <USBD_StdEPReq+0x1f2>
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b80      	cmp	r3, #128	; 0x80
 8008912:	d004      	beq.n	800891e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fbed 	bl	80090f6 <USBD_CtlError>
                break;
 800891c:	e091      	b.n	8008a42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800891e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008922:	2b00      	cmp	r3, #0
 8008924:	da0b      	bge.n	800893e <USBD_StdEPReq+0x212>
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	3310      	adds	r3, #16
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	3304      	adds	r3, #4
 800893c:	e00b      	b.n	8008956 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	4413      	add	r3, r2
 8008954:	3304      	adds	r3, #4
 8008956:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2202      	movs	r2, #2
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fc37 	bl	80091d8 <USBD_CtlSendData>
              break;
 800896a:	e06a      	b.n	8008a42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800896c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008970:	2b00      	cmp	r3, #0
 8008972:	da11      	bge.n	8008998 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	f003 020f 	and.w	r2, r3, #15
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	440b      	add	r3, r1
 8008986:	3324      	adds	r3, #36	; 0x24
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d117      	bne.n	80089be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fbb0 	bl	80090f6 <USBD_CtlError>
                  break;
 8008996:	e054      	b.n	8008a42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	f003 020f 	and.w	r2, r3, #15
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fb9d 	bl	80090f6 <USBD_CtlError>
                  break;
 80089bc:	e041      	b.n	8008a42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	da0b      	bge.n	80089de <USBD_StdEPReq+0x2b2>
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	3310      	adds	r3, #16
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	4413      	add	r3, r2
 80089da:	3304      	adds	r3, #4
 80089dc:	e00b      	b.n	80089f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	3304      	adds	r3, #4
 80089f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <USBD_StdEPReq+0x2d8>
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
 8008a00:	2b80      	cmp	r3, #128	; 0x80
 8008a02:	d103      	bne.n	8008a0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e00e      	b.n	8008a2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 f871 	bl	8009af8 <USBD_LL_IsStallEP>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	e002      	b.n	8008a2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2200      	movs	r2, #0
 8008a28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fbd1 	bl	80091d8 <USBD_CtlSendData>
              break;
 8008a36:	e004      	b.n	8008a42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fb5b 	bl	80090f6 <USBD_CtlError>
              break;
 8008a40:	bf00      	nop
          }
          break;
 8008a42:	e004      	b.n	8008a4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fb55 	bl	80090f6 <USBD_CtlError>
          break;
 8008a4c:	bf00      	nop
      }
      break;
 8008a4e:	e005      	b.n	8008a5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fb4f 	bl	80090f6 <USBD_CtlError>
      break;
 8008a58:	e000      	b.n	8008a5c <USBD_StdEPReq+0x330>
      break;
 8008a5a:	bf00      	nop
  }

  return ret;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	885b      	ldrh	r3, [r3, #2]
 8008a82:	0a1b      	lsrs	r3, r3, #8
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	3b01      	subs	r3, #1
 8008a88:	2b06      	cmp	r3, #6
 8008a8a:	f200 8128 	bhi.w	8008cde <USBD_GetDescriptor+0x276>
 8008a8e:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <USBD_GetDescriptor+0x2c>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008ab1 	.word	0x08008ab1
 8008a98:	08008ac9 	.word	0x08008ac9
 8008a9c:	08008b09 	.word	0x08008b09
 8008aa0:	08008cdf 	.word	0x08008cdf
 8008aa4:	08008cdf 	.word	0x08008cdf
 8008aa8:	08008c7f 	.word	0x08008c7f
 8008aac:	08008cab 	.word	0x08008cab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	7c12      	ldrb	r2, [r2, #16]
 8008abc:	f107 0108 	add.w	r1, r7, #8
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4798      	blx	r3
 8008ac4:	60f8      	str	r0, [r7, #12]
      break;
 8008ac6:	e112      	b.n	8008cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	7c1b      	ldrb	r3, [r3, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10d      	bne.n	8008aec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	f107 0208 	add.w	r2, r7, #8
 8008adc:	4610      	mov	r0, r2
 8008ade:	4798      	blx	r3
 8008ae0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008aea:	e100      	b.n	8008cee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	f107 0208 	add.w	r2, r7, #8
 8008af8:	4610      	mov	r0, r2
 8008afa:	4798      	blx	r3
 8008afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	2202      	movs	r2, #2
 8008b04:	701a      	strb	r2, [r3, #0]
      break;
 8008b06:	e0f2      	b.n	8008cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	885b      	ldrh	r3, [r3, #2]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b05      	cmp	r3, #5
 8008b10:	f200 80ac 	bhi.w	8008c6c <USBD_GetDescriptor+0x204>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <USBD_GetDescriptor+0xb4>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b35 	.word	0x08008b35
 8008b20:	08008b69 	.word	0x08008b69
 8008b24:	08008b9d 	.word	0x08008b9d
 8008b28:	08008bd1 	.word	0x08008bd1
 8008b2c:	08008c05 	.word	0x08008c05
 8008b30:	08008c39 	.word	0x08008c39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	7c12      	ldrb	r2, [r2, #16]
 8008b4c:	f107 0108 	add.w	r1, r7, #8
 8008b50:	4610      	mov	r0, r2
 8008b52:	4798      	blx	r3
 8008b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b56:	e091      	b.n	8008c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 facb 	bl	80090f6 <USBD_CtlError>
            err++;
 8008b60:	7afb      	ldrb	r3, [r7, #11]
 8008b62:	3301      	adds	r3, #1
 8008b64:	72fb      	strb	r3, [r7, #11]
          break;
 8008b66:	e089      	b.n	8008c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00b      	beq.n	8008b8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	7c12      	ldrb	r2, [r2, #16]
 8008b80:	f107 0108 	add.w	r1, r7, #8
 8008b84:	4610      	mov	r0, r2
 8008b86:	4798      	blx	r3
 8008b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b8a:	e077      	b.n	8008c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fab1 	bl	80090f6 <USBD_CtlError>
            err++;
 8008b94:	7afb      	ldrb	r3, [r7, #11]
 8008b96:	3301      	adds	r3, #1
 8008b98:	72fb      	strb	r3, [r7, #11]
          break;
 8008b9a:	e06f      	b.n	8008c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00b      	beq.n	8008bc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	7c12      	ldrb	r2, [r2, #16]
 8008bb4:	f107 0108 	add.w	r1, r7, #8
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4798      	blx	r3
 8008bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bbe:	e05d      	b.n	8008c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa97 	bl	80090f6 <USBD_CtlError>
            err++;
 8008bc8:	7afb      	ldrb	r3, [r7, #11]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008bce:	e055      	b.n	8008c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	7c12      	ldrb	r2, [r2, #16]
 8008be8:	f107 0108 	add.w	r1, r7, #8
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
 8008bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bf2:	e043      	b.n	8008c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa7d 	bl	80090f6 <USBD_CtlError>
            err++;
 8008bfc:	7afb      	ldrb	r3, [r7, #11]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	72fb      	strb	r3, [r7, #11]
          break;
 8008c02:	e03b      	b.n	8008c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	7c12      	ldrb	r2, [r2, #16]
 8008c1c:	f107 0108 	add.w	r1, r7, #8
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c26:	e029      	b.n	8008c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fa63 	bl	80090f6 <USBD_CtlError>
            err++;
 8008c30:	7afb      	ldrb	r3, [r7, #11]
 8008c32:	3301      	adds	r3, #1
 8008c34:	72fb      	strb	r3, [r7, #11]
          break;
 8008c36:	e021      	b.n	8008c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	7c12      	ldrb	r2, [r2, #16]
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
 8008c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c5a:	e00f      	b.n	8008c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa49 	bl	80090f6 <USBD_CtlError>
            err++;
 8008c64:	7afb      	ldrb	r3, [r7, #11]
 8008c66:	3301      	adds	r3, #1
 8008c68:	72fb      	strb	r3, [r7, #11]
          break;
 8008c6a:	e007      	b.n	8008c7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa41 	bl	80090f6 <USBD_CtlError>
          err++;
 8008c74:	7afb      	ldrb	r3, [r7, #11]
 8008c76:	3301      	adds	r3, #1
 8008c78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c7a:	bf00      	nop
      }
      break;
 8008c7c:	e037      	b.n	8008cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	7c1b      	ldrb	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d109      	bne.n	8008c9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	f107 0208 	add.w	r2, r7, #8
 8008c92:	4610      	mov	r0, r2
 8008c94:	4798      	blx	r3
 8008c96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c98:	e029      	b.n	8008cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fa2a 	bl	80090f6 <USBD_CtlError>
        err++;
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ca8:	e021      	b.n	8008cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	7c1b      	ldrb	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10d      	bne.n	8008cce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	f107 0208 	add.w	r2, r7, #8
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	4798      	blx	r3
 8008cc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	2207      	movs	r2, #7
 8008cca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ccc:	e00f      	b.n	8008cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fa10 	bl	80090f6 <USBD_CtlError>
        err++;
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	72fb      	strb	r3, [r7, #11]
      break;
 8008cdc:	e007      	b.n	8008cee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fa08 	bl	80090f6 <USBD_CtlError>
      err++;
 8008ce6:	7afb      	ldrb	r3, [r7, #11]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	72fb      	strb	r3, [r7, #11]
      break;
 8008cec:	bf00      	nop
  }

  if (err != 0U)
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11e      	bne.n	8008d32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	88db      	ldrh	r3, [r3, #6]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d016      	beq.n	8008d2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008cfc:	893b      	ldrh	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00e      	beq.n	8008d20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	88da      	ldrh	r2, [r3, #6]
 8008d06:	893b      	ldrh	r3, [r7, #8]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bf28      	it	cs
 8008d0c:	4613      	movcs	r3, r2
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d12:	893b      	ldrh	r3, [r7, #8]
 8008d14:	461a      	mov	r2, r3
 8008d16:	68f9      	ldr	r1, [r7, #12]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fa5d 	bl	80091d8 <USBD_CtlSendData>
 8008d1e:	e009      	b.n	8008d34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f9e7 	bl	80090f6 <USBD_CtlError>
 8008d28:	e004      	b.n	8008d34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 faae 	bl	800928c <USBD_CtlSendStatus>
 8008d30:	e000      	b.n	8008d34 <USBD_GetDescriptor+0x2cc>
    return;
 8008d32:	bf00      	nop
  }
}
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop

08008d3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	889b      	ldrh	r3, [r3, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d131      	bne.n	8008db2 <USBD_SetAddress+0x76>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	88db      	ldrh	r3, [r3, #6]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d12d      	bne.n	8008db2 <USBD_SetAddress+0x76>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	885b      	ldrh	r3, [r3, #2]
 8008d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8008d5c:	d829      	bhi.n	8008db2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	885b      	ldrh	r3, [r3, #2]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d104      	bne.n	8008d80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f9bc 	bl	80090f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7e:	e01d      	b.n	8008dbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	7bfa      	ldrb	r2, [r7, #15]
 8008d84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fedf 	bl	8009b50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa7a 	bl	800928c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2202      	movs	r2, #2
 8008da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da6:	e009      	b.n	8008dbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db0:	e004      	b.n	8008dbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f99e 	bl	80090f6 <USBD_CtlError>
  }
}
 8008dba:	bf00      	nop
 8008dbc:	bf00      	nop
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	885b      	ldrh	r3, [r3, #2]
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	4b4e      	ldr	r3, [pc, #312]	; (8008f14 <USBD_SetConfig+0x150>)
 8008dda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ddc:	4b4d      	ldr	r3, [pc, #308]	; (8008f14 <USBD_SetConfig+0x150>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d905      	bls.n	8008df0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f985 	bl	80090f6 <USBD_CtlError>
    return USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e08c      	b.n	8008f0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d002      	beq.n	8008e02 <USBD_SetConfig+0x3e>
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d029      	beq.n	8008e54 <USBD_SetConfig+0x90>
 8008e00:	e075      	b.n	8008eee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e02:	4b44      	ldr	r3, [pc, #272]	; (8008f14 <USBD_SetConfig+0x150>)
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d020      	beq.n	8008e4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e0a:	4b42      	ldr	r3, [pc, #264]	; (8008f14 <USBD_SetConfig+0x150>)
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e14:	4b3f      	ldr	r3, [pc, #252]	; (8008f14 <USBD_SetConfig+0x150>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7fe ffe7 	bl	8007dee <USBD_SetClassConfig>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d008      	beq.n	8008e3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f962 	bl	80090f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e3a:	e065      	b.n	8008f08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fa25 	bl	800928c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2203      	movs	r2, #3
 8008e46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e4a:	e05d      	b.n	8008f08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa1d 	bl	800928c <USBD_CtlSendStatus>
      break;
 8008e52:	e059      	b.n	8008f08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e54:	4b2f      	ldr	r3, [pc, #188]	; (8008f14 <USBD_SetConfig+0x150>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d112      	bne.n	8008e82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e64:	4b2b      	ldr	r3, [pc, #172]	; (8008f14 <USBD_SetConfig+0x150>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e6e:	4b29      	ldr	r3, [pc, #164]	; (8008f14 <USBD_SetConfig+0x150>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7fe ffd6 	bl	8007e26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa06 	bl	800928c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e80:	e042      	b.n	8008f08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <USBD_SetConfig+0x150>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d02a      	beq.n	8008ee6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7fe ffc4 	bl	8007e26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008e9e:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <USBD_SetConfig+0x150>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ea8:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <USBD_SetConfig+0x150>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fe ff9d 	bl	8007dee <USBD_SetClassConfig>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00f      	beq.n	8008ede <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f918 	bl	80090f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7fe ffa9 	bl	8007e26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008edc:	e014      	b.n	8008f08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f9d4 	bl	800928c <USBD_CtlSendStatus>
      break;
 8008ee4:	e010      	b.n	8008f08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f9d0 	bl	800928c <USBD_CtlSendStatus>
      break;
 8008eec:	e00c      	b.n	8008f08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f900 	bl	80090f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ef6:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <USBD_SetConfig+0x150>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7fe ff92 	bl	8007e26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	73fb      	strb	r3, [r7, #15]
      break;
 8008f06:	bf00      	nop
  }

  return ret;
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200042c0 	.word	0x200042c0

08008f18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	88db      	ldrh	r3, [r3, #6]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d004      	beq.n	8008f34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f8e2 	bl	80090f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f32:	e023      	b.n	8008f7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	dc02      	bgt.n	8008f46 <USBD_GetConfig+0x2e>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dc03      	bgt.n	8008f4c <USBD_GetConfig+0x34>
 8008f44:	e015      	b.n	8008f72 <USBD_GetConfig+0x5a>
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d00b      	beq.n	8008f62 <USBD_GetConfig+0x4a>
 8008f4a:	e012      	b.n	8008f72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3308      	adds	r3, #8
 8008f56:	2201      	movs	r2, #1
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f93c 	bl	80091d8 <USBD_CtlSendData>
        break;
 8008f60:	e00c      	b.n	8008f7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3304      	adds	r3, #4
 8008f66:	2201      	movs	r2, #1
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f934 	bl	80091d8 <USBD_CtlSendData>
        break;
 8008f70:	e004      	b.n	8008f7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f8be 	bl	80090f6 <USBD_CtlError>
        break;
 8008f7a:	bf00      	nop
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	3b01      	subs	r3, #1
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d81e      	bhi.n	8008fda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	88db      	ldrh	r3, [r3, #6]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d004      	beq.n	8008fae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f8a5 	bl	80090f6 <USBD_CtlError>
        break;
 8008fac:	e01a      	b.n	8008fe4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d005      	beq.n	8008fca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f043 0202 	orr.w	r2, r3, #2
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	330c      	adds	r3, #12
 8008fce:	2202      	movs	r2, #2
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f900 	bl	80091d8 <USBD_CtlSendData>
      break;
 8008fd8:	e004      	b.n	8008fe4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f88a 	bl	80090f6 <USBD_CtlError>
      break;
 8008fe2:	bf00      	nop
  }
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	885b      	ldrh	r3, [r3, #2]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d107      	bne.n	800900e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f940 	bl	800928c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800900c:	e013      	b.n	8009036 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d10b      	bne.n	800902e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	889b      	ldrh	r3, [r3, #4]
 800901a:	0a1b      	lsrs	r3, r3, #8
 800901c:	b29b      	uxth	r3, r3
 800901e:	b2da      	uxtb	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f930 	bl	800928c <USBD_CtlSendStatus>
}
 800902c:	e003      	b.n	8009036 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f860 	bl	80090f6 <USBD_CtlError>
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	3b01      	subs	r3, #1
 8009052:	2b02      	cmp	r3, #2
 8009054:	d80b      	bhi.n	800906e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	885b      	ldrh	r3, [r3, #2]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d10c      	bne.n	8009078 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f910 	bl	800928c <USBD_CtlSendStatus>
      }
      break;
 800906c:	e004      	b.n	8009078 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f840 	bl	80090f6 <USBD_CtlError>
      break;
 8009076:	e000      	b.n	800907a <USBD_ClrFeature+0x3c>
      break;
 8009078:	bf00      	nop
  }
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3301      	adds	r3, #1
 800909c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3301      	adds	r3, #1
 80090aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f7ff fa41 	bl	8008534 <SWAPBYTE>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff fa34 	bl	8008534 <SWAPBYTE>
 80090cc:	4603      	mov	r3, r0
 80090ce:	461a      	mov	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3301      	adds	r3, #1
 80090d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7ff fa27 	bl	8008534 <SWAPBYTE>
 80090e6:	4603      	mov	r3, r0
 80090e8:	461a      	mov	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	80da      	strh	r2, [r3, #6]
}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009100:	2180      	movs	r1, #128	; 0x80
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fcba 	bl	8009a7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009108:	2100      	movs	r1, #0
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fcb6 	bl	8009a7c <USBD_LL_StallEP>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009124:	2300      	movs	r3, #0
 8009126:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d036      	beq.n	800919c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009132:	6938      	ldr	r0, [r7, #16]
 8009134:	f000 f836 	bl	80091a4 <USBD_GetLen>
 8009138:	4603      	mov	r3, r0
 800913a:	3301      	adds	r3, #1
 800913c:	b29b      	uxth	r3, r3
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	b29a      	uxth	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	4413      	add	r3, r2
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	7812      	ldrb	r2, [r2, #0]
 8009150:	701a      	strb	r2, [r3, #0]
  idx++;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	3301      	adds	r3, #1
 8009156:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	4413      	add	r3, r2
 800915e:	2203      	movs	r2, #3
 8009160:	701a      	strb	r2, [r3, #0]
  idx++;
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	3301      	adds	r3, #1
 8009166:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009168:	e013      	b.n	8009192 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	4413      	add	r3, r2
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	3301      	adds	r3, #1
 800917a:	613b      	str	r3, [r7, #16]
    idx++;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	3301      	adds	r3, #1
 8009180:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	4413      	add	r3, r2
 8009188:	2200      	movs	r2, #0
 800918a:	701a      	strb	r2, [r3, #0]
    idx++;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	3301      	adds	r3, #1
 8009190:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e7      	bne.n	800916a <USBD_GetString+0x52>
 800919a:	e000      	b.n	800919e <USBD_GetString+0x86>
    return;
 800919c:	bf00      	nop
  }
}
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091b4:	e005      	b.n	80091c2 <USBD_GetLen+0x1e>
  {
    len++;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	3301      	adds	r3, #1
 80091ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	3301      	adds	r3, #1
 80091c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f5      	bne.n	80091b6 <USBD_GetLen+0x12>
  }

  return len;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	2100      	movs	r1, #0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 fcc5 	bl	8009b8e <USBD_LL_Transmit>

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	2100      	movs	r1, #0
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 fcb4 	bl	8009b8e <USBD_LL_Transmit>

  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2203      	movs	r2, #3
 8009240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	2100      	movs	r1, #0
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fcb8 	bl	8009bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	2100      	movs	r1, #0
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fca7 	bl	8009bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2204      	movs	r2, #4
 8009298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800929c:	2300      	movs	r3, #0
 800929e:	2200      	movs	r2, #0
 80092a0:	2100      	movs	r1, #0
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fc73 	bl	8009b8e <USBD_LL_Transmit>

  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2205      	movs	r2, #5
 80092be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092c2:	2300      	movs	r3, #0
 80092c4:	2200      	movs	r2, #0
 80092c6:	2100      	movs	r1, #0
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fc81 	bl	8009bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092dc:	2200      	movs	r2, #0
 80092de:	4912      	ldr	r1, [pc, #72]	; (8009328 <MX_USB_DEVICE_Init+0x50>)
 80092e0:	4812      	ldr	r0, [pc, #72]	; (800932c <MX_USB_DEVICE_Init+0x54>)
 80092e2:	f7fe fd07 	bl	8007cf4 <USBD_Init>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80092ec:	f7f7 fcdc 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80092f0:	490f      	ldr	r1, [pc, #60]	; (8009330 <MX_USB_DEVICE_Init+0x58>)
 80092f2:	480e      	ldr	r0, [pc, #56]	; (800932c <MX_USB_DEVICE_Init+0x54>)
 80092f4:	f7fe fd2e 	bl	8007d54 <USBD_RegisterClass>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80092fe:	f7f7 fcd3 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009302:	490c      	ldr	r1, [pc, #48]	; (8009334 <MX_USB_DEVICE_Init+0x5c>)
 8009304:	4809      	ldr	r0, [pc, #36]	; (800932c <MX_USB_DEVICE_Init+0x54>)
 8009306:	f7fe fc65 	bl	8007bd4 <USBD_CDC_RegisterInterface>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009310:	f7f7 fcca 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009314:	4805      	ldr	r0, [pc, #20]	; (800932c <MX_USB_DEVICE_Init+0x54>)
 8009316:	f7fe fd53 	bl	8007dc0 <USBD_Start>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009320:	f7f7 fcc2 	bl	8000ca8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009324:	bf00      	nop
 8009326:	bd80      	pop	{r7, pc}
 8009328:	200000ac 	.word	0x200000ac
 800932c:	200042c4 	.word	0x200042c4
 8009330:	20000018 	.word	0x20000018
 8009334:	20000098 	.word	0x20000098

08009338 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800933c:	2200      	movs	r2, #0
 800933e:	4905      	ldr	r1, [pc, #20]	; (8009354 <CDC_Init_FS+0x1c>)
 8009340:	4805      	ldr	r0, [pc, #20]	; (8009358 <CDC_Init_FS+0x20>)
 8009342:	f7fe fc61 	bl	8007c08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009346:	4905      	ldr	r1, [pc, #20]	; (800935c <CDC_Init_FS+0x24>)
 8009348:	4803      	ldr	r0, [pc, #12]	; (8009358 <CDC_Init_FS+0x20>)
 800934a:	f7fe fc7f 	bl	8007c4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800934e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009350:	4618      	mov	r0, r3
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20004da0 	.word	0x20004da0
 8009358:	200042c4 	.word	0x200042c4
 800935c:	200045a0 	.word	0x200045a0

08009360 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009360:	b480      	push	{r7}
 8009362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009364:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009366:	4618      	mov	r0, r3
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	6039      	str	r1, [r7, #0]
 800937a:	71fb      	strb	r3, [r7, #7]
 800937c:	4613      	mov	r3, r2
 800937e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2b23      	cmp	r3, #35	; 0x23
 8009384:	d84a      	bhi.n	800941c <CDC_Control_FS+0xac>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <CDC_Control_FS+0x1c>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	0800941d 	.word	0x0800941d
 8009390:	0800941d 	.word	0x0800941d
 8009394:	0800941d 	.word	0x0800941d
 8009398:	0800941d 	.word	0x0800941d
 800939c:	0800941d 	.word	0x0800941d
 80093a0:	0800941d 	.word	0x0800941d
 80093a4:	0800941d 	.word	0x0800941d
 80093a8:	0800941d 	.word	0x0800941d
 80093ac:	0800941d 	.word	0x0800941d
 80093b0:	0800941d 	.word	0x0800941d
 80093b4:	0800941d 	.word	0x0800941d
 80093b8:	0800941d 	.word	0x0800941d
 80093bc:	0800941d 	.word	0x0800941d
 80093c0:	0800941d 	.word	0x0800941d
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	0800941d 	.word	0x0800941d
 80093cc:	0800941d 	.word	0x0800941d
 80093d0:	0800941d 	.word	0x0800941d
 80093d4:	0800941d 	.word	0x0800941d
 80093d8:	0800941d 	.word	0x0800941d
 80093dc:	0800941d 	.word	0x0800941d
 80093e0:	0800941d 	.word	0x0800941d
 80093e4:	0800941d 	.word	0x0800941d
 80093e8:	0800941d 	.word	0x0800941d
 80093ec:	0800941d 	.word	0x0800941d
 80093f0:	0800941d 	.word	0x0800941d
 80093f4:	0800941d 	.word	0x0800941d
 80093f8:	0800941d 	.word	0x0800941d
 80093fc:	0800941d 	.word	0x0800941d
 8009400:	0800941d 	.word	0x0800941d
 8009404:	0800941d 	.word	0x0800941d
 8009408:	0800941d 	.word	0x0800941d
 800940c:	0800941d 	.word	0x0800941d
 8009410:	0800941d 	.word	0x0800941d
 8009414:	0800941d 	.word	0x0800941d
 8009418:	0800941d 	.word	0x0800941d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800941c:	bf00      	nop
  }

  return (USBD_OK);
 800941e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4805      	ldr	r0, [pc, #20]	; (8009450 <CDC_Receive_FS+0x24>)
 800943a:	f7fe fc07 	bl	8007c4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800943e:	4804      	ldr	r0, [pc, #16]	; (8009450 <CDC_Receive_FS+0x24>)
 8009440:	f7fe fc22 	bl	8007c88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009444:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	200042c4 	.word	0x200042c4

08009454 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4613      	mov	r3, r2
 8009460:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800946a:	4618      	mov	r0, r3
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
	...

08009478 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	6039      	str	r1, [r7, #0]
 8009482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2212      	movs	r2, #18
 8009488:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800948a:	4b03      	ldr	r3, [pc, #12]	; (8009498 <USBD_FS_DeviceDescriptor+0x20>)
}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	200000c8 	.word	0x200000c8

0800949c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	6039      	str	r1, [r7, #0]
 80094a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2204      	movs	r2, #4
 80094ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094ae:	4b03      	ldr	r3, [pc, #12]	; (80094bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	200000dc 	.word	0x200000dc

080094c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	6039      	str	r1, [r7, #0]
 80094ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4907      	ldr	r1, [pc, #28]	; (80094f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80094d6:	4808      	ldr	r0, [pc, #32]	; (80094f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80094d8:	f7ff fe1e 	bl	8009118 <USBD_GetString>
 80094dc:	e004      	b.n	80094e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	4904      	ldr	r1, [pc, #16]	; (80094f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80094e2:	4805      	ldr	r0, [pc, #20]	; (80094f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80094e4:	f7ff fe18 	bl	8009118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e8:	4b02      	ldr	r3, [pc, #8]	; (80094f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	200055a0 	.word	0x200055a0
 80094f8:	0800a628 	.word	0x0800a628

080094fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	6039      	str	r1, [r7, #0]
 8009506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	4904      	ldr	r1, [pc, #16]	; (800951c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800950c:	4804      	ldr	r0, [pc, #16]	; (8009520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800950e:	f7ff fe03 	bl	8009118 <USBD_GetString>
  return USBD_StrDesc;
 8009512:	4b02      	ldr	r3, [pc, #8]	; (800951c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009514:	4618      	mov	r0, r3
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	200055a0 	.word	0x200055a0
 8009520:	0800a63c 	.word	0x0800a63c

08009524 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	221a      	movs	r2, #26
 8009534:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009536:	f000 f843 	bl	80095c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800953a:	4b02      	ldr	r3, [pc, #8]	; (8009544 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	200000e0 	.word	0x200000e0

08009548 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	6039      	str	r1, [r7, #0]
 8009552:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d105      	bne.n	8009566 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	4907      	ldr	r1, [pc, #28]	; (800957c <USBD_FS_ConfigStrDescriptor+0x34>)
 800955e:	4808      	ldr	r0, [pc, #32]	; (8009580 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009560:	f7ff fdda 	bl	8009118 <USBD_GetString>
 8009564:	e004      	b.n	8009570 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	4904      	ldr	r1, [pc, #16]	; (800957c <USBD_FS_ConfigStrDescriptor+0x34>)
 800956a:	4805      	ldr	r0, [pc, #20]	; (8009580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800956c:	f7ff fdd4 	bl	8009118 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009570:	4b02      	ldr	r3, [pc, #8]	; (800957c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	200055a0 	.word	0x200055a0
 8009580:	0800a650 	.word	0x0800a650

08009584 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	6039      	str	r1, [r7, #0]
 800958e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d105      	bne.n	80095a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	4907      	ldr	r1, [pc, #28]	; (80095b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800959a:	4808      	ldr	r0, [pc, #32]	; (80095bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800959c:	f7ff fdbc 	bl	8009118 <USBD_GetString>
 80095a0:	e004      	b.n	80095ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	4904      	ldr	r1, [pc, #16]	; (80095b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095a6:	4805      	ldr	r0, [pc, #20]	; (80095bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095a8:	f7ff fdb6 	bl	8009118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095ac:	4b02      	ldr	r3, [pc, #8]	; (80095b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200055a0 	.word	0x200055a0
 80095bc:	0800a65c 	.word	0x0800a65c

080095c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <Get_SerialNum+0x44>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095cc:	4b0e      	ldr	r3, [pc, #56]	; (8009608 <Get_SerialNum+0x48>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095d2:	4b0e      	ldr	r3, [pc, #56]	; (800960c <Get_SerialNum+0x4c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095e6:	2208      	movs	r2, #8
 80095e8:	4909      	ldr	r1, [pc, #36]	; (8009610 <Get_SerialNum+0x50>)
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 f814 	bl	8009618 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095f0:	2204      	movs	r2, #4
 80095f2:	4908      	ldr	r1, [pc, #32]	; (8009614 <Get_SerialNum+0x54>)
 80095f4:	68b8      	ldr	r0, [r7, #8]
 80095f6:	f000 f80f 	bl	8009618 <IntToUnicode>
  }
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	1fff7a10 	.word	0x1fff7a10
 8009608:	1fff7a14 	.word	0x1fff7a14
 800960c:	1fff7a18 	.word	0x1fff7a18
 8009610:	200000e2 	.word	0x200000e2
 8009614:	200000f2 	.word	0x200000f2

08009618 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	4613      	mov	r3, r2
 8009624:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800962a:	2300      	movs	r3, #0
 800962c:	75fb      	strb	r3, [r7, #23]
 800962e:	e027      	b.n	8009680 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	0f1b      	lsrs	r3, r3, #28
 8009634:	2b09      	cmp	r3, #9
 8009636:	d80b      	bhi.n	8009650 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	0f1b      	lsrs	r3, r3, #28
 800963c:	b2da      	uxtb	r2, r3
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	4619      	mov	r1, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	440b      	add	r3, r1
 8009648:	3230      	adds	r2, #48	; 0x30
 800964a:	b2d2      	uxtb	r2, r2
 800964c:	701a      	strb	r2, [r3, #0]
 800964e:	e00a      	b.n	8009666 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	0f1b      	lsrs	r3, r3, #28
 8009654:	b2da      	uxtb	r2, r3
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	4619      	mov	r1, r3
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	440b      	add	r3, r1
 8009660:	3237      	adds	r2, #55	; 0x37
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	011b      	lsls	r3, r3, #4
 800966a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	005b      	lsls	r3, r3, #1
 8009670:	3301      	adds	r3, #1
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4413      	add	r3, r2
 8009676:	2200      	movs	r2, #0
 8009678:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	3301      	adds	r3, #1
 800967e:	75fb      	strb	r3, [r7, #23]
 8009680:	7dfa      	ldrb	r2, [r7, #23]
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	429a      	cmp	r2, r3
 8009686:	d3d3      	bcc.n	8009630 <IntToUnicode+0x18>
  }
}
 8009688:	bf00      	nop
 800968a:	bf00      	nop
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
	...

08009698 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	; 0x28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096a0:	f107 0314 	add.w	r3, r7, #20
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	605a      	str	r2, [r3, #4]
 80096aa:	609a      	str	r2, [r3, #8]
 80096ac:	60da      	str	r2, [r3, #12]
 80096ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096b8:	d13a      	bne.n	8009730 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ba:	2300      	movs	r3, #0
 80096bc:	613b      	str	r3, [r7, #16]
 80096be:	4b1e      	ldr	r3, [pc, #120]	; (8009738 <HAL_PCD_MspInit+0xa0>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	4a1d      	ldr	r2, [pc, #116]	; (8009738 <HAL_PCD_MspInit+0xa0>)
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	6313      	str	r3, [r2, #48]	; 0x30
 80096ca:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <HAL_PCD_MspInit+0xa0>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096dc:	2302      	movs	r3, #2
 80096de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096e4:	2303      	movs	r3, #3
 80096e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096e8:	230a      	movs	r3, #10
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096ec:	f107 0314 	add.w	r3, r7, #20
 80096f0:	4619      	mov	r1, r3
 80096f2:	4812      	ldr	r0, [pc, #72]	; (800973c <HAL_PCD_MspInit+0xa4>)
 80096f4:	f7f8 fa7e 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096f8:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <HAL_PCD_MspInit+0xa0>)
 80096fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fc:	4a0e      	ldr	r2, [pc, #56]	; (8009738 <HAL_PCD_MspInit+0xa0>)
 80096fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009702:	6353      	str	r3, [r2, #52]	; 0x34
 8009704:	2300      	movs	r3, #0
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <HAL_PCD_MspInit+0xa0>)
 800970a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970c:	4a0a      	ldr	r2, [pc, #40]	; (8009738 <HAL_PCD_MspInit+0xa0>)
 800970e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009712:	6453      	str	r3, [r2, #68]	; 0x44
 8009714:	4b08      	ldr	r3, [pc, #32]	; (8009738 <HAL_PCD_MspInit+0xa0>)
 8009716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009720:	2200      	movs	r2, #0
 8009722:	2100      	movs	r1, #0
 8009724:	2043      	movs	r0, #67	; 0x43
 8009726:	f7f7 fe2c 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800972a:	2043      	movs	r0, #67	; 0x43
 800972c:	f7f7 fe45 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009730:	bf00      	nop
 8009732:	3728      	adds	r7, #40	; 0x28
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	40023800 	.word	0x40023800
 800973c:	40020000 	.word	0x40020000

08009740 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009754:	4619      	mov	r1, r3
 8009756:	4610      	mov	r0, r2
 8009758:	f7fe fb7f 	bl	8007e5a <USBD_LL_SetupStage>
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009776:	78fa      	ldrb	r2, [r7, #3]
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	4613      	mov	r3, r2
 800977c:	00db      	lsls	r3, r3, #3
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	440b      	add	r3, r1
 8009784:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	4619      	mov	r1, r3
 800978e:	f7fe fbb9 	bl	8007f04 <USBD_LL_DataOutStage>
}
 8009792:	bf00      	nop
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	460b      	mov	r3, r1
 80097a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097ac:	78fa      	ldrb	r2, [r7, #3]
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	334c      	adds	r3, #76	; 0x4c
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	4619      	mov	r1, r3
 80097c2:	f7fe fc52 	bl	800806a <USBD_LL_DataInStage>
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fe fd86 	bl	80082ee <USBD_LL_SOF>
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097f2:	2301      	movs	r3, #1
 80097f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
 8009802:	e008      	b.n	8009816 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	2b02      	cmp	r3, #2
 800980a:	d102      	bne.n	8009812 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800980c:	2301      	movs	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]
 8009810:	e001      	b.n	8009816 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009812:	f7f7 fa49 	bl	8000ca8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800981c:	7bfa      	ldrb	r2, [r7, #15]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe fd26 	bl	8008272 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fcce 	bl	80081ce <USBD_LL_Reset>
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe fd21 	bl	8008292 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	6812      	ldr	r2, [r2, #0]
 800985e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009862:	f043 0301 	orr.w	r3, r3, #1
 8009866:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009870:	4b04      	ldr	r3, [pc, #16]	; (8009884 <HAL_PCD_SuspendCallback+0x48>)
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	4a03      	ldr	r2, [pc, #12]	; (8009884 <HAL_PCD_SuspendCallback+0x48>)
 8009876:	f043 0306 	orr.w	r3, r3, #6
 800987a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	e000ed00 	.word	0xe000ed00

08009888 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe fd11 	bl	80082be <USBD_LL_Resume>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe fd69 	bl	8008392 <USBD_LL_IsoOUTIncomplete>
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098da:	78fa      	ldrb	r2, [r7, #3]
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fd25 	bl	800832e <USBD_LL_IsoINIncomplete>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fd7b 	bl	80083f6 <USBD_LL_DevConnected>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fd78 	bl	800840c <USBD_LL_DevDisconnected>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d13c      	bne.n	80099ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009934:	4a20      	ldr	r2, [pc, #128]	; (80099b8 <USBD_LL_Init+0x94>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a1e      	ldr	r2, [pc, #120]	; (80099b8 <USBD_LL_Init+0x94>)
 8009940:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009944:	4b1c      	ldr	r3, [pc, #112]	; (80099b8 <USBD_LL_Init+0x94>)
 8009946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800994a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800994c:	4b1a      	ldr	r3, [pc, #104]	; (80099b8 <USBD_LL_Init+0x94>)
 800994e:	2204      	movs	r2, #4
 8009950:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009952:	4b19      	ldr	r3, [pc, #100]	; (80099b8 <USBD_LL_Init+0x94>)
 8009954:	2202      	movs	r2, #2
 8009956:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009958:	4b17      	ldr	r3, [pc, #92]	; (80099b8 <USBD_LL_Init+0x94>)
 800995a:	2200      	movs	r2, #0
 800995c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800995e:	4b16      	ldr	r3, [pc, #88]	; (80099b8 <USBD_LL_Init+0x94>)
 8009960:	2202      	movs	r2, #2
 8009962:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009964:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <USBD_LL_Init+0x94>)
 8009966:	2200      	movs	r2, #0
 8009968:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800996a:	4b13      	ldr	r3, [pc, #76]	; (80099b8 <USBD_LL_Init+0x94>)
 800996c:	2200      	movs	r2, #0
 800996e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009970:	4b11      	ldr	r3, [pc, #68]	; (80099b8 <USBD_LL_Init+0x94>)
 8009972:	2200      	movs	r2, #0
 8009974:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009976:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <USBD_LL_Init+0x94>)
 8009978:	2200      	movs	r2, #0
 800997a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800997c:	4b0e      	ldr	r3, [pc, #56]	; (80099b8 <USBD_LL_Init+0x94>)
 800997e:	2200      	movs	r2, #0
 8009980:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009982:	480d      	ldr	r0, [pc, #52]	; (80099b8 <USBD_LL_Init+0x94>)
 8009984:	f7f8 faeb 	bl	8001f5e <HAL_PCD_Init>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800998e:	f7f7 f98b 	bl	8000ca8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009992:	2180      	movs	r1, #128	; 0x80
 8009994:	4808      	ldr	r0, [pc, #32]	; (80099b8 <USBD_LL_Init+0x94>)
 8009996:	f7f9 fd42 	bl	800341e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800999a:	2240      	movs	r2, #64	; 0x40
 800999c:	2100      	movs	r1, #0
 800999e:	4806      	ldr	r0, [pc, #24]	; (80099b8 <USBD_LL_Init+0x94>)
 80099a0:	f7f9 fcf6 	bl	8003390 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099a4:	2280      	movs	r2, #128	; 0x80
 80099a6:	2101      	movs	r1, #1
 80099a8:	4803      	ldr	r0, [pc, #12]	; (80099b8 <USBD_LL_Init+0x94>)
 80099aa:	f7f9 fcf1 	bl	8003390 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	200057a0 	.word	0x200057a0

080099bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7f8 fbe0 	bl	8002198 <HAL_PCD_Start>
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f942 	bl	8009c68 <USBD_Get_USB_Status>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	4608      	mov	r0, r1
 80099fc:	4611      	mov	r1, r2
 80099fe:	461a      	mov	r2, r3
 8009a00:	4603      	mov	r3, r0
 8009a02:	70fb      	strb	r3, [r7, #3]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70bb      	strb	r3, [r7, #2]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a1a:	78bb      	ldrb	r3, [r7, #2]
 8009a1c:	883a      	ldrh	r2, [r7, #0]
 8009a1e:	78f9      	ldrb	r1, [r7, #3]
 8009a20:	f7f9 f8b1 	bl	8002b86 <HAL_PCD_EP_Open>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f91c 	bl	8009c68 <USBD_Get_USB_Status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7f9 f8fa 	bl	8002c56 <HAL_PCD_EP_Close>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 f8fd 	bl	8009c68 <USBD_Get_USB_Status>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f9 f9d2 	bl	8002e44 <HAL_PCD_EP_SetStall>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 f8de 	bl	8009c68 <USBD_Get_USB_Status>
 8009aac:	4603      	mov	r3, r0
 8009aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7f9 fa17 	bl	8002f0c <HAL_PCD_EP_ClrStall>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 f8bf 	bl	8009c68 <USBD_Get_USB_Status>
 8009aea:	4603      	mov	r3, r0
 8009aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	da0b      	bge.n	8009b2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b1a:	68f9      	ldr	r1, [r7, #12]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	4413      	add	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	440b      	add	r3, r1
 8009b26:	333e      	adds	r3, #62	; 0x3e
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	e00b      	b.n	8009b44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b32:	68f9      	ldr	r1, [r7, #12]
 8009b34:	4613      	mov	r3, r2
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	440b      	add	r3, r1
 8009b3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009b42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b6a:	78fa      	ldrb	r2, [r7, #3]
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7f8 ffe4 	bl	8002b3c <HAL_PCD_SetAddress>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f874 	bl	8009c68 <USBD_Get_USB_Status>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b086      	sub	sp, #24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bac:	7af9      	ldrb	r1, [r7, #11]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	f7f9 f8fd 	bl	8002db0 <HAL_PCD_EP_Transmit>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 f853 	bl	8009c68 <USBD_Get_USB_Status>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	607a      	str	r2, [r7, #4]
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bee:	7af9      	ldrb	r1, [r7, #11]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	f7f9 f879 	bl	8002cea <HAL_PCD_EP_Receive>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 f832 	bl	8009c68 <USBD_Get_USB_Status>
 8009c04:	4603      	mov	r3, r0
 8009c06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c08:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3718      	adds	r7, #24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c24:	78fa      	ldrb	r2, [r7, #3]
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7f9 f8a9 	bl	8002d80 <HAL_PCD_EP_GetRxCount>
 8009c2e:	4603      	mov	r3, r0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c40:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <USBD_static_malloc+0x18>)
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	20005cac 	.word	0x20005cac

08009c54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]

}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	2b03      	cmp	r3, #3
 8009c7a:	d817      	bhi.n	8009cac <USBD_Get_USB_Status+0x44>
 8009c7c:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <USBD_Get_USB_Status+0x1c>)
 8009c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c82:	bf00      	nop
 8009c84:	08009c95 	.word	0x08009c95
 8009c88:	08009c9b 	.word	0x08009c9b
 8009c8c:	08009ca1 	.word	0x08009ca1
 8009c90:	08009ca7 	.word	0x08009ca7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]
    break;
 8009c98:	e00b      	b.n	8009cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9e:	e008      	b.n	8009cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca4:	e005      	b.n	8009cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8009caa:	e002      	b.n	8009cb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cac:	2303      	movs	r3, #3
 8009cae:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb0:	bf00      	nop
  }
  return usb_status;
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <__errno>:
 8009cc0:	4b01      	ldr	r3, [pc, #4]	; (8009cc8 <__errno+0x8>)
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	200000fc 	.word	0x200000fc

08009ccc <__libc_init_array>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	4d0d      	ldr	r5, [pc, #52]	; (8009d04 <__libc_init_array+0x38>)
 8009cd0:	4c0d      	ldr	r4, [pc, #52]	; (8009d08 <__libc_init_array+0x3c>)
 8009cd2:	1b64      	subs	r4, r4, r5
 8009cd4:	10a4      	asrs	r4, r4, #2
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	42a6      	cmp	r6, r4
 8009cda:	d109      	bne.n	8009cf0 <__libc_init_array+0x24>
 8009cdc:	4d0b      	ldr	r5, [pc, #44]	; (8009d0c <__libc_init_array+0x40>)
 8009cde:	4c0c      	ldr	r4, [pc, #48]	; (8009d10 <__libc_init_array+0x44>)
 8009ce0:	f000 fc8e 	bl	800a600 <_init>
 8009ce4:	1b64      	subs	r4, r4, r5
 8009ce6:	10a4      	asrs	r4, r4, #2
 8009ce8:	2600      	movs	r6, #0
 8009cea:	42a6      	cmp	r6, r4
 8009cec:	d105      	bne.n	8009cfa <__libc_init_array+0x2e>
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf4:	4798      	blx	r3
 8009cf6:	3601      	adds	r6, #1
 8009cf8:	e7ee      	b.n	8009cd8 <__libc_init_array+0xc>
 8009cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfe:	4798      	blx	r3
 8009d00:	3601      	adds	r6, #1
 8009d02:	e7f2      	b.n	8009cea <__libc_init_array+0x1e>
 8009d04:	0800a6c8 	.word	0x0800a6c8
 8009d08:	0800a6c8 	.word	0x0800a6c8
 8009d0c:	0800a6c8 	.word	0x0800a6c8
 8009d10:	0800a6cc 	.word	0x0800a6cc

08009d14 <memset>:
 8009d14:	4402      	add	r2, r0
 8009d16:	4603      	mov	r3, r0
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d100      	bne.n	8009d1e <memset+0xa>
 8009d1c:	4770      	bx	lr
 8009d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d22:	e7f9      	b.n	8009d18 <memset+0x4>

08009d24 <siprintf>:
 8009d24:	b40e      	push	{r1, r2, r3}
 8009d26:	b500      	push	{lr}
 8009d28:	b09c      	sub	sp, #112	; 0x70
 8009d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d2c:	9002      	str	r0, [sp, #8]
 8009d2e:	9006      	str	r0, [sp, #24]
 8009d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d34:	4809      	ldr	r0, [pc, #36]	; (8009d5c <siprintf+0x38>)
 8009d36:	9107      	str	r1, [sp, #28]
 8009d38:	9104      	str	r1, [sp, #16]
 8009d3a:	4909      	ldr	r1, [pc, #36]	; (8009d60 <siprintf+0x3c>)
 8009d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d40:	9105      	str	r1, [sp, #20]
 8009d42:	6800      	ldr	r0, [r0, #0]
 8009d44:	9301      	str	r3, [sp, #4]
 8009d46:	a902      	add	r1, sp, #8
 8009d48:	f000 f868 	bl	8009e1c <_svfiprintf_r>
 8009d4c:	9b02      	ldr	r3, [sp, #8]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
 8009d52:	b01c      	add	sp, #112	; 0x70
 8009d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d58:	b003      	add	sp, #12
 8009d5a:	4770      	bx	lr
 8009d5c:	200000fc 	.word	0x200000fc
 8009d60:	ffff0208 	.word	0xffff0208

08009d64 <__ssputs_r>:
 8009d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d68:	688e      	ldr	r6, [r1, #8]
 8009d6a:	429e      	cmp	r6, r3
 8009d6c:	4682      	mov	sl, r0
 8009d6e:	460c      	mov	r4, r1
 8009d70:	4690      	mov	r8, r2
 8009d72:	461f      	mov	r7, r3
 8009d74:	d838      	bhi.n	8009de8 <__ssputs_r+0x84>
 8009d76:	898a      	ldrh	r2, [r1, #12]
 8009d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d7c:	d032      	beq.n	8009de4 <__ssputs_r+0x80>
 8009d7e:	6825      	ldr	r5, [r4, #0]
 8009d80:	6909      	ldr	r1, [r1, #16]
 8009d82:	eba5 0901 	sub.w	r9, r5, r1
 8009d86:	6965      	ldr	r5, [r4, #20]
 8009d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d90:	3301      	adds	r3, #1
 8009d92:	444b      	add	r3, r9
 8009d94:	106d      	asrs	r5, r5, #1
 8009d96:	429d      	cmp	r5, r3
 8009d98:	bf38      	it	cc
 8009d9a:	461d      	movcc	r5, r3
 8009d9c:	0553      	lsls	r3, r2, #21
 8009d9e:	d531      	bpl.n	8009e04 <__ssputs_r+0xa0>
 8009da0:	4629      	mov	r1, r5
 8009da2:	f000 fb63 	bl	800a46c <_malloc_r>
 8009da6:	4606      	mov	r6, r0
 8009da8:	b950      	cbnz	r0, 8009dc0 <__ssputs_r+0x5c>
 8009daa:	230c      	movs	r3, #12
 8009dac:	f8ca 3000 	str.w	r3, [sl]
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db6:	81a3      	strh	r3, [r4, #12]
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc0:	6921      	ldr	r1, [r4, #16]
 8009dc2:	464a      	mov	r2, r9
 8009dc4:	f000 fabe 	bl	800a344 <memcpy>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd2:	81a3      	strh	r3, [r4, #12]
 8009dd4:	6126      	str	r6, [r4, #16]
 8009dd6:	6165      	str	r5, [r4, #20]
 8009dd8:	444e      	add	r6, r9
 8009dda:	eba5 0509 	sub.w	r5, r5, r9
 8009dde:	6026      	str	r6, [r4, #0]
 8009de0:	60a5      	str	r5, [r4, #8]
 8009de2:	463e      	mov	r6, r7
 8009de4:	42be      	cmp	r6, r7
 8009de6:	d900      	bls.n	8009dea <__ssputs_r+0x86>
 8009de8:	463e      	mov	r6, r7
 8009dea:	6820      	ldr	r0, [r4, #0]
 8009dec:	4632      	mov	r2, r6
 8009dee:	4641      	mov	r1, r8
 8009df0:	f000 fab6 	bl	800a360 <memmove>
 8009df4:	68a3      	ldr	r3, [r4, #8]
 8009df6:	1b9b      	subs	r3, r3, r6
 8009df8:	60a3      	str	r3, [r4, #8]
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	4433      	add	r3, r6
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	2000      	movs	r0, #0
 8009e02:	e7db      	b.n	8009dbc <__ssputs_r+0x58>
 8009e04:	462a      	mov	r2, r5
 8009e06:	f000 fba5 	bl	800a554 <_realloc_r>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d1e1      	bne.n	8009dd4 <__ssputs_r+0x70>
 8009e10:	6921      	ldr	r1, [r4, #16]
 8009e12:	4650      	mov	r0, sl
 8009e14:	f000 fabe 	bl	800a394 <_free_r>
 8009e18:	e7c7      	b.n	8009daa <__ssputs_r+0x46>
	...

08009e1c <_svfiprintf_r>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	4698      	mov	r8, r3
 8009e22:	898b      	ldrh	r3, [r1, #12]
 8009e24:	061b      	lsls	r3, r3, #24
 8009e26:	b09d      	sub	sp, #116	; 0x74
 8009e28:	4607      	mov	r7, r0
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	4614      	mov	r4, r2
 8009e2e:	d50e      	bpl.n	8009e4e <_svfiprintf_r+0x32>
 8009e30:	690b      	ldr	r3, [r1, #16]
 8009e32:	b963      	cbnz	r3, 8009e4e <_svfiprintf_r+0x32>
 8009e34:	2140      	movs	r1, #64	; 0x40
 8009e36:	f000 fb19 	bl	800a46c <_malloc_r>
 8009e3a:	6028      	str	r0, [r5, #0]
 8009e3c:	6128      	str	r0, [r5, #16]
 8009e3e:	b920      	cbnz	r0, 8009e4a <_svfiprintf_r+0x2e>
 8009e40:	230c      	movs	r3, #12
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	f04f 30ff 	mov.w	r0, #4294967295
 8009e48:	e0d1      	b.n	8009fee <_svfiprintf_r+0x1d2>
 8009e4a:	2340      	movs	r3, #64	; 0x40
 8009e4c:	616b      	str	r3, [r5, #20]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9309      	str	r3, [sp, #36]	; 0x24
 8009e52:	2320      	movs	r3, #32
 8009e54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e5c:	2330      	movs	r3, #48	; 0x30
 8009e5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a008 <_svfiprintf_r+0x1ec>
 8009e62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e66:	f04f 0901 	mov.w	r9, #1
 8009e6a:	4623      	mov	r3, r4
 8009e6c:	469a      	mov	sl, r3
 8009e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e72:	b10a      	cbz	r2, 8009e78 <_svfiprintf_r+0x5c>
 8009e74:	2a25      	cmp	r2, #37	; 0x25
 8009e76:	d1f9      	bne.n	8009e6c <_svfiprintf_r+0x50>
 8009e78:	ebba 0b04 	subs.w	fp, sl, r4
 8009e7c:	d00b      	beq.n	8009e96 <_svfiprintf_r+0x7a>
 8009e7e:	465b      	mov	r3, fp
 8009e80:	4622      	mov	r2, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	4638      	mov	r0, r7
 8009e86:	f7ff ff6d 	bl	8009d64 <__ssputs_r>
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f000 80aa 	beq.w	8009fe4 <_svfiprintf_r+0x1c8>
 8009e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e92:	445a      	add	r2, fp
 8009e94:	9209      	str	r2, [sp, #36]	; 0x24
 8009e96:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 80a2 	beq.w	8009fe4 <_svfiprintf_r+0x1c8>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eaa:	f10a 0a01 	add.w	sl, sl, #1
 8009eae:	9304      	str	r3, [sp, #16]
 8009eb0:	9307      	str	r3, [sp, #28]
 8009eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8009eb8:	4654      	mov	r4, sl
 8009eba:	2205      	movs	r2, #5
 8009ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec0:	4851      	ldr	r0, [pc, #324]	; (800a008 <_svfiprintf_r+0x1ec>)
 8009ec2:	f7f6 f98d 	bl	80001e0 <memchr>
 8009ec6:	9a04      	ldr	r2, [sp, #16]
 8009ec8:	b9d8      	cbnz	r0, 8009f02 <_svfiprintf_r+0xe6>
 8009eca:	06d0      	lsls	r0, r2, #27
 8009ecc:	bf44      	itt	mi
 8009ece:	2320      	movmi	r3, #32
 8009ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ed4:	0711      	lsls	r1, r2, #28
 8009ed6:	bf44      	itt	mi
 8009ed8:	232b      	movmi	r3, #43	; 0x2b
 8009eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ede:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee4:	d015      	beq.n	8009f12 <_svfiprintf_r+0xf6>
 8009ee6:	9a07      	ldr	r2, [sp, #28]
 8009ee8:	4654      	mov	r4, sl
 8009eea:	2000      	movs	r0, #0
 8009eec:	f04f 0c0a 	mov.w	ip, #10
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef6:	3b30      	subs	r3, #48	; 0x30
 8009ef8:	2b09      	cmp	r3, #9
 8009efa:	d94e      	bls.n	8009f9a <_svfiprintf_r+0x17e>
 8009efc:	b1b0      	cbz	r0, 8009f2c <_svfiprintf_r+0x110>
 8009efe:	9207      	str	r2, [sp, #28]
 8009f00:	e014      	b.n	8009f2c <_svfiprintf_r+0x110>
 8009f02:	eba0 0308 	sub.w	r3, r0, r8
 8009f06:	fa09 f303 	lsl.w	r3, r9, r3
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	9304      	str	r3, [sp, #16]
 8009f0e:	46a2      	mov	sl, r4
 8009f10:	e7d2      	b.n	8009eb8 <_svfiprintf_r+0x9c>
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	1d19      	adds	r1, r3, #4
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	9103      	str	r1, [sp, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	bfbb      	ittet	lt
 8009f1e:	425b      	neglt	r3, r3
 8009f20:	f042 0202 	orrlt.w	r2, r2, #2
 8009f24:	9307      	strge	r3, [sp, #28]
 8009f26:	9307      	strlt	r3, [sp, #28]
 8009f28:	bfb8      	it	lt
 8009f2a:	9204      	strlt	r2, [sp, #16]
 8009f2c:	7823      	ldrb	r3, [r4, #0]
 8009f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f30:	d10c      	bne.n	8009f4c <_svfiprintf_r+0x130>
 8009f32:	7863      	ldrb	r3, [r4, #1]
 8009f34:	2b2a      	cmp	r3, #42	; 0x2a
 8009f36:	d135      	bne.n	8009fa4 <_svfiprintf_r+0x188>
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	1d1a      	adds	r2, r3, #4
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	9203      	str	r2, [sp, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bfb8      	it	lt
 8009f44:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f48:	3402      	adds	r4, #2
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a018 <_svfiprintf_r+0x1fc>
 8009f50:	7821      	ldrb	r1, [r4, #0]
 8009f52:	2203      	movs	r2, #3
 8009f54:	4650      	mov	r0, sl
 8009f56:	f7f6 f943 	bl	80001e0 <memchr>
 8009f5a:	b140      	cbz	r0, 8009f6e <_svfiprintf_r+0x152>
 8009f5c:	2340      	movs	r3, #64	; 0x40
 8009f5e:	eba0 000a 	sub.w	r0, r0, sl
 8009f62:	fa03 f000 	lsl.w	r0, r3, r0
 8009f66:	9b04      	ldr	r3, [sp, #16]
 8009f68:	4303      	orrs	r3, r0
 8009f6a:	3401      	adds	r4, #1
 8009f6c:	9304      	str	r3, [sp, #16]
 8009f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f72:	4826      	ldr	r0, [pc, #152]	; (800a00c <_svfiprintf_r+0x1f0>)
 8009f74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f78:	2206      	movs	r2, #6
 8009f7a:	f7f6 f931 	bl	80001e0 <memchr>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d038      	beq.n	8009ff4 <_svfiprintf_r+0x1d8>
 8009f82:	4b23      	ldr	r3, [pc, #140]	; (800a010 <_svfiprintf_r+0x1f4>)
 8009f84:	bb1b      	cbnz	r3, 8009fce <_svfiprintf_r+0x1b2>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	3307      	adds	r3, #7
 8009f8a:	f023 0307 	bic.w	r3, r3, #7
 8009f8e:	3308      	adds	r3, #8
 8009f90:	9303      	str	r3, [sp, #12]
 8009f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f94:	4433      	add	r3, r6
 8009f96:	9309      	str	r3, [sp, #36]	; 0x24
 8009f98:	e767      	b.n	8009e6a <_svfiprintf_r+0x4e>
 8009f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	e7a5      	b.n	8009ef0 <_svfiprintf_r+0xd4>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	3401      	adds	r4, #1
 8009fa8:	9305      	str	r3, [sp, #20]
 8009faa:	4619      	mov	r1, r3
 8009fac:	f04f 0c0a 	mov.w	ip, #10
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fb6:	3a30      	subs	r2, #48	; 0x30
 8009fb8:	2a09      	cmp	r2, #9
 8009fba:	d903      	bls.n	8009fc4 <_svfiprintf_r+0x1a8>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d0c5      	beq.n	8009f4c <_svfiprintf_r+0x130>
 8009fc0:	9105      	str	r1, [sp, #20]
 8009fc2:	e7c3      	b.n	8009f4c <_svfiprintf_r+0x130>
 8009fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fc8:	4604      	mov	r4, r0
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e7f0      	b.n	8009fb0 <_svfiprintf_r+0x194>
 8009fce:	ab03      	add	r3, sp, #12
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	462a      	mov	r2, r5
 8009fd4:	4b0f      	ldr	r3, [pc, #60]	; (800a014 <_svfiprintf_r+0x1f8>)
 8009fd6:	a904      	add	r1, sp, #16
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f3af 8000 	nop.w
 8009fde:	1c42      	adds	r2, r0, #1
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	d1d6      	bne.n	8009f92 <_svfiprintf_r+0x176>
 8009fe4:	89ab      	ldrh	r3, [r5, #12]
 8009fe6:	065b      	lsls	r3, r3, #25
 8009fe8:	f53f af2c 	bmi.w	8009e44 <_svfiprintf_r+0x28>
 8009fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fee:	b01d      	add	sp, #116	; 0x74
 8009ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff4:	ab03      	add	r3, sp, #12
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4b06      	ldr	r3, [pc, #24]	; (800a014 <_svfiprintf_r+0x1f8>)
 8009ffc:	a904      	add	r1, sp, #16
 8009ffe:	4638      	mov	r0, r7
 800a000:	f000 f87a 	bl	800a0f8 <_printf_i>
 800a004:	e7eb      	b.n	8009fde <_svfiprintf_r+0x1c2>
 800a006:	bf00      	nop
 800a008:	0800a68c 	.word	0x0800a68c
 800a00c:	0800a696 	.word	0x0800a696
 800a010:	00000000 	.word	0x00000000
 800a014:	08009d65 	.word	0x08009d65
 800a018:	0800a692 	.word	0x0800a692

0800a01c <_printf_common>:
 800a01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a020:	4616      	mov	r6, r2
 800a022:	4699      	mov	r9, r3
 800a024:	688a      	ldr	r2, [r1, #8]
 800a026:	690b      	ldr	r3, [r1, #16]
 800a028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a02c:	4293      	cmp	r3, r2
 800a02e:	bfb8      	it	lt
 800a030:	4613      	movlt	r3, r2
 800a032:	6033      	str	r3, [r6, #0]
 800a034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a038:	4607      	mov	r7, r0
 800a03a:	460c      	mov	r4, r1
 800a03c:	b10a      	cbz	r2, 800a042 <_printf_common+0x26>
 800a03e:	3301      	adds	r3, #1
 800a040:	6033      	str	r3, [r6, #0]
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	0699      	lsls	r1, r3, #26
 800a046:	bf42      	ittt	mi
 800a048:	6833      	ldrmi	r3, [r6, #0]
 800a04a:	3302      	addmi	r3, #2
 800a04c:	6033      	strmi	r3, [r6, #0]
 800a04e:	6825      	ldr	r5, [r4, #0]
 800a050:	f015 0506 	ands.w	r5, r5, #6
 800a054:	d106      	bne.n	800a064 <_printf_common+0x48>
 800a056:	f104 0a19 	add.w	sl, r4, #25
 800a05a:	68e3      	ldr	r3, [r4, #12]
 800a05c:	6832      	ldr	r2, [r6, #0]
 800a05e:	1a9b      	subs	r3, r3, r2
 800a060:	42ab      	cmp	r3, r5
 800a062:	dc26      	bgt.n	800a0b2 <_printf_common+0x96>
 800a064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a068:	1e13      	subs	r3, r2, #0
 800a06a:	6822      	ldr	r2, [r4, #0]
 800a06c:	bf18      	it	ne
 800a06e:	2301      	movne	r3, #1
 800a070:	0692      	lsls	r2, r2, #26
 800a072:	d42b      	bmi.n	800a0cc <_printf_common+0xb0>
 800a074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a078:	4649      	mov	r1, r9
 800a07a:	4638      	mov	r0, r7
 800a07c:	47c0      	blx	r8
 800a07e:	3001      	adds	r0, #1
 800a080:	d01e      	beq.n	800a0c0 <_printf_common+0xa4>
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	68e5      	ldr	r5, [r4, #12]
 800a086:	6832      	ldr	r2, [r6, #0]
 800a088:	f003 0306 	and.w	r3, r3, #6
 800a08c:	2b04      	cmp	r3, #4
 800a08e:	bf08      	it	eq
 800a090:	1aad      	subeq	r5, r5, r2
 800a092:	68a3      	ldr	r3, [r4, #8]
 800a094:	6922      	ldr	r2, [r4, #16]
 800a096:	bf0c      	ite	eq
 800a098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a09c:	2500      	movne	r5, #0
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	bfc4      	itt	gt
 800a0a2:	1a9b      	subgt	r3, r3, r2
 800a0a4:	18ed      	addgt	r5, r5, r3
 800a0a6:	2600      	movs	r6, #0
 800a0a8:	341a      	adds	r4, #26
 800a0aa:	42b5      	cmp	r5, r6
 800a0ac:	d11a      	bne.n	800a0e4 <_printf_common+0xc8>
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	e008      	b.n	800a0c4 <_printf_common+0xa8>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	4652      	mov	r2, sl
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	4638      	mov	r0, r7
 800a0ba:	47c0      	blx	r8
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d103      	bne.n	800a0c8 <_printf_common+0xac>
 800a0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c8:	3501      	adds	r5, #1
 800a0ca:	e7c6      	b.n	800a05a <_printf_common+0x3e>
 800a0cc:	18e1      	adds	r1, r4, r3
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	2030      	movs	r0, #48	; 0x30
 800a0d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0d6:	4422      	add	r2, r4
 800a0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0e0:	3302      	adds	r3, #2
 800a0e2:	e7c7      	b.n	800a074 <_printf_common+0x58>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	47c0      	blx	r8
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	d0e6      	beq.n	800a0c0 <_printf_common+0xa4>
 800a0f2:	3601      	adds	r6, #1
 800a0f4:	e7d9      	b.n	800a0aa <_printf_common+0x8e>
	...

0800a0f8 <_printf_i>:
 800a0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	7e0f      	ldrb	r7, [r1, #24]
 800a0fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a100:	2f78      	cmp	r7, #120	; 0x78
 800a102:	4691      	mov	r9, r2
 800a104:	4680      	mov	r8, r0
 800a106:	460c      	mov	r4, r1
 800a108:	469a      	mov	sl, r3
 800a10a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a10e:	d807      	bhi.n	800a120 <_printf_i+0x28>
 800a110:	2f62      	cmp	r7, #98	; 0x62
 800a112:	d80a      	bhi.n	800a12a <_printf_i+0x32>
 800a114:	2f00      	cmp	r7, #0
 800a116:	f000 80d8 	beq.w	800a2ca <_printf_i+0x1d2>
 800a11a:	2f58      	cmp	r7, #88	; 0x58
 800a11c:	f000 80a3 	beq.w	800a266 <_printf_i+0x16e>
 800a120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a128:	e03a      	b.n	800a1a0 <_printf_i+0xa8>
 800a12a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a12e:	2b15      	cmp	r3, #21
 800a130:	d8f6      	bhi.n	800a120 <_printf_i+0x28>
 800a132:	a101      	add	r1, pc, #4	; (adr r1, 800a138 <_printf_i+0x40>)
 800a134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a138:	0800a191 	.word	0x0800a191
 800a13c:	0800a1a5 	.word	0x0800a1a5
 800a140:	0800a121 	.word	0x0800a121
 800a144:	0800a121 	.word	0x0800a121
 800a148:	0800a121 	.word	0x0800a121
 800a14c:	0800a121 	.word	0x0800a121
 800a150:	0800a1a5 	.word	0x0800a1a5
 800a154:	0800a121 	.word	0x0800a121
 800a158:	0800a121 	.word	0x0800a121
 800a15c:	0800a121 	.word	0x0800a121
 800a160:	0800a121 	.word	0x0800a121
 800a164:	0800a2b1 	.word	0x0800a2b1
 800a168:	0800a1d5 	.word	0x0800a1d5
 800a16c:	0800a293 	.word	0x0800a293
 800a170:	0800a121 	.word	0x0800a121
 800a174:	0800a121 	.word	0x0800a121
 800a178:	0800a2d3 	.word	0x0800a2d3
 800a17c:	0800a121 	.word	0x0800a121
 800a180:	0800a1d5 	.word	0x0800a1d5
 800a184:	0800a121 	.word	0x0800a121
 800a188:	0800a121 	.word	0x0800a121
 800a18c:	0800a29b 	.word	0x0800a29b
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	1d1a      	adds	r2, r3, #4
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	602a      	str	r2, [r5, #0]
 800a198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a19c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e0a3      	b.n	800a2ec <_printf_i+0x1f4>
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	6829      	ldr	r1, [r5, #0]
 800a1a8:	0606      	lsls	r6, r0, #24
 800a1aa:	f101 0304 	add.w	r3, r1, #4
 800a1ae:	d50a      	bpl.n	800a1c6 <_printf_i+0xce>
 800a1b0:	680e      	ldr	r6, [r1, #0]
 800a1b2:	602b      	str	r3, [r5, #0]
 800a1b4:	2e00      	cmp	r6, #0
 800a1b6:	da03      	bge.n	800a1c0 <_printf_i+0xc8>
 800a1b8:	232d      	movs	r3, #45	; 0x2d
 800a1ba:	4276      	negs	r6, r6
 800a1bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c0:	485e      	ldr	r0, [pc, #376]	; (800a33c <_printf_i+0x244>)
 800a1c2:	230a      	movs	r3, #10
 800a1c4:	e019      	b.n	800a1fa <_printf_i+0x102>
 800a1c6:	680e      	ldr	r6, [r1, #0]
 800a1c8:	602b      	str	r3, [r5, #0]
 800a1ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1ce:	bf18      	it	ne
 800a1d0:	b236      	sxthne	r6, r6
 800a1d2:	e7ef      	b.n	800a1b4 <_printf_i+0xbc>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	6820      	ldr	r0, [r4, #0]
 800a1d8:	1d19      	adds	r1, r3, #4
 800a1da:	6029      	str	r1, [r5, #0]
 800a1dc:	0601      	lsls	r1, r0, #24
 800a1de:	d501      	bpl.n	800a1e4 <_printf_i+0xec>
 800a1e0:	681e      	ldr	r6, [r3, #0]
 800a1e2:	e002      	b.n	800a1ea <_printf_i+0xf2>
 800a1e4:	0646      	lsls	r6, r0, #25
 800a1e6:	d5fb      	bpl.n	800a1e0 <_printf_i+0xe8>
 800a1e8:	881e      	ldrh	r6, [r3, #0]
 800a1ea:	4854      	ldr	r0, [pc, #336]	; (800a33c <_printf_i+0x244>)
 800a1ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2308      	moveq	r3, #8
 800a1f2:	230a      	movne	r3, #10
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1fa:	6865      	ldr	r5, [r4, #4]
 800a1fc:	60a5      	str	r5, [r4, #8]
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	bfa2      	ittt	ge
 800a202:	6821      	ldrge	r1, [r4, #0]
 800a204:	f021 0104 	bicge.w	r1, r1, #4
 800a208:	6021      	strge	r1, [r4, #0]
 800a20a:	b90e      	cbnz	r6, 800a210 <_printf_i+0x118>
 800a20c:	2d00      	cmp	r5, #0
 800a20e:	d04d      	beq.n	800a2ac <_printf_i+0x1b4>
 800a210:	4615      	mov	r5, r2
 800a212:	fbb6 f1f3 	udiv	r1, r6, r3
 800a216:	fb03 6711 	mls	r7, r3, r1, r6
 800a21a:	5dc7      	ldrb	r7, [r0, r7]
 800a21c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a220:	4637      	mov	r7, r6
 800a222:	42bb      	cmp	r3, r7
 800a224:	460e      	mov	r6, r1
 800a226:	d9f4      	bls.n	800a212 <_printf_i+0x11a>
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d10b      	bne.n	800a244 <_printf_i+0x14c>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	07de      	lsls	r6, r3, #31
 800a230:	d508      	bpl.n	800a244 <_printf_i+0x14c>
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	6861      	ldr	r1, [r4, #4]
 800a236:	4299      	cmp	r1, r3
 800a238:	bfde      	ittt	le
 800a23a:	2330      	movle	r3, #48	; 0x30
 800a23c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a240:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a244:	1b52      	subs	r2, r2, r5
 800a246:	6122      	str	r2, [r4, #16]
 800a248:	f8cd a000 	str.w	sl, [sp]
 800a24c:	464b      	mov	r3, r9
 800a24e:	aa03      	add	r2, sp, #12
 800a250:	4621      	mov	r1, r4
 800a252:	4640      	mov	r0, r8
 800a254:	f7ff fee2 	bl	800a01c <_printf_common>
 800a258:	3001      	adds	r0, #1
 800a25a:	d14c      	bne.n	800a2f6 <_printf_i+0x1fe>
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295
 800a260:	b004      	add	sp, #16
 800a262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a266:	4835      	ldr	r0, [pc, #212]	; (800a33c <_printf_i+0x244>)
 800a268:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a26c:	6829      	ldr	r1, [r5, #0]
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	f851 6b04 	ldr.w	r6, [r1], #4
 800a274:	6029      	str	r1, [r5, #0]
 800a276:	061d      	lsls	r5, r3, #24
 800a278:	d514      	bpl.n	800a2a4 <_printf_i+0x1ac>
 800a27a:	07df      	lsls	r7, r3, #31
 800a27c:	bf44      	itt	mi
 800a27e:	f043 0320 	orrmi.w	r3, r3, #32
 800a282:	6023      	strmi	r3, [r4, #0]
 800a284:	b91e      	cbnz	r6, 800a28e <_printf_i+0x196>
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	f023 0320 	bic.w	r3, r3, #32
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	2310      	movs	r3, #16
 800a290:	e7b0      	b.n	800a1f4 <_printf_i+0xfc>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	f043 0320 	orr.w	r3, r3, #32
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	2378      	movs	r3, #120	; 0x78
 800a29c:	4828      	ldr	r0, [pc, #160]	; (800a340 <_printf_i+0x248>)
 800a29e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2a2:	e7e3      	b.n	800a26c <_printf_i+0x174>
 800a2a4:	0659      	lsls	r1, r3, #25
 800a2a6:	bf48      	it	mi
 800a2a8:	b2b6      	uxthmi	r6, r6
 800a2aa:	e7e6      	b.n	800a27a <_printf_i+0x182>
 800a2ac:	4615      	mov	r5, r2
 800a2ae:	e7bb      	b.n	800a228 <_printf_i+0x130>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	6826      	ldr	r6, [r4, #0]
 800a2b4:	6961      	ldr	r1, [r4, #20]
 800a2b6:	1d18      	adds	r0, r3, #4
 800a2b8:	6028      	str	r0, [r5, #0]
 800a2ba:	0635      	lsls	r5, r6, #24
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	d501      	bpl.n	800a2c4 <_printf_i+0x1cc>
 800a2c0:	6019      	str	r1, [r3, #0]
 800a2c2:	e002      	b.n	800a2ca <_printf_i+0x1d2>
 800a2c4:	0670      	lsls	r0, r6, #25
 800a2c6:	d5fb      	bpl.n	800a2c0 <_printf_i+0x1c8>
 800a2c8:	8019      	strh	r1, [r3, #0]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	6123      	str	r3, [r4, #16]
 800a2ce:	4615      	mov	r5, r2
 800a2d0:	e7ba      	b.n	800a248 <_printf_i+0x150>
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	1d1a      	adds	r2, r3, #4
 800a2d6:	602a      	str	r2, [r5, #0]
 800a2d8:	681d      	ldr	r5, [r3, #0]
 800a2da:	6862      	ldr	r2, [r4, #4]
 800a2dc:	2100      	movs	r1, #0
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f7f5 ff7e 	bl	80001e0 <memchr>
 800a2e4:	b108      	cbz	r0, 800a2ea <_printf_i+0x1f2>
 800a2e6:	1b40      	subs	r0, r0, r5
 800a2e8:	6060      	str	r0, [r4, #4]
 800a2ea:	6863      	ldr	r3, [r4, #4]
 800a2ec:	6123      	str	r3, [r4, #16]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f4:	e7a8      	b.n	800a248 <_printf_i+0x150>
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	462a      	mov	r2, r5
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	47d0      	blx	sl
 800a300:	3001      	adds	r0, #1
 800a302:	d0ab      	beq.n	800a25c <_printf_i+0x164>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	079b      	lsls	r3, r3, #30
 800a308:	d413      	bmi.n	800a332 <_printf_i+0x23a>
 800a30a:	68e0      	ldr	r0, [r4, #12]
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	4298      	cmp	r0, r3
 800a310:	bfb8      	it	lt
 800a312:	4618      	movlt	r0, r3
 800a314:	e7a4      	b.n	800a260 <_printf_i+0x168>
 800a316:	2301      	movs	r3, #1
 800a318:	4632      	mov	r2, r6
 800a31a:	4649      	mov	r1, r9
 800a31c:	4640      	mov	r0, r8
 800a31e:	47d0      	blx	sl
 800a320:	3001      	adds	r0, #1
 800a322:	d09b      	beq.n	800a25c <_printf_i+0x164>
 800a324:	3501      	adds	r5, #1
 800a326:	68e3      	ldr	r3, [r4, #12]
 800a328:	9903      	ldr	r1, [sp, #12]
 800a32a:	1a5b      	subs	r3, r3, r1
 800a32c:	42ab      	cmp	r3, r5
 800a32e:	dcf2      	bgt.n	800a316 <_printf_i+0x21e>
 800a330:	e7eb      	b.n	800a30a <_printf_i+0x212>
 800a332:	2500      	movs	r5, #0
 800a334:	f104 0619 	add.w	r6, r4, #25
 800a338:	e7f5      	b.n	800a326 <_printf_i+0x22e>
 800a33a:	bf00      	nop
 800a33c:	0800a69d 	.word	0x0800a69d
 800a340:	0800a6ae 	.word	0x0800a6ae

0800a344 <memcpy>:
 800a344:	440a      	add	r2, r1
 800a346:	4291      	cmp	r1, r2
 800a348:	f100 33ff 	add.w	r3, r0, #4294967295
 800a34c:	d100      	bne.n	800a350 <memcpy+0xc>
 800a34e:	4770      	bx	lr
 800a350:	b510      	push	{r4, lr}
 800a352:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a35a:	4291      	cmp	r1, r2
 800a35c:	d1f9      	bne.n	800a352 <memcpy+0xe>
 800a35e:	bd10      	pop	{r4, pc}

0800a360 <memmove>:
 800a360:	4288      	cmp	r0, r1
 800a362:	b510      	push	{r4, lr}
 800a364:	eb01 0402 	add.w	r4, r1, r2
 800a368:	d902      	bls.n	800a370 <memmove+0x10>
 800a36a:	4284      	cmp	r4, r0
 800a36c:	4623      	mov	r3, r4
 800a36e:	d807      	bhi.n	800a380 <memmove+0x20>
 800a370:	1e43      	subs	r3, r0, #1
 800a372:	42a1      	cmp	r1, r4
 800a374:	d008      	beq.n	800a388 <memmove+0x28>
 800a376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a37a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a37e:	e7f8      	b.n	800a372 <memmove+0x12>
 800a380:	4402      	add	r2, r0
 800a382:	4601      	mov	r1, r0
 800a384:	428a      	cmp	r2, r1
 800a386:	d100      	bne.n	800a38a <memmove+0x2a>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a38e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a392:	e7f7      	b.n	800a384 <memmove+0x24>

0800a394 <_free_r>:
 800a394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a396:	2900      	cmp	r1, #0
 800a398:	d044      	beq.n	800a424 <_free_r+0x90>
 800a39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a39e:	9001      	str	r0, [sp, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3a6:	bfb8      	it	lt
 800a3a8:	18e4      	addlt	r4, r4, r3
 800a3aa:	f000 f913 	bl	800a5d4 <__malloc_lock>
 800a3ae:	4a1e      	ldr	r2, [pc, #120]	; (800a428 <_free_r+0x94>)
 800a3b0:	9801      	ldr	r0, [sp, #4]
 800a3b2:	6813      	ldr	r3, [r2, #0]
 800a3b4:	b933      	cbnz	r3, 800a3c4 <_free_r+0x30>
 800a3b6:	6063      	str	r3, [r4, #4]
 800a3b8:	6014      	str	r4, [r2, #0]
 800a3ba:	b003      	add	sp, #12
 800a3bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3c0:	f000 b90e 	b.w	800a5e0 <__malloc_unlock>
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d908      	bls.n	800a3da <_free_r+0x46>
 800a3c8:	6825      	ldr	r5, [r4, #0]
 800a3ca:	1961      	adds	r1, r4, r5
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	bf01      	itttt	eq
 800a3d0:	6819      	ldreq	r1, [r3, #0]
 800a3d2:	685b      	ldreq	r3, [r3, #4]
 800a3d4:	1949      	addeq	r1, r1, r5
 800a3d6:	6021      	streq	r1, [r4, #0]
 800a3d8:	e7ed      	b.n	800a3b6 <_free_r+0x22>
 800a3da:	461a      	mov	r2, r3
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	b10b      	cbz	r3, 800a3e4 <_free_r+0x50>
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d9fa      	bls.n	800a3da <_free_r+0x46>
 800a3e4:	6811      	ldr	r1, [r2, #0]
 800a3e6:	1855      	adds	r5, r2, r1
 800a3e8:	42a5      	cmp	r5, r4
 800a3ea:	d10b      	bne.n	800a404 <_free_r+0x70>
 800a3ec:	6824      	ldr	r4, [r4, #0]
 800a3ee:	4421      	add	r1, r4
 800a3f0:	1854      	adds	r4, r2, r1
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	6011      	str	r1, [r2, #0]
 800a3f6:	d1e0      	bne.n	800a3ba <_free_r+0x26>
 800a3f8:	681c      	ldr	r4, [r3, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	6053      	str	r3, [r2, #4]
 800a3fe:	4421      	add	r1, r4
 800a400:	6011      	str	r1, [r2, #0]
 800a402:	e7da      	b.n	800a3ba <_free_r+0x26>
 800a404:	d902      	bls.n	800a40c <_free_r+0x78>
 800a406:	230c      	movs	r3, #12
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	e7d6      	b.n	800a3ba <_free_r+0x26>
 800a40c:	6825      	ldr	r5, [r4, #0]
 800a40e:	1961      	adds	r1, r4, r5
 800a410:	428b      	cmp	r3, r1
 800a412:	bf04      	itt	eq
 800a414:	6819      	ldreq	r1, [r3, #0]
 800a416:	685b      	ldreq	r3, [r3, #4]
 800a418:	6063      	str	r3, [r4, #4]
 800a41a:	bf04      	itt	eq
 800a41c:	1949      	addeq	r1, r1, r5
 800a41e:	6021      	streq	r1, [r4, #0]
 800a420:	6054      	str	r4, [r2, #4]
 800a422:	e7ca      	b.n	800a3ba <_free_r+0x26>
 800a424:	b003      	add	sp, #12
 800a426:	bd30      	pop	{r4, r5, pc}
 800a428:	20005ecc 	.word	0x20005ecc

0800a42c <sbrk_aligned>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	4e0e      	ldr	r6, [pc, #56]	; (800a468 <sbrk_aligned+0x3c>)
 800a430:	460c      	mov	r4, r1
 800a432:	6831      	ldr	r1, [r6, #0]
 800a434:	4605      	mov	r5, r0
 800a436:	b911      	cbnz	r1, 800a43e <sbrk_aligned+0x12>
 800a438:	f000 f8bc 	bl	800a5b4 <_sbrk_r>
 800a43c:	6030      	str	r0, [r6, #0]
 800a43e:	4621      	mov	r1, r4
 800a440:	4628      	mov	r0, r5
 800a442:	f000 f8b7 	bl	800a5b4 <_sbrk_r>
 800a446:	1c43      	adds	r3, r0, #1
 800a448:	d00a      	beq.n	800a460 <sbrk_aligned+0x34>
 800a44a:	1cc4      	adds	r4, r0, #3
 800a44c:	f024 0403 	bic.w	r4, r4, #3
 800a450:	42a0      	cmp	r0, r4
 800a452:	d007      	beq.n	800a464 <sbrk_aligned+0x38>
 800a454:	1a21      	subs	r1, r4, r0
 800a456:	4628      	mov	r0, r5
 800a458:	f000 f8ac 	bl	800a5b4 <_sbrk_r>
 800a45c:	3001      	adds	r0, #1
 800a45e:	d101      	bne.n	800a464 <sbrk_aligned+0x38>
 800a460:	f04f 34ff 	mov.w	r4, #4294967295
 800a464:	4620      	mov	r0, r4
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	20005ed0 	.word	0x20005ed0

0800a46c <_malloc_r>:
 800a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a470:	1ccd      	adds	r5, r1, #3
 800a472:	f025 0503 	bic.w	r5, r5, #3
 800a476:	3508      	adds	r5, #8
 800a478:	2d0c      	cmp	r5, #12
 800a47a:	bf38      	it	cc
 800a47c:	250c      	movcc	r5, #12
 800a47e:	2d00      	cmp	r5, #0
 800a480:	4607      	mov	r7, r0
 800a482:	db01      	blt.n	800a488 <_malloc_r+0x1c>
 800a484:	42a9      	cmp	r1, r5
 800a486:	d905      	bls.n	800a494 <_malloc_r+0x28>
 800a488:	230c      	movs	r3, #12
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	2600      	movs	r6, #0
 800a48e:	4630      	mov	r0, r6
 800a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a494:	4e2e      	ldr	r6, [pc, #184]	; (800a550 <_malloc_r+0xe4>)
 800a496:	f000 f89d 	bl	800a5d4 <__malloc_lock>
 800a49a:	6833      	ldr	r3, [r6, #0]
 800a49c:	461c      	mov	r4, r3
 800a49e:	bb34      	cbnz	r4, 800a4ee <_malloc_r+0x82>
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	f7ff ffc2 	bl	800a42c <sbrk_aligned>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	d14d      	bne.n	800a54a <_malloc_r+0xde>
 800a4ae:	6834      	ldr	r4, [r6, #0]
 800a4b0:	4626      	mov	r6, r4
 800a4b2:	2e00      	cmp	r6, #0
 800a4b4:	d140      	bne.n	800a538 <_malloc_r+0xcc>
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	eb04 0803 	add.w	r8, r4, r3
 800a4c0:	f000 f878 	bl	800a5b4 <_sbrk_r>
 800a4c4:	4580      	cmp	r8, r0
 800a4c6:	d13a      	bne.n	800a53e <_malloc_r+0xd2>
 800a4c8:	6821      	ldr	r1, [r4, #0]
 800a4ca:	3503      	adds	r5, #3
 800a4cc:	1a6d      	subs	r5, r5, r1
 800a4ce:	f025 0503 	bic.w	r5, r5, #3
 800a4d2:	3508      	adds	r5, #8
 800a4d4:	2d0c      	cmp	r5, #12
 800a4d6:	bf38      	it	cc
 800a4d8:	250c      	movcc	r5, #12
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f7ff ffa5 	bl	800a42c <sbrk_aligned>
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d02b      	beq.n	800a53e <_malloc_r+0xd2>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	442b      	add	r3, r5
 800a4ea:	6023      	str	r3, [r4, #0]
 800a4ec:	e00e      	b.n	800a50c <_malloc_r+0xa0>
 800a4ee:	6822      	ldr	r2, [r4, #0]
 800a4f0:	1b52      	subs	r2, r2, r5
 800a4f2:	d41e      	bmi.n	800a532 <_malloc_r+0xc6>
 800a4f4:	2a0b      	cmp	r2, #11
 800a4f6:	d916      	bls.n	800a526 <_malloc_r+0xba>
 800a4f8:	1961      	adds	r1, r4, r5
 800a4fa:	42a3      	cmp	r3, r4
 800a4fc:	6025      	str	r5, [r4, #0]
 800a4fe:	bf18      	it	ne
 800a500:	6059      	strne	r1, [r3, #4]
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	bf08      	it	eq
 800a506:	6031      	streq	r1, [r6, #0]
 800a508:	5162      	str	r2, [r4, r5]
 800a50a:	604b      	str	r3, [r1, #4]
 800a50c:	4638      	mov	r0, r7
 800a50e:	f104 060b 	add.w	r6, r4, #11
 800a512:	f000 f865 	bl	800a5e0 <__malloc_unlock>
 800a516:	f026 0607 	bic.w	r6, r6, #7
 800a51a:	1d23      	adds	r3, r4, #4
 800a51c:	1af2      	subs	r2, r6, r3
 800a51e:	d0b6      	beq.n	800a48e <_malloc_r+0x22>
 800a520:	1b9b      	subs	r3, r3, r6
 800a522:	50a3      	str	r3, [r4, r2]
 800a524:	e7b3      	b.n	800a48e <_malloc_r+0x22>
 800a526:	6862      	ldr	r2, [r4, #4]
 800a528:	42a3      	cmp	r3, r4
 800a52a:	bf0c      	ite	eq
 800a52c:	6032      	streq	r2, [r6, #0]
 800a52e:	605a      	strne	r2, [r3, #4]
 800a530:	e7ec      	b.n	800a50c <_malloc_r+0xa0>
 800a532:	4623      	mov	r3, r4
 800a534:	6864      	ldr	r4, [r4, #4]
 800a536:	e7b2      	b.n	800a49e <_malloc_r+0x32>
 800a538:	4634      	mov	r4, r6
 800a53a:	6876      	ldr	r6, [r6, #4]
 800a53c:	e7b9      	b.n	800a4b2 <_malloc_r+0x46>
 800a53e:	230c      	movs	r3, #12
 800a540:	603b      	str	r3, [r7, #0]
 800a542:	4638      	mov	r0, r7
 800a544:	f000 f84c 	bl	800a5e0 <__malloc_unlock>
 800a548:	e7a1      	b.n	800a48e <_malloc_r+0x22>
 800a54a:	6025      	str	r5, [r4, #0]
 800a54c:	e7de      	b.n	800a50c <_malloc_r+0xa0>
 800a54e:	bf00      	nop
 800a550:	20005ecc 	.word	0x20005ecc

0800a554 <_realloc_r>:
 800a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	4680      	mov	r8, r0
 800a55a:	4614      	mov	r4, r2
 800a55c:	460e      	mov	r6, r1
 800a55e:	b921      	cbnz	r1, 800a56a <_realloc_r+0x16>
 800a560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a564:	4611      	mov	r1, r2
 800a566:	f7ff bf81 	b.w	800a46c <_malloc_r>
 800a56a:	b92a      	cbnz	r2, 800a578 <_realloc_r+0x24>
 800a56c:	f7ff ff12 	bl	800a394 <_free_r>
 800a570:	4625      	mov	r5, r4
 800a572:	4628      	mov	r0, r5
 800a574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a578:	f000 f838 	bl	800a5ec <_malloc_usable_size_r>
 800a57c:	4284      	cmp	r4, r0
 800a57e:	4607      	mov	r7, r0
 800a580:	d802      	bhi.n	800a588 <_realloc_r+0x34>
 800a582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a586:	d812      	bhi.n	800a5ae <_realloc_r+0x5a>
 800a588:	4621      	mov	r1, r4
 800a58a:	4640      	mov	r0, r8
 800a58c:	f7ff ff6e 	bl	800a46c <_malloc_r>
 800a590:	4605      	mov	r5, r0
 800a592:	2800      	cmp	r0, #0
 800a594:	d0ed      	beq.n	800a572 <_realloc_r+0x1e>
 800a596:	42bc      	cmp	r4, r7
 800a598:	4622      	mov	r2, r4
 800a59a:	4631      	mov	r1, r6
 800a59c:	bf28      	it	cs
 800a59e:	463a      	movcs	r2, r7
 800a5a0:	f7ff fed0 	bl	800a344 <memcpy>
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	f7ff fef4 	bl	800a394 <_free_r>
 800a5ac:	e7e1      	b.n	800a572 <_realloc_r+0x1e>
 800a5ae:	4635      	mov	r5, r6
 800a5b0:	e7df      	b.n	800a572 <_realloc_r+0x1e>
	...

0800a5b4 <_sbrk_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d06      	ldr	r5, [pc, #24]	; (800a5d0 <_sbrk_r+0x1c>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	f7f6 fcfc 	bl	8000fbc <_sbrk>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_sbrk_r+0x1a>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_sbrk_r+0x1a>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	20005ed4 	.word	0x20005ed4

0800a5d4 <__malloc_lock>:
 800a5d4:	4801      	ldr	r0, [pc, #4]	; (800a5dc <__malloc_lock+0x8>)
 800a5d6:	f000 b811 	b.w	800a5fc <__retarget_lock_acquire_recursive>
 800a5da:	bf00      	nop
 800a5dc:	20005ed8 	.word	0x20005ed8

0800a5e0 <__malloc_unlock>:
 800a5e0:	4801      	ldr	r0, [pc, #4]	; (800a5e8 <__malloc_unlock+0x8>)
 800a5e2:	f000 b80c 	b.w	800a5fe <__retarget_lock_release_recursive>
 800a5e6:	bf00      	nop
 800a5e8:	20005ed8 	.word	0x20005ed8

0800a5ec <_malloc_usable_size_r>:
 800a5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5f0:	1f18      	subs	r0, r3, #4
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	bfbc      	itt	lt
 800a5f6:	580b      	ldrlt	r3, [r1, r0]
 800a5f8:	18c0      	addlt	r0, r0, r3
 800a5fa:	4770      	bx	lr

0800a5fc <__retarget_lock_acquire_recursive>:
 800a5fc:	4770      	bx	lr

0800a5fe <__retarget_lock_release_recursive>:
 800a5fe:	4770      	bx	lr

0800a600 <_init>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	bf00      	nop
 800a604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a606:	bc08      	pop	{r3}
 800a608:	469e      	mov	lr, r3
 800a60a:	4770      	bx	lr

0800a60c <_fini>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	bf00      	nop
 800a610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a612:	bc08      	pop	{r3}
 800a614:	469e      	mov	lr, r3
 800a616:	4770      	bx	lr
